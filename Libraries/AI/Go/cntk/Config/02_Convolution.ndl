# macros to include
load = ndlGoMacros

# the actual NDL that defines the network
run = DNN

ndlGoMacros = [
    imageW = 19
    imageH = 19
    

    features = ImageInput(imageW, imageH, 1, tag = feature, imageLayout=$imageLayout$)
    featScale = Const(0.00390625)
    # featScaled = Scale(featScale, features)
	#featScaled = features
    labels = ImageInput(imageW, imageH, 1, tag = label, imageLayout=$imageLayout$)
]

DNN=[
    # conv1
    kW1 = 5
    kH1 = 5
    cMap1 = 16
    hStride1 = 1
    vStride1 = 1
    # weight[cMap1, kW1 * kH1 * inputChannels]
    # ConvReLULayer is defined in Macros.ndl
    conv1_act = ConvReLULayer(features, cMap1, 25, kW1, kH1, hStride1, vStride1, 10, 1)

    # pool1
    # pool1W = 2
    # pool1H = 2
    # pool1hStride = 2
    # pool1vStride = 2
    # pool1 = MaxPooling(conv1_act, pool1W, pool1H, pool1hStride, pool1vStride, imageLayout=$imageLayout$)

    # conv2
    kW2 = 5
    kH2 = 5
    cMap2 = 32
    hStride2 = 1
    vStride2 = 1
    # weight[cMap2, kW2 * kH2 * cMap1]
    # ConvReLULayer is defined in Macros.ndl
    # conv2_act = ConvReLULayer(pool1, cMap2, 400, kW2, kH2, hStride2, vStride2, 10, 1)
	conv2_act = ConvReLULayer(conv1_act, cMap2, 400, kW2, kH2, hStride2, vStride2, 10, 1)

    # pool2
    # pool2W = 2
    # pool2H = 2
    # pool2hStride = 2
    # pool2vStride = 2
    # pool2 = MaxPooling(conv2_act, pool2W, pool2H, pool2hStride, pool2vStride, imageLayout=$imageLayout$)

    # h1Dim = 128
	# h1Dim = 784
	h1Dim = 512
    # DNNSigmoidLayer and DNNLayer are defined in Macros.ndl
    # h1 = DNNSigmoidLayer(512, h1Dim, pool2, 1)
	h1 = DNNImageSigmoidLayer(11, 11, cMap2, h1Dim, conv2_act, 1)
    ol = DNNLayer(h1Dim, 361, h1, 1)
    
    ce = CrossEntropyWithSoftmax(labels, ol)
    err = ErrorPrediction(labels, ol)

    # Special Nodes
    FeatureNodes = (features)
    LabelNodes = (labels)
    CriterionNodes = (ce)
    EvalNodes = (err)
    OutputNodes = (ol)
]

