<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RuleEngineSettings`1_Rules.Header" xml:space="preserve">
    <value>Runtime</value>
  </data>
  <data name="ValueList_AddNew.Text" xml:space="preserve">
    <value>Add new Value</value>
  </data>
  <data name="MembershipCondition`1_MatchRoles.Help" xml:space="preserve">
    <value>Enter a semi-colon separated list of role names, the members of which will trigger the condition on incoming client connections.</value>
  </data>
  <data name="MembershipCondition`1_MatchRoles.Text" xml:space="preserve">
    <value>Match Roles</value>
  </data>
  <data name="MembershipCondition`1_MatchSuperUsers.Help" xml:space="preserve">
    <value>Check to filter any matching client logged in with a super user account. Be careful before applying that feature to the default rule that your host user is available through a known specific rule condition. </value>
  </data>
  <data name="MembershipCondition`1_MatchSuperUsers.Text" xml:space="preserve">
    <value>Match Super Users</value>
  </data>
  <data name="ClientSourceCondition`1_ValueList.Help" xml:space="preserve">
    <value>Enter a list of source values to be matched. The current value shown above might help. You can skip the last chars for range matching.</value>
  </data>
  <data name="ClientSourceCondition`1_ValueList.Text" xml:space="preserve">
    <value>Values</value>
  </data>
  <data name="PortalAliasCondition_PortalAliases.Help" xml:space="preserve">
    <value>Choose any portal alias defining the condition. Any request made to that base url fires the corresponding policy. This is useful to restrict your website access to editors or admin users only from a local url unavailable from the internet</value>
  </data>
  <data name="PortalAliasCondition_PortalAliases.Text" xml:space="preserve">
    <value>Portal Aliases</value>
  </data>
  <data name="KeeperRule`1_Action.Help" xml:space="preserve">
    <value>Again, you can combine a chain of actions to perform. </value>
  </data>
  <data name="KeeperRule`1_Action.Text" xml:space="preserve">
    <value>Those elements define the actions to be performed when the above condition is matched</value>
  </data>
  <data name="KeeperRule`1_Condition.Header" xml:space="preserve">
    <value>Conditions</value>
  </data>
  <data name="KeeperRule`1_Condition.Help" xml:space="preserve">
    <value>The client request can be tested for different sets of conditions defined by corresponding provider. Select one of the available providers and click the add button to start adding conditions. You can combine them into condition expressions using the "mandatory" parameter and the subconditions dedicated provider</value>
  </data>
  <data name="KeeperRule`1_Condition.Text" xml:space="preserve">
    <value>Those elements define the conditions to be matched by the client request to trigger the rule.</value>
  </data>
  <data name="KeeperRule`1_Enabled.Help" xml:space="preserve">
    <value>Uncheck to disable temporarily that specific rule</value>
  </data>
  <data name="KeeperRule`1_Enabled.Text" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="KeeperRule`1_Action.Header" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="PortalAliases_AddNew.Text" xml:space="preserve">
    <value>Add new portal alias</value>
  </data>
  <data name="FirewallSettings_DefaultBehaviour.Help" xml:space="preserve">
    <value>Defines the access policy when no rule condition is matched against the incoming request. That behaviour applies to IP addresses and portal aliases outside from the ranges specified in specific rules. </value>
  </data>
  <data name="FirewallSettings_DefaultBehaviour.Text" xml:space="preserve">
    <value>Default Policy</value>
  </data>
  <data name="RuleEngineSettings`1_Enabled.Help" xml:space="preserve">
    <value>Main switch to enabled/disable the Engine. The component running the engine should account for that switch.</value>
  </data>
  <data name="RuleEngineSettings`1_Enabled.Text" xml:space="preserve">
    <value>Enable Rule Engine</value>
  </data>
  <data name="RuleEngineSettings`1_Rules.Help" xml:space="preserve">
    <value>The client request can be tested for specific portal aliases or ip addresses, whereas the policies disable specific accesses</value>
  </data>
  <data name="RuleEngineSettings`1_Rules.Text" xml:space="preserve">
    <value>Those rules map custom client matching conditions to specific action sequences</value>
  </data>
  <data name="Rules_AddNew.Text" xml:space="preserve">
    <value>Add New Rule</value>
  </data>
  <data name="DefaultRegistration.Text" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="CustomizeEnvironmentAction_EnforceViewMode.Help" xml:space="preserve">
    <value>You can enforce View Mode display for all users</value>
  </data>
  <data name="CustomizeEnvironmentAction_EnforceViewMode.Text" xml:space="preserve">
    <value>View Mode Only</value>
  </data>
  <data name="CustomizeEnvironmentAction_SubPortalRegistrationType.Help" xml:space="preserve">
    <value>You can optionally override here the default user registration mode as defined in the Site Settings</value>
  </data>
  <data name="CustomizeEnvironmentAction_SubPortalRegistrationType.Text" xml:space="preserve">
    <value>User Registration Mode</value>
  </data>
  <data name="NoRegistration.Text" xml:space="preserve">
    <value>No Registration</value>
  </data>
  <data name="PrivateRegistration.Text" xml:space="preserve">
    <value>Private</value>
  </data>
  <data name="PublicRegistration.Text" xml:space="preserve">
    <value>Public</value>
  </data>
  <data name="VerifiedRegistration.Text" xml:space="preserve">
    <value>Verified</value>
  </data>
  <data name="Trial.Expired" xml:space="preserve">
    <value>This is the Free version of &lt;strong&gt;Aricie - PortalKeeper&lt;/strong&gt;.&lt;br/&gt; Full version allows to create your own rules and to extend the set of condition and action providers available. If you like the free version, please visit &lt;a href="http://www.aricie.com" target=blank&gt;http://www.aricie.com&lt;/a&gt; to purchase the full version.</value>
  </data>
  <data name="Trial.Valid" xml:space="preserve">
    <value>&lt;p&gt;This is a Trial version of [Trial:ModuleName], fully functional for [Trial:NbDays] days &lt;br/&gt;You may keep using freely all the functionalities for another [Trial:NbDaysLeft] days. &lt;/p&gt;&lt;p&gt;You can purchase our modules on &lt;a href="http://www.aricie.com" target=blank&gt;http://www.aricie.com&lt;/a&gt;&lt;/p&gt;</value>
  </data>
  <data name="Trial.Install" xml:space="preserve">
    <value>&lt;p&gt;No Trial time stamp detected, Setting up a new one &lt;br/&gt;New trial Period Key set for limited version &lt;br/&gt;You may keep using freely all the functionalities of that module for [Trial:NbDaysLeft] days. &lt;br/&gt;After that period, you won't be able to save any change to the configuration.&lt;p&gt;If you find it useful, please purchase our module on &lt;a href="http://www.aricie.com" target=blank&gt;http://www.aricie.com&lt;/a&gt;&lt;/p&gt;</value>
  </data>
  <data name="Trial.Invalid" xml:space="preserve">
    <value>Invalid Trial Information detected, Setting New trial Key &lt;br/&gt;
This may make all existing modules obsoletes.</value>
  </data>
  <data name="Trial.InvalidModule" xml:space="preserve">
    <value>Module has been created before current trial version was installed &lt;br/&gt;
If you wish to continue using it, please purchase our module on &lt;a href="http://www.aricie.com" target=blank&gt;http://www.aricie.com&lt;/a&gt;</value>
  </data>
  <data name="FirewallSettings_IgnoredExtensions.Help" xml:space="preserve">
    <value>That parameter depends on the previous one. According to the range of requets intercepted, you can define an additional comma separated list of requests extensions to be ignored by the firewall engine.</value>
  </data>
  <data name="FirewallSettings_IgnoredExtensions.Text" xml:space="preserve">
    <value>Ignored extensions list</value>
  </data>
  <data name="MembershipCondition`1_MatchUserIds.Text" xml:space="preserve">
    <value>Match User Ids</value>
  </data>
  <data name="MembershipCondition`1_MatchUserIds.Help" xml:space="preserve">
    <value>Enter a semi-colon separated list of integers, corresponding to the user ids to be matched by the condition</value>
  </data>
  <data name="AutoLoginInfo_EditAutoLoginPassword.Help" xml:space="preserve">
    <value>Enter here the password for the user account to automatically log in the incoming clients.</value>
  </data>
  <data name="AutoLoginInfo_EditAutoLoginPassword.Text" xml:space="preserve">
    <value>Auto Login Password</value>
  </data>
  <data name="AutoLoginInfo_AutoLoginUserName.Help" xml:space="preserve">
    <value>You can optionally enter the credentials for a user account that the matching clients will get automatically logged in with. Enter here the username.</value>
  </data>
  <data name="AutoLoginInfo_AutoLoginUserName.Text" xml:space="preserve">
    <value>Auto Login Username</value>
  </data>
  <data name="FleeExpressionCondition`1_FleeExpression.Text" xml:space="preserve">
    <value>Condition Flee Expression (Full Trust required)</value>
  </data>
  <data name="Block.Text" xml:space="preserve">
    <value>On</value>
  </data>
  <data name="Filter.Text" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="PassThrough.Text" xml:space="preserve">
    <value>Off</value>
  </data>
  <data name="FleeExpressionCondition`1_FleeExpression.Help" xml:space="preserve">
    <value>&lt;p&gt;Enter here a boolean expression to be matched as a condition to trigger the sub strategy.&lt;/p&gt;
&lt;p&gt;The expression is evaluated using &lt;a href="http://flee.codeplex.com/"&gt; Fast Lightweight Expression Evaluator&lt;/a&gt;, an open source expression engine, which allows fast computation thanks to byte code emission.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All expressions are dynamically built on first call and then cached for very fast retrieval and evaluation.&lt;/li&gt;
&lt;li&gt;You should refer to the &lt;a href="https://flee.codeplex.com/wikipage?title=LanguageReference"&gt;language reference&lt;/a&gt; to build your expressions.&lt;/li&gt;
&lt;li&gt;The engine uses &lt;a href="http://flee.codeplex.com/Wiki/View.aspx?title=ImportingTypes"&gt;static type imports&lt;/a&gt; to enhance the set of available methods. the import includes all methods from the "System.Math" static class and all methods from the default types (object, int, char, string etc.)&lt;/li&gt;
&lt;li&gt;The engine uses the concept of a dedicated &lt;a href="http://flee.codeplex.com/Wiki/View.aspx?title=ExpressionOwner"&gt;Expression owner&lt;/a&gt; to supply the available variables. The expression owner is of type "Aricie.DNN.Modules.PortalKeeper.PortalKeeperContext, Aricie.PortalKeeper", which contains many properties giving access to the Http and DotNetNuke context.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If your expression does not evaluate properly, you should find exception reports in the DNN event log with hints for a correction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are a couple of sample valid expressions to get you started:&lt;/p&gt;
&lt;li&gt;Match if the current user is authenticated:&lt;br /&gt;
DnnContext.IsAuthenticated&lt;/li&gt;
&lt;li&gt;Match if the current user is a member of the dnn role "Customers":&lt;br /&gt;
DnnContext.User.IsInRole("Customers")&lt;/li&gt;
&lt;li&gt;Match if the current request is secure (Https):&lt;br /&gt;
DnnContext.HttpContext.Request.IsSecureConnection()&lt;/li&gt;
&lt;li&gt;Match if the current user email contains "aricie.fr":&lt;br /&gt;
DnnContext.User.Email.Contains("aricie.fr")&lt;/li&gt;
&lt;li&gt;Match if the current page name contains "secure"&lt;br /&gt;
DnnContext.Portal.ActiveTab.TabName.contains("secure")&lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="FirewallConfig_RecoveryParam.Help" xml:space="preserve">
    <value>&lt;p&gt;Portal Keeper applies restrictions on authorized accesses to your portal according to specific conditions; accordingly you might find yourself locked out without a mean to log as an admin user anymore (for instance if your ISP changes your static IP without prior notice... yes, we had that one once !).&lt;/p&gt;&lt;p&gt;Enter here a secret string, which when found in the url -for instance as a querystring parameter- will temporarily disable the firewall. Make sure to choose a complex string, to test it with your target settings enabled, and keep it in a safe location&lt;/p&gt;</value>
  </data>
  <data name="FirewallConfig_RecoveryParam.Text" xml:space="preserve">
    <value>Recovery String</value>
  </data>
  <data name="ApplicationSettings_CustomErrors.Header" xml:space="preserve">
    <value>Custom Errors</value>
  </data>
  <data name="PortalKeeperConfig_MainSettings.Header" xml:space="preserve">
    <value>MainSettings</value>
  </data>
  <data name="PortalKeeperConfig_Rules.Header" xml:space="preserve">
    <value>Rules</value>
  </data>
  <data name="FirewallConfig_IncludeRandomDelay.Text" xml:space="preserve">
    <value>Add Random Delay</value>
  </data>
  <data name="FirewallConfig_EnablePortalLevelSettings.Text" xml:space="preserve">
    <value>Enable Portal Settings</value>
  </data>
  <data name="VirtualCustomErrorsInfo_CustomErrors.Header" xml:space="preserve">
    <value>Custom Errors</value>
  </data>
  <data name="CustomErrorsInfo_CustomErrors.Text" xml:space="preserve">
    <value>You can specify a list of paths specific to http status</value>
  </data>
  <data name="CustomErrorsInfo_DefaultRedirect.Text" xml:space="preserve">
    <value>Default Redirect</value>
  </data>
  <data name="VirtualCustomErrorsInfo_MainSettings.Header" xml:space="preserve">
    <value>Main Attributes</value>
  </data>
  <data name="CustomErrorsInfo_Mode.Text" xml:space="preserve">
    <value>Mode</value>
  </data>
  <data name="ControlUrlInfo_RedirectMode.Text" xml:space="preserve">
    <value>Redirect Mode</value>
  </data>
  <data name="CustomErrors_AddNew.Text" xml:space="preserve">
    <value>Add Custom Error</value>
  </data>
  <data name="Off.Text" xml:space="preserve">
    <value>Off</value>
  </data>
  <data name="On.Text" xml:space="preserve">
    <value>On</value>
  </data>
  <data name="ApplicationSettings_CustomErrorsConfig.Text" xml:space="preserve">
    <value>Application Errors Configuration. Don't forget to apply your changes after saving.</value>
  </data>
  <data name="RemoteOnly.Text" xml:space="preserve">
    <value>Remote Only</value>
  </data>
  <data name="ResponseRedirect.Text" xml:space="preserve">
    <value>Response Redirect</value>
  </data>
  <data name="ResponseRewrite.Text" xml:space="preserve">
    <value>Response Rewrite</value>
  </data>
  <data name="cmdInstallCustomErrors.Text" xml:space="preserve">
    <value>Update custom errors in web.config</value>
  </data>
  <data name="CustomErrorInfo_Status.Text" xml:space="preserve">
    <value>Status Code</value>
  </data>
  <data name="CustomErrorsInfo_DefaultRedirectPath.Text" xml:space="preserve">
    <value>Redirect Path</value>
  </data>
  <data name="ControlUrlInfo_Track.Text" xml:space="preserve">
    <value>Track Url</value>
  </data>
  <data name="ControlUrlInfo_Url.Text" xml:space="preserve">
    <value>Url Selector</value>
  </data>
  <data name="ControlUrlInfo_UrlPath.Text" xml:space="preserve">
    <value>Url Path</value>
  </data>
  <data name="VirtualCustomErrorsInfo_CatchErrorsOnTheFly.Text" xml:space="preserve">
    <value>Catch Errors on the fly</value>
  </data>
  <data name="VirtualCustomErrorsInfo_DuplicateStatusMode.Text" xml:space="preserve">
    <value>Duplicate Status Mode</value>
  </data>
  <data name="VirtualCustomErrorsInfo_IncludeRandomDelay.Text" xml:space="preserve">
    <value>Include Random delay</value>
  </data>
  <data name="VirtualCustomErrorsInfo_CustomErrorsType.Text" xml:space="preserve">
    <value>Custom Errors Type</value>
  </data>
  <data name="VirtualCustomErrorsInfo_VirtualSettings.Header" xml:space="preserve">
    <value>Virtual Mode Settings</value>
  </data>
  <data name="VirtualCustomErrorsInfo_VirtualHandlerPath.Text" xml:space="preserve">
    <value>Virtual Handler Path</value>
  </data>
  <data name="CustomErrorInfo_Redirect.Text" xml:space="preserve">
    <value>Redirect</value>
  </data>
  <data name="AllRandomized.Text" xml:space="preserve">
    <value>All Redirects Randomized</value>
  </data>
  <data name="ControlUrlInfo_UrlType.Text" xml:space="preserve">
    <value>Url Type</value>
  </data>
  <data name="DefaultOnly.Text" xml:space="preserve">
    <value>Default Redirect Only</value>
  </data>
  <data name="RandomizedByStatus.Text" xml:space="preserve">
    <value>Randomized By Status</value>
  </data>
  <data name="VirtualCustomErrorsInfo_HandlerSettings.Header" xml:space="preserve">
    <value>Virtual IHttpHandler Settings</value>
  </data>
  <data name="VirtualCustomErrorsInfo_UseAshx.Text" xml:space="preserve">
    <value>Use .ashx File</value>
  </data>
  <data name="VirtualCustomErrorsInfo_VirtualHandlerName.Text" xml:space="preserve">
    <value>Virtual Handler Name</value>
  </data>
  <data name="Legacy.Text" xml:space="preserve">
    <value>Legacy (static in web.config)</value>
  </data>
  <data name="VirtualHandler.Text" xml:space="preserve">
    <value>Virtual Handler (dynamic)</value>
  </data>
  <data name="ActionProviderConfig_RequestEvent.Help" xml:space="preserve">
    <value>This is the life cycle moment when the action should be performed. When the action is defined in a sequence, the sequence will be respected regardless the default provider event.</value>
  </data>
  <data name="ActionProviderConfig_RequestEvent.Text" xml:space="preserve">
    <value>Request Life Cycle Event</value>
  </data>
  <data name="ActionProviders_AddNew.Text" xml:space="preserve">
    <value>Add New Action Provider</value>
  </data>
  <data name="Any.Text" xml:space="preserve">
    <value>Any</value>
  </data>
  <data name="ClientSourceCondition`1_Specifics.Header" xml:space="preserve">
    <value>Client Source Specifics</value>
  </data>
  <data name="ConditionProviderConfig_IsDoSEnabled.Help" xml:space="preserve">
    <value>Condition providers can optionally implement an additional interface, which allows for fast evaluation on Begin_Request to ban users if needed</value>
  </data>
  <data name="ConditionProviderConfig_IsDoSEnabled.Text" xml:space="preserve">
    <value>Is Ban Enabled</value>
  </data>
  <data name="ConditionProviderSettings`1_IsMandatory.Help" xml:space="preserve">
    <value>Check if you want the parent condition to be matched only if the current sub-condition is matched (makes it a AND condition rather than a OR otherwise)</value>
  </data>
  <data name="ConditionProviderSettings`1_IsMandatory.Text" xml:space="preserve">
    <value>Is Mandatory</value>
  </data>
  <data name="ConditionProviderSettings`1_Negate.Help" xml:space="preserve">
    <value>Check if you want to invert the condition matching behaviour </value>
  </data>
  <data name="ConditionProviderSettings`1_Negate.Text" xml:space="preserve">
    <value>Negate</value>
  </data>
  <data name="ConditionProviders_AddNew.Text" xml:space="preserve">
    <value>Add New Condition Provider</value>
  </data>
  <data name="Country.Text" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="RuleEngineSettings`1_Providers.Header" xml:space="preserve">
    <value>Providers</value>
  </data>
  <data name="RuleEngineSettings`1_ConditionProviders.Header" xml:space="preserve">
    <value>Condition Providers</value>
  </data>
  <data name="RuleEngineSettings`1_TechnicalSettings.Header" xml:space="preserve">
    <value>TechnicalSettings</value>
  </data>
  <data name="Default.Text" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="DNNPageOnly.Text" xml:space="preserve">
    <value>DNN Pages Only</value>
  </data>
  <data name="DosEnabledConditionProvider`1_DoSProtectionDuration.Text" xml:space="preserve">
    <value>Ban Duration</value>
  </data>
  <data name="DosEnabledConditionProvider`1_EnableDoSProtection.Text" xml:space="preserve">
    <value>Enable Ban</value>
  </data>
  <data name="Instances_AddNew.Text" xml:space="preserve">
    <value>Add New Item</value>
  </data>
  <data name="IPAddress.Text" xml:space="preserve">
    <value>IP Address</value>
  </data>
  <data name="KeeperRule`1_StopRule.Help" xml:space="preserve">
    <value>When checked, if the rule matches, no further rule evaluation is performed</value>
  </data>
  <data name="KeeperRule`1_StopRule.Text" xml:space="preserve">
    <value>Stop Rule</value>
  </data>
  <data name="MembershipCondition`1_Specifics.Header" xml:space="preserve">
    <value>Membership Specifics</value>
  </data>
  <data name="NamedEntity_Decription.Help" xml:space="preserve">
    <value>Enter an optional description for the entity. This is mainly for other people to understand your configuration</value>
  </data>
  <data name="NamedEntity_Decription.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="NamedConfig_Enabled.Help" xml:space="preserve">
    <value>If uncheck, the entity is disabled. If it is in use, it is ignored or an exception is raised</value>
  </data>
  <data name="NamedConfig_Enabled.Text" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="NamedEntity_Name.Help" xml:space="preserve">
    <value>Enter a friendly name to the new entity</value>
  </data>
  <data name="NamedEntity_Name.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="PagesOnly.Text" xml:space="preserve">
    <value>Pages Only</value>
  </data>
  <data name="PortalAliasCondition_Specifics.Header" xml:space="preserve">
    <value>Portal Alias Specifics</value>
  </data>
  <data name="RuleEngineSettings`1_ActionProviders.Help" xml:space="preserve">
    <value>Those are the types of actions available to define the firewall rules. Feel free to add your own. The action providers must implement the IActionProvider interface. They can also inherit the ActionProvider class to add specific setting properties to the base class.</value>
  </data>
  <data name="RuleEngineSettings`1_ActionProviders.Text" xml:space="preserve">
    <value>Action Providers</value>
  </data>
  <data name="RuleEngineSettings`1_ConditionProviders.Help" xml:space="preserve">
    <value>Those are the types of conditions available to define the firewall rules. Feel free to add your own.The condition provider must implement the IConditionProvider interface. They can also inherit the ConditionProvider class to add specific setting properties to the base class.</value>
  </data>
  <data name="RuleEngineSettings`1_ConditionProviders.Text" xml:space="preserve">
    <value>Condition Providers</value>
  </data>
  <data name="FirewallSettings_RequestScope.Help" xml:space="preserve">
    <value>This define the type of requests to be intercepted by the firewall. "Any" means that all requests firing the asp.net worker process are managed. "Pages Only" means only ASP.Net pages handlers are processed (requests for other resources are ignored). "DNN Pages Only" means only DotNetNuke pages are processed.</value>
  </data>
  <data name="FirewallSettings_RequestScope.Text" xml:space="preserve">
    <value>Request Scope</value>
  </data>
  <data name="PostMapRequestHandler.Text" xml:space="preserve">
    <value>Post Map Request Handler</value>
  </data>
  <data name="PostRequestHandlerExecute.Text" xml:space="preserve">
    <value>Post Request Handler Execute</value>
  </data>
  <data name="ProviderConfig_TypeName.Help" xml:space="preserve">
    <value>Enter here a qualified .Net type name for the provider class</value>
  </data>
  <data name="ProviderConfig_TypeName.Text" xml:space="preserve">
    <value>Provider Type Name</value>
  </data>
  <data name="ProviderHost`3_Instances.Help" xml:space="preserve">
    <value>The following is an editable list of entities. You can add new entities with the bottom command button, delete any entity with the red cross button on the left column, and reorder entities witht the arrows buttons when available.</value>
  </data>
  <data name="ProviderHost`3_Instances.Text" xml:space="preserve">
    <value>Elements</value>
  </data>
  <data name="ProviderHost`3_NewElementProviderName.Help" xml:space="preserve">
    <value>Select here the specific type of provider to be used before you click the above button</value>
  </data>
  <data name="ProviderHost`3_NewElementProviderName.Text" xml:space="preserve">
    <value>New Element Provider Name</value>
  </data>
  <data name="AutoProvider`3_ProviderName.Help" xml:space="preserve">
    <value>This is the name of the specific provider chosen on creation. The available parameters may depend on the provider and you can't edit the selected provider once created. If you wish to choose another provider, delete the setting and create a new one.</value>
  </data>
  <data name="AutoProvider`3_ProviderName.Text" xml:space="preserve">
    <value>Provider Name</value>
  </data>
  <data name="RequestsCapInfo_CappedRequestScope.Help" xml:space="preserve">
    <value>This is the type of request the limit applies to</value>
  </data>
  <data name="RequestsCapInfo_CappedRequestScope.Text" xml:space="preserve">
    <value>Capped Request Scope</value>
  </data>
  <data name="RequestsCapInfo_RequestSource.Help" xml:space="preserve">
    <value>This is the source the limit rate applies to</value>
  </data>
  <data name="RequestsCapInfo_RequestSource.Text" xml:space="preserve">
    <value>Capped Request Source</value>
  </data>
  <data name="RequestsCapInfo_Duration.Help" xml:space="preserve">
    <value>This is the duration to define the unit of time for the rate (rate = MaxNb/Duration)</value>
  </data>
  <data name="RequestsCapInfo_Duration.Text" xml:space="preserve">
    <value>Per Unit of Time</value>
  </data>
  <data name="RequestsCapInfo_MaxNbRequest.Help" xml:space="preserve">
    <value>This is the maximum number of requests to define the limit rate (rate = MaxNb/Duration)</value>
  </data>
  <data name="RequestsCapInfo_MaxNbRequest.Text" xml:space="preserve">
    <value>Max Nb Requests</value>
  </data>
  <data name="RequestsCapsCondition_RequestsCaps.Text" xml:space="preserve">
    <value>This is a list of request rate limits by sources to be matched </value>
  </data>
  <data name="RequestsCapsCondition_Specifics.Header" xml:space="preserve">
    <value>Request Caps Specifics</value>
  </data>
  <data name="RequestsCaps_AddNew.Text" xml:space="preserve">
    <value>Add New Request Cap</value>
  </data>
  <data name="Session.Text" xml:space="preserve">
    <value>Session</value>
  </data>
  <data name="STimeSpan_Days.Text" xml:space="preserve">
    <value>Days</value>
  </data>
  <data name="STimeSpan_Details.Header" xml:space="preserve">
    <value>Edit Details</value>
  </data>
  <data name="STimeSpan_FormattedDuration.Text" xml:space="preserve">
    <value>Total duration</value>
  </data>
  <data name="STimeSpan_Hours.Text" xml:space="preserve">
    <value>Hours</value>
  </data>
  <data name="STimeSpan_Microseconds.Text" xml:space="preserve">
    <value>Microseconds</value>
  </data>
  <data name="STimeSpan_Milliseconds.Text" xml:space="preserve">
    <value>Milliseconds</value>
  </data>
  <data name="STimeSpan_Minutes.Text" xml:space="preserve">
    <value>Minutes</value>
  </data>
  <data name="STimeSpan_Seconds.Text" xml:space="preserve">
    <value>Seconds</value>
  </data>
  <data name="STimeSpan_Ticks.Text" xml:space="preserve">
    <value>Ticks</value>
  </data>
  <data name="Url.Text" xml:space="preserve">
    <value>Url</value>
  </data>
  <data name="UrlPath.Text" xml:space="preserve">
    <value>Url Path</value>
  </data>
  <data name="DenialOfServiceSettings_DoSAction.Help" xml:space="preserve">
    <value>When defining your firewall rules, you can optionally activate specific conditions that will be able to ban users. This defines the series action to perform when a condition has signaled a user as banned.</value>
  </data>
  <data name="DenialOfServiceSettings_DoSAction.Text" xml:space="preserve">
    <value>Ban Action</value>
  </data>
  <data name="ModuleConfig`2_LocationSettings.Header" xml:space="preserve">
    <value>Configuration File</value>
  </data>
  <data name="LocationSettings_UserFile.Help" xml:space="preserve">
    <value>Check to switch to a host file persistence</value>
  </data>
  <data name="LocationSettings_UserFile.Text" xml:space="preserve">
    <value>Switch to User File</value>
  </data>
  <data name="LocationSettings_UserFileName.Help" xml:space="preserve">
    <value>Enter here the relative path to the target host sub folder</value>
  </data>
  <data name="LocationSettings_UserFileName.Text" xml:space="preserve">
    <value>User Path</value>
  </data>
  <data name="ModuleConfig`2_LocationSettings.Help" xml:space="preserve">
    <value>You can choose to keep the config saved to the module root folder or enter the name of a folder path relative to the host root folder (~/portals/_default)</value>
  </data>
  <data name="ModuleConfig`2_LocationSettings.Text" xml:space="preserve">
    <value>Define here where you want the config file to be persisted</value>
  </data>
  <data name="Abort.Text" xml:space="preserve">
    <value>Abort Connection</value>
  </data>
  <data name="ActionProviderSettings`1_RethrowException.Help" xml:space="preserve">
    <value>If checked, any exception caugth from an action being run is thrown again to be processed higher up in the call stack. Typically, this is useful when a Http Exception is thrown on purpose with a Http Status code, to be processed accordingly to the Custom Errors section (see lower)</value>
  </data>
  <data name="ActionProviderSettings`1_RethrowException.Text" xml:space="preserve">
    <value>Rethrow Exceptions</value>
  </data>
  <data name="ActionProviderSettings`1_StopOnFailure.Help" xml:space="preserve">
    <value>If the action fails with a caugth exception, no other action is performed within the rule.</value>
  </data>
  <data name="ActionProviderSettings`1_StopOnFailure.Text" xml:space="preserve">
    <value>Stop on Failure</value>
  </data>
  <data name="DosEnabledConditionProvider`1_DoSProtectionDuration.Help" xml:space="preserve">
    <value>This is the ban period for clients that match the banning conditions that have been triggered. The banned clients footprints are kept during this period.</value>
  </data>
  <data name="DosEnabledConditionProvider`1_EnableDoSProtection.Help" xml:space="preserve">
    <value>The condition provider selected supports Ban fast activation. If enabled, a footprint of all matching clients is saved, and at the very beginning of subsequent requests, the provider can match the footprint and perform a fast deallocation of the resources. This Ban specific action is defined in the TechnicalSettings. By default, the Response is flushed and closed.   </value>
  </data>
  <data name="LogEventAction`1_EnventMessage.Help" xml:space="preserve">
    <value>This is the message to be logged. You can use token replaces with context objects available.  The AdvancedTokenReplace engine used enhances DNN's. You can use to methods, indices, indexed properties, sub properties etc. Feel free to use Reflector to browse the context classes hierarchy and their properties.</value>
  </data>
  <data name="LogEventAction`1_EnventMessage.Text" xml:space="preserve">
    <value>Event message</value>
  </data>
  <data name="LogEventAction`1_LogTypeKey.Help" xml:space="preserve">
    <value>enter the log type key for the type of dnn event to be registered. check the legend in the DNN event log admin page. You should also make sure your log settings include an observer for the type you choose, otherwise your logs won't be saved.</value>
  </data>
  <data name="LogEventAction`1_LogTypeKey.Text" xml:space="preserve">
    <value>Log type key</value>
  </data>
  <data name="LogEventAction`1_Specifics.Header" xml:space="preserve">
    <value>Log Event</value>
  </data>
  <data name="LogEventAction`1_TechnicalSettings.Header" xml:space="preserve">
    <value>TechnicalSettings</value>
  </data>
  <data name="LogOffAction_TechnicalSettings.Header" xml:space="preserve">
    <value>TechnicalSettings</value>
  </data>
  <data name="MultipleConnectionsCondition_DiscriminationSource.Help" xml:space="preserve">
    <value>Enter here the identifying parameter, typically the IP Address, but it could be the country. </value>
  </data>
  <data name="MultipleConnectionsCondition_DiscriminationSource.Text" xml:space="preserve">
    <value>Discrimination Source</value>
  </data>
  <data name="MultipleConnectionsCondition_LockDuration.Help" xml:space="preserve">
    <value>Enter the period during witch a ban is applied. The resulting behaviour depends on the following settings.</value>
  </data>
  <data name="MultipleConnectionsCondition_LockDuration.Text" xml:space="preserve">
    <value>Lock Duration</value>
  </data>
  <data name="MultipleConnectionsCondition_NewConnectionsDontMatch.Help" xml:space="preserve">
    <value>In such a case (default), only a returning original user is matched. There is no match if a user does not return from a previous location.</value>
  </data>
  <data name="MultipleConnectionsCondition_NewConnectionsDontMatch.Text" xml:space="preserve">
    <value>Returning Only</value>
  </data>
  <data name="MultipleConnectionsCondition_PreserveLock.Help" xml:space="preserve">
    <value>If disabled (default), each lock is released after a match was made. The action is then only performed once.  </value>
  </data>
  <data name="MultipleConnectionsCondition_PreserveLock.Text" xml:space="preserve">
    <value>Keep Lock</value>
  </data>
  <data name="MultipleConnectionsCondition_Specifics.Header" xml:space="preserve">
    <value>Multiple Connections Conditions</value>
  </data>
  <data name="RedirectAction_EndResponse.Help" xml:space="preserve">
    <value>Choose whether to end the response immediately</value>
  </data>
  <data name="RedirectAction_EndResponse.Text" xml:space="preserve">
    <value>End Response</value>
  </data>
  <data name="RedirectAction_Specifics.Header" xml:space="preserve">
    <value>Redirect Target</value>
  </data>
  <data name="RedirectAction_Target.Help" xml:space="preserve">
    <value>The destination can be an inner page, a file or an external url</value>
  </data>
  <data name="RedirectAction_Target.Text" xml:space="preserve">
    <value>Choose a redirect destination</value>
  </data>
  <data name="RedirectAction_TechnicalSettings.Header" xml:space="preserve">
    <value>TechnicalSettings</value>
  </data>
  <data name="RequestDenialAction_ExceptionMessage.Help" xml:space="preserve">
    <value>This is the token replaced exception message when one is thrown</value>
  </data>
  <data name="RequestDenialAction_ExceptionMessage.Text" xml:space="preserve">
    <value>Exception Message</value>
  </data>
  <data name="RequestDenialAction_RequestDenialActionMode.Help" xml:space="preserve">
    <value>You can choose to write directly the status in the response header and to go ahead with a token replaced content, or to throw the corresponding HttpException to take advantage of the rich Custom Errors configuration available below. </value>
  </data>
  <data name="RequestDenialAction_RequestDenialActionMode.Text" xml:space="preserve">
    <value>Error Status Mode</value>
  </data>
  <data name="RequestDenialAction_RequestDenialActionType.Help" xml:space="preserve">
    <value>Choose the type of denial response. You can choose to send a http status either by editing the plain response or by throwing the corresponding Http Exception to be handled as defined in the Custom Errors section. Another option is to simply terminate the current request, which is the default Ban action. </value>
  </data>
  <data name="RequestDenialAction_RequestDenialActionType.Text" xml:space="preserve">
    <value>Denial Type</value>
  </data>
  <data name="RequestDenialAction_RewriteContent.Help" xml:space="preserve">
    <value>The is the token replaced reponse content when the http status is directly set.</value>
  </data>
  <data name="RequestDenialAction_RewriteContent.Text" xml:space="preserve">
    <value>Response Content</value>
  </data>
  <data name="RequestDenialAction_Specifics.Header" xml:space="preserve">
    <value>Denial Specifics</value>
  </data>
  <data name="RequestDenialAction_TechnicalSettings.Header" xml:space="preserve">
    <value>TechnicalSettings</value>
  </data>
  <data name="RequestsCapInfo_Rate.Help" xml:space="preserve">
    <value>This is an important indicator and the best values should fit between the maximum expected traffic for a source, and the maximum amount the server can support. The ideal set of restrictions should account for high bursts as well as for slower lengthy profiles.  </value>
  </data>
  <data name="RequestsCapInfo_Rate.Text" xml:space="preserve">
    <value>Rate (Req/s)</value>
  </data>
  <data name="RequestsCapsCondition_RequestsCaps.Help" xml:space="preserve">
    <value>The following is a list of rate limits defined as the combination of a source type (Client session, IP address, Country etc.), a duration, a maximum number of requests, and the type of request scoped by the restriction.</value>
  </data>
  <data name="Send401.Text" xml:space="preserve">
    <value>Http Status 401 - Unauthorized</value>
  </data>
  <data name="Send403.Text" xml:space="preserve">
    <value>Http Status 403 - Forbidden</value>
  </data>
  <data name="Send404.Text" xml:space="preserve">
    <value>Http Status 404 - Not Found</value>
  </data>
  <data name="SendStatus.Text" xml:space="preserve">
    <value>Send Status</value>
  </data>
  <data name="SubConditionsProvider`1_KeeperCondition.Help" xml:space="preserve">
    <value>Combine with the "mandatory" parameter to define ANDs and ORs. There is no intrinsic limit on the depth of your condition expression tree.</value>
  </data>
  <data name="SubConditionsProvider`1_KeeperCondition.Text" xml:space="preserve">
    <value>Enter a list of sub conditions to match (think parenthesis)</value>
  </data>
  <data name="SubConditionsProvider1_Specifics.Header" xml:space="preserve">
    <value>Sub Condition List</value>
  </data>
  <data name="ThrowHttpException.Text" xml:space="preserve">
    <value>Throw Http Exception</value>
  </data>
  <data name="RequestSource_CurrentValue.Help" xml:space="preserve">
    <value>This is the value of the current client for the request source selected above and the filter configured below.</value>
  </data>
  <data name="RequestSource_CurrentValue.Text" xml:space="preserve">
    <value>Current Value</value>
  </data>
  <data name="ClientSourceCondition`1_RequestSource.Help" xml:space="preserve">
    <value>Enter here the parameter to be evaluated</value>
  </data>
  <data name="ClientSourceCondition`1_RequestSource.Text" xml:space="preserve">
    <value>Source Type</value>
  </data>
  <data name="CloseResponse.Text" xml:space="preserve">
    <value>Close And Terminate</value>
  </data>
  <data name="EndResponse.Text" xml:space="preserve">
    <value>Terminate Response</value>
  </data>
  <data name="FlushAndClose.Text" xml:space="preserve">
    <value>Flush and Terminate</value>
  </data>
  <data name="RequestDenialAction_RequestAbortType.Help" xml:space="preserve">
    <value>If abort denial type is selected, define here the prefered method for aborting the response. </value>
  </data>
  <data name="RequestDenialAction_RequestAbortType.Text" xml:space="preserve">
    <value>Request Abort Type</value>
  </data>
  <data name="KeeperRule`1_RuleSettings.Header" xml:space="preserve">
    <value>Rule Settings</value>
  </data>
  <data name="DosEnabledConditionProvider`1_BroadcastTaskQueueInfo.Help" xml:space="preserve">
    <value>When the list of banned clients is updated, it is saved in cache. In order to optimize performances especially in web farming scenarios, updates are queued and the cache is only updated once the queue was emtpied. You can tune here the characteristics of that waiting queue.</value>
  </data>
  <data name="DosEnabledConditionProvider`1_BroadcastTaskQueueInfo.Text" xml:space="preserve">
    <value>Broadcast Task Queue</value>
  </data>
  <data name="LogEventAction`1_MessageSettings.Header" xml:space="preserve">
    <value>Message Settings</value>
  </data>
  <data name="TokenizedTextInfo_Template.Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="TaskQueueInfo_AdvancedSettings.Header" xml:space="preserve">
    <value>AdvancedSettings</value>
  </data>
  <data name="TaskQueueInfo_InitialWaitTime.Help" xml:space="preserve">
    <value>Time duration before the queue starts being processed</value>
  </data>
  <data name="TaskQueueInfo_InitialWaitTime.Text" xml:space="preserve">
    <value>Initial Wait Time</value>
  </data>
  <data name="TaskQueueInfo_IsBackground.Help" xml:space="preserve">
    <value>Defines if background threads are used</value>
  </data>
  <data name="TaskQueueInfo_IsBackground.Text" xml:space="preserve">
    <value>Background Threads</value>
  </data>
  <data name="TaskQueueInfo_NbThreads.Help" xml:space="preserve">
    <value>number of threads pooled to process the task queue. The task queue engine leverages the powerful&lt;a href="https://github.com/amibar/SmartThreadPool" &gt;SmartThreadPool&lt;/a&gt; library with self adapting pools for optimal resource consumption. Windows performance counters are also available thanks to that library, and provide a precise monitoring of asynchrounous operations (each taskqueue can be monitored as an independant collector, see technical settings) </value>
  </data>
  <data name="TaskQueueInfo_NbThreads.Text" xml:space="preserve">
    <value>Max Nb Threads</value>
  </data>
  <data name="TaskQueueInfo_TaksWaitTime.Help" xml:space="preserve">
    <value>Time duration before each queue item is processed</value>
  </data>
  <data name="TaskQueueInfo_TaksWaitTime.Text" xml:space="preserve">
    <value>Wait Time</value>
  </data>
  <data name="TaskQueueInfo_WakeUpWaitTime.Help" xml:space="preserve">
    <value>Time duration before the queue is restarted after being emptied</value>
  </data>
  <data name="TaskQueueInfo_WakeUpWaitTime.Text" xml:space="preserve">
    <value>Wake up Time</value>
  </data>
  <data name="ActionProviderConfig`1_IsAsyncEnabled.Help" xml:space="preserve">
    <value>Checks if the action provider supports asynchronous execution mode</value>
  </data>
  <data name="ActionProviderConfig`1_IsAsyncEnabled.Text" xml:space="preserve">
    <value>Is Async Enabled</value>
  </data>
  <data name="ActionProviderConfig1_RequestEvents.Header" xml:space="preserve">
    <value>Events Config</value>
  </data>
  <data name="ActionProviderSettings`1_LifeCycleEvent.Help" xml:space="preserve">
    <value>Define here when the action should be performed</value>
  </data>
  <data name="ActionProviderSettings`1_LifeCycleEvent.Text" xml:space="preserve">
    <value>Request Life Cycle Event</value>
  </data>
  <data name="ConditionalTokens_AddNew.Text" xml:space="preserve">
    <value>Add New Conditional Token Source</value>
  </data>
  <data name="ConditionProviderConfig`1_IsDoSEnabled.Help" xml:space="preserve">
    <value>Checks if the condition provider supports Ban mode</value>
  </data>
  <data name="ConditionProviderConfig`1_IsDoSEnabled.Text" xml:space="preserve">
    <value>Is Ban enabled</value>
  </data>
  <data name="ConditionProviderConfig1_RequestEvents.Header" xml:space="preserve">
    <value>Events Config</value>
  </data>
  <data name="KeeperProviderConfig`2_DefaultTEngineEvents.Help" xml:space="preserve">
    <value>This is the default event step for the provider to be evaluated</value>
  </data>
  <data name="KeeperProviderConfig`2_DefaultTEngineEvents.Text" xml:space="preserve">
    <value>Default Event</value>
  </data>
  <data name="KeeperProviderConfig`2_MaxTEngineEvents.Help" xml:space="preserve">
    <value>The provider should never be evaluated after that event is reached</value>
  </data>
  <data name="KeeperProviderConfig`2_MaxTEngineEvents.Text" xml:space="preserve">
    <value>Max Event</value>
  </data>
  <data name="KeeperProviderConfig`2_MinTEngineEvents.Help" xml:space="preserve">
    <value>The provider should never be evaluated before that event is reached</value>
  </data>
  <data name="KeeperProviderConfig`2_MinTEngineEvents.Text" xml:space="preserve">
    <value>Min Event</value>
  </data>
  <data name="KeeperRule`1_MatchingLifeCycleEvent.Help" xml:space="preserve">
    <value>Choose here when you want the condition to be evaluated</value>
  </data>
  <data name="KeeperRule`1_MatchingLifeCycleEvent.Text" xml:space="preserve">
    <value>Life Cycle Event Step</value>
  </data>
  <data name="TokenizedTextInfo_AdditionalTokenSource.Help" xml:space="preserve">
    <value>You can define here a set of custom token sources to be added to the token replace. You can add all caps static tokens, load object based tokens, and define conditional tokens (depending on other tokens value)</value>
  </data>
  <data name="TokenizedTextInfo_AdditionalTokenSource.Text" xml:space="preserve">
    <value>Additional Token Sources</value>
  </data>
  <data name="TokenizedTextInfo_EnableTokenReplace.Help" xml:space="preserve">
    <value>You can optionally activate token replace on your Textual content. Native contextual tokens are available, in addition to the default token sources, and you can define additional token sources specific to that action below.</value>
  </data>
  <data name="TokenizedTextInfo_EnableTokenReplace.Text" xml:space="preserve">
    <value>Enable Token Replace</value>
  </data>
  <data name="RuleEngineSettings`1_DefaultTokenSource.Help" xml:space="preserve">
    <value>Define here the default custom tokens to be used when token replace is enabled in message based actions</value>
  </data>
  <data name="RuleEngineSettings`1_DefaultTokenSource.Text" xml:space="preserve">
    <value>Default Token Source</value>
  </data>
  <data name="DosEnabledConditionProvider`1_DenialOfService.Header" xml:space="preserve">
    <value>Ban Settings</value>
  </data>
  <data name="StaticTokens_AddNew.Text" xml:space="preserve">
    <value>Add New Static Token</value>
  </data>
  <data name="SubConditionsProvider`1_DenialOfService.Header" xml:space="preserve">
    <value>Ban Settings</value>
  </data>
  <data name="TokenProviders_AddNew.Text" xml:space="preserve">
    <value>Add New Token Provider (enter prefix)</value>
  </data>
  <data name="TokenSourceInfo_ConditionalTokens.Help" xml:space="preserve">
    <value>Define here Token Sources conditional to existing token values</value>
  </data>
  <data name="TokenSourceInfo_ConditionalTokens.Text" xml:space="preserve">
    <value>Conditional Tokens</value>
  </data>
  <data name="TokenSourceInfo_StaticTokens.Help" xml:space="preserve">
    <value>Define here static object less tokens. As required by the DNN native engine, such tokens should only comprise upper case letters and digits and underscores.</value>
  </data>
  <data name="TokenSourceInfo_StaticTokens.Text" xml:space="preserve">
    <value>Static tokens</value>
  </data>
  <data name="TokenSourceInfo_TokenProviders.Help" xml:space="preserve">
    <value>You can define here custom object token providers by entering a token prefix, and a .Net type to be instanciated and associated to the prefix</value>
  </data>
  <data name="TokenSourceInfo_TokenProviders.Text" xml:space="preserve">
    <value>Token Providers</value>
  </data>
  <data name="AsyncEnabledActionProvider`1_TaskQueueInfo.Help" xml:space="preserve">
    <value>You can configure here the way the asynchronous queue and more particularly its pace </value>
  </data>
  <data name="AsyncEnabledActionProvider`1_TaskQueueInfo.Text" xml:space="preserve">
    <value>Task Queue Settings</value>
  </data>
  <data name="AsyncEnabledActionProvider`1_UseTaskQueue.Help" xml:space="preserve">
    <value>As this provider supports that feature, you can optionally set the action to be performed asynchronously in a task queue to be configured.</value>
  </data>
  <data name="AsyncEnabledActionProvider`1_UseTaskQueue.Text" xml:space="preserve">
    <value>Use Asynchronous Queue</value>
  </data>
  <data name="ClientSourceCondition`1_DenialOfService.Header" xml:space="preserve">
    <value>Ban Settings</value>
  </data>
  <data name="ConditionalSources_AddNew.Text" xml:space="preserve">
    <value>Add New Conditional Value</value>
  </data>
  <data name="ConditionalTokenInfo_ConditionalToken.Help" xml:space="preserve">
    <value>Define here the trigger values and the corresponding conditional token sources</value>
  </data>
  <data name="ConditionalTokenInfo_ConditionalToken.Text" xml:space="preserve">
    <value>Conditional Values</value>
  </data>
  <data name="ConditionalTokenInfo_Key.Help" xml:space="preserve">
    <value>Enter here the token, the value on which defines your condition. You can omit the external brackets.</value>
  </data>
  <data name="ConditionalTokenInfo_Key.Text" xml:space="preserve">
    <value>Conditional Token </value>
  </data>
  <data name="ConditionalTokenSourceInfo_ConditionalSources.Help" xml:space="preserve">
    <value>If the conditional token has any of those values, the corresponding token sources are injected.</value>
  </data>
  <data name="ConditionalTokenSourceInfo_ConditionalSources.Text" xml:space="preserve">
    <value>Enter a list of values to be matched</value>
  </data>
  <data name="FleeExpressionCondition`1_Specifics.Header" xml:space="preserve">
    <value>Dynamic Expression Specifics</value>
  </data>
  <data name="ActionProviderSettings`1_DontLogExceptions.Help" xml:space="preserve">
    <value>By Default, any exception caught while the action is being run is logged in DNN's native event log.</value>
  </data>
  <data name="ActionProviderSettings`1_DontLogExceptions.Text" xml:space="preserve">
    <value>Don't log Exceptions</value>
  </data>
  <data name="BeginRequest.Text" xml:space="preserve">
    <value>Begin Request</value>
  </data>
  <data name="PageLoad.Text" xml:space="preserve">
    <value>Page Load</value>
  </data>
  <data name="PreRequestHandlerExecute.Text" xml:space="preserve">
    <value>Pre Request Handler Execute</value>
  </data>
  <data name="CharsReplace.Text" xml:space="preserve">
    <value>Chars Replace</value>
  </data>
  <data name="RegexReplace.Text" xml:space="preserve">
    <value>RegexReplace</value>
  </data>
  <data name="RequestSource_FilterSettings.Header" xml:space="preserve">
    <value>Filter Settings</value>
  </data>
  <data name="RequestSource_SourceType.Help" xml:space="preserve">
    <value>Choose here the client source identifying parameter.</value>
  </data>
  <data name="RequestSource_SourceType.Text" xml:space="preserve">
    <value>Request Source Type</value>
  </data>
  <data name="StringReplace.Text" xml:space="preserve">
    <value>String Replace</value>
  </data>
  <data name="StringTransformInfo_FilterType.Help" xml:space="preserve">
    <value>&lt;p&gt;Choose here the type of transformation you wish to define. There are three types available:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;strong&gt;Regex&lt;/strong&gt; transforms let you enter a source regular expression to match and replacement expression.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;String&lt;/strong&gt; transforms let you enter a source string and a replacement string or nothing to remove the string &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Chars&lt;/strong&gt; transforms let you enter a source list of chars as a concatenated string and either &lt;ul&gt;&lt;li&gt;a concatenated string of the same size for a char by char replacement mapping&lt;/li&gt;&lt;li&gt;an empty string to remove all of the source chars&lt;/li&gt;&lt;li&gt;a single char to replace each of the source chars with the single target char&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
  <data name="StringTransformInfo_FilterType.Text" xml:space="preserve">
    <value>Filter Type</value>
  </data>
  <data name="StringTransformInfo_Replace.Help" xml:space="preserve">
    <value>Enter the target regex pattern/string/chars according to the type of filter selected. For char replaces, leave empty to remove source chars, enter a single char to replace all source chars by the single target char, or enter the same number of chars as in source value, for individual char replacements.</value>
  </data>
  <data name="StringTransformInfo_Replace.Text" xml:space="preserve">
    <value>Replace Value</value>
  </data>
  <data name="StringTransformInfo_Source.Help" xml:space="preserve">
    <value>Enter the source regex/string/chars according to the type of filter selected, or enter an expression that evaluates to it.</value>
  </data>
  <data name="StringTransformInfo_Source.Text" xml:space="preserve">
    <value>Source Value</value>
  </data>
  <data name="TransformList_AddNew.Text" xml:space="preserve">
    <value>Add New Transform</value>
  </data>
  <data name="DisplayMessageAction`1_MessageSettings.Header" xml:space="preserve">
    <value>Message Settings</value>
  </data>
  <data name="DisplayMessageAction`1_ModuleId.Help" xml:space="preserve">
    <value>You can optionnally enter a target module, such that the message is displayed specifically in that module</value>
  </data>
  <data name="DisplayMessageAction`1_ModuleId.Text" xml:space="preserve">
    <value>Module Id</value>
  </data>
  <data name="DisplayMessageAction`1_ModuleMessageType.Help" xml:space="preserve">
    <value>This accounts for the coloured icon associated with the message</value>
  </data>
  <data name="DisplayMessageAction`1_ModuleMessageType.Text" xml:space="preserve">
    <value>Message Type</value>
  </data>
  <data name="DisplayMessageAction`1_Specifics.Header" xml:space="preserve">
    <value>Display Message Specifics</value>
  </data>
  <data name="DisplayMessageAction`1_TechnicalSettings.Header" xml:space="preserve">
    <value>TechnicalSettings</value>
  </data>
  <data name="GreenSuccess.Text" xml:space="preserve">
    <value>Green Success</value>
  </data>
  <data name="RedError.Text" xml:space="preserve">
    <value>Red Error</value>
  </data>
  <data name="YellowWarning.Text" xml:space="preserve">
    <value>Yellow Warning</value>
  </data>
  <data name="ClientSourceCondition`1_RegexList.Help" xml:space="preserve">
    <value>You can optionally enter a list of regular expressions to be matched in addition to enumerated static values. </value>
  </data>
  <data name="ClientSourceCondition`1_RegexList.Text" xml:space="preserve">
    <value>Regular Expressions</value>
  </data>
  <data name="RegexList_AddNew.Text" xml:space="preserve">
    <value>Add New Regex</value>
  </data>
  <data name="PortalKeeperSettings_LocationSettings.Header" xml:space="preserve">
    <value>Location Settings</value>
  </data>
  <data name="PortalKeeperSettings_TechnicalSettings.Header" xml:space="preserve">
    <value>TechnicalSettings</value>
  </data>
  <data name="SendEmailAction`1_BodyFormat.Text" xml:space="preserve">
    <value>Body Format</value>
  </data>
  <data name="SendEmailAction`1_EmailObject.Text" xml:space="preserve">
    <value>Email Subject</value>
  </data>
  <data name="SendEmailAction`1_EmailPriority.Text" xml:space="preserve">
    <value>Email Priority</value>
  </data>
  <data name="SendEmailAction`1_FromAddress.Text" xml:space="preserve">
    <value>From Address</value>
  </data>
  <data name="SendEmailAction`1_MessageSettings.Header" xml:space="preserve">
    <value>Message Settings</value>
  </data>
  <data name="SendEmailAction`1_Specifics.Header" xml:space="preserve">
    <value>Send Email Specifics</value>
  </data>
  <data name="SendEmailAction`1_TechnicalSettings.Header" xml:space="preserve">
    <value>TechnicalSettings</value>
  </data>
  <data name="SendEmailAction`1_ToAddresses.Text" xml:space="preserve">
    <value>To Addresses</value>
  </data>
  <data name="High.Text" xml:space="preserve">
    <value>High</value>
  </data>
  <data name="Html.Text" xml:space="preserve">
    <value>Html</value>
  </data>
  <data name="Low.Text" xml:space="preserve">
    <value>Low</value>
  </data>
  <data name="Normal.Text" xml:space="preserve">
    <value>Normal</value>
  </data>
  <data name="SendEmailAction`1_BodyFormat.Help" xml:space="preserve">
    <value>You can use html format if you want to include markup in your message</value>
  </data>
  <data name="SendEmailAction`1_EmailObject.Help" xml:space="preserve">
    <value>This will define the sent email subject. You can use tokens if enabled</value>
  </data>
  <data name="SendEmailAction`1_EmailPriority.Help" xml:space="preserve">
    <value>Define here the email's priority. You should use a high priority, if the email is a critical alert</value>
  </data>
  <data name="SendEmailAction`1_FromAddress.Help" xml:space="preserve">
    <value>Choose here the address, from which the email will be sent.</value>
  </data>
  <data name="SendEmailAction`1_ToAddresses.Help" xml:space="preserve">
    <value>Enter here comma separated values for the target recipient email addresses. You can use token replace if enabled.  </value>
  </data>
  <data name="Text.Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="AutoLoginAction_Specifics.Header" xml:space="preserve">
    <value>Auto Login Specifics</value>
  </data>
  <data name="AutoLoginAction_TechnicalSettings.Header" xml:space="preserve">
    <value>TechnicalSettings</value>
  </data>
  <data name="CustomizeEnvironmentAction_Specifics.Header" xml:space="preserve">
    <value>Custom Environment Specifics</value>
  </data>
  <data name="CustomizeEnvironmentAction_TechnicalSettings.Header" xml:space="preserve">
    <value>TechnicalSettings</value>
  </data>
  <data name="CustomErrorsInfo_CustomErrors.Help" xml:space="preserve">
    <value>Each status code may be associated to several paths. DNN Pages can be used as redirect targets as well as server handler transfers. Other targets should account for the corresponding method choosen.</value>
  </data>
  <data name="CustomErrorsInfo_DefaultRedirect.Help" xml:space="preserve">
    <value>This is the default target when no  target specific to the http status code is configured.</value>
  </data>
  <data name="CustomErrorsInfo_Mode.Help" xml:space="preserve">
    <value>Custom Errors mode as defined in the web.config file. This define if custom errors are used rather than generic asp.net errors, and whether they are reserved to remote clients or to local clients as well.</value>
  </data>
  <data name="ControlUrlInfo_RedirectMode.Help" xml:space="preserve">
    <value>If the target is a dnn page or a asp.net handler, you can choose to run a new handler on the fly instead of performing a 302 redirect. This also sets corresponding Custom Errors attribute in legacy mode.</value>
  </data>
  <data name="ApplicationSettings_CustomErrorsConfig.Help" xml:space="preserve">
    <value>That section configures Error handling as usually defined in the web.config file. You can define here the corresponding section, but you can also activate a new virtual mode, which let's you control error handling dynamically in an extended configuration.</value>
  </data>
  <data name="VirtualCustomErrorsInfo_CustomErrorsType.Help" xml:space="preserve">
    <value>Choose here whether to use the legacy web.config based static configuration, or to enable the virtual dynamic mode. In such a mode, a generic handler is defined and applies dynamically the virtual configuration defined here</value>
  </data>
  <data name="VirtualCustomErrorsInfo_DuplicateStatusMode.Help" xml:space="preserve">
    <value>Define here how multiple virtual targets per status are handled. You can choose to only use the default redirect, to redirect randomly accross all targets defined, or to redirect randomly accross status specific targets</value>
  </data>
  <data name="VirtualCustomErrorsInfo_IncludeRandomDelay.Help" xml:space="preserve">
    <value>Optionally add a random delay during the handler processing to defeat Oracle padding attacks.</value>
  </data>
  <data name="VirtualCustomErrorsInfo_PreserveStatusCode.Help" xml:space="preserve">
    <value>Choose here to keep the status code if any in the error page (default).</value>
  </data>
  <data name="VirtualCustomErrorsInfo_PreserveStatusCode.Text" xml:space="preserve">
    <value>Preserve Status Code</value>
  </data>
  <data name="VirtualCustomErrorsInfo_UseAshx.Help" xml:space="preserve">
    <value>You can choose the virtual handler to be defined by custom web.config dynamic handler, or as an explicit ashx file handler</value>
  </data>
  <data name="VirtualCustomErrorsInfo_VirtualHandlerName.Help" xml:space="preserve">
    <value>In case of a dynamic web.config declared httphandler, this is the name of the corresponding handler.</value>
  </data>
  <data name="VirtualCustomErrorsInfo_VirtualHandlerPath.Help" xml:space="preserve">
    <value>In case of a dynamic web.config handler, this is the virtual path declared together with the handler.</value>
  </data>
  <data name="RequestSource_ExpressionFilter.Help" xml:space="preserve">
    <value>The filter can include preprocessing directives and a set of custom tranformations</value>
  </data>
  <data name="RequestSource_ExpressionFilter.Text" xml:space="preserve">
    <value>Define here a filter to process Strings</value>
  </data>
  <data name="ActionProviders_Delete.Text" xml:space="preserve">
    <value>Delete Action Provider</value>
  </data>
  <data name="ActionProviders_Down.Text" xml:space="preserve">
    <value>Move Action Provider Down</value>
  </data>
  <data name="ActionProviders_Up.Text" xml:space="preserve">
    <value>Move Action Provider Up</value>
  </data>
  <data name="ConditionProviders_Delete.Text" xml:space="preserve">
    <value>Delete Condition Provider</value>
  </data>
  <data name="ConditionProviders_Down.Text" xml:space="preserve">
    <value>Move condition provider down</value>
  </data>
  <data name="ConditionProviders_Up.Text" xml:space="preserve">
    <value>Move condition provider up</value>
  </data>
  <data name="ControlUrlInfo_Track.Help" xml:space="preserve">
    <value>Choose here if you want the original url to be redirected first through a local tracker. </value>
  </data>
  <data name="ControlUrlInfo_Url.Help" xml:space="preserve">
    <value>Choose here the type of url to use.</value>
  </data>
  <data name="ControlUrlInfo_UrlPath.Help" xml:space="preserve">
    <value>This is the resulting path from the above selection. A postback might be needed to refresh the value</value>
  </data>
  <data name="ControlUrlInfo_UrlType.Help" xml:space="preserve">
    <value>This is the Type of Url selected. A Postback might be needed to refresh the value.</value>
  </data>
  <data name="Instances_Delete.Text" xml:space="preserve">
    <value>Delete Object</value>
  </data>
  <data name="NamedConfig_Name.Required" xml:space="preserve">
    <value>A name is required</value>
  </data>
  <data name="FirewallConfig_EnablePortalLevelSettings.Help" xml:space="preserve">
    <value>You can optionally enable portal specific settings. If enabled portal administrators will get access to a restricted set of parameters, which will be merged at runtime with the host configuration.  Beware that the admin config is not available before the end of the begin request event.</value>
  </data>
  <data name="FirewallConfig_EnableStopWatch.Help" xml:space="preserve">
    <value>You can optionally enable a stop watch to record request event timings in dnn event log. The "DebugInfo" Log type must be activated. The measurements give indications of the firewall overhead.</value>
  </data>
  <data name="FirewallConfig_EnableStopWatch.Text" xml:space="preserve">
    <value>Enable Debug Timer</value>
  </data>
  <data name="ProviderConfig_TypeName.Required" xml:space="preserve">
    <value>A Provider type name is needed. Generic types can be entered following the existing examples' syntax</value>
  </data>
  <data name="Rules_Delete.Text" xml:space="preserve">
    <value>Delete Rule</value>
  </data>
  <data name="Rules_Down.Text" xml:space="preserve">
    <value>Move rule down</value>
  </data>
  <data name="RequestsCapInfo_MaxNbNewSources.Help" xml:space="preserve">
    <value>In order to account for widely distributed attacks, you can optionally define a max number of new sources accepted per duration. If that cap is reached during any "time window" of the configured duration. Such a window is banned as a whole instead of only the corresponding source. As a consequence, any client, which connected for the first time during the same window will match regardless its individual request rate. Accordingly, this may result in banning a handful of legitimate users, yet provides a very robust additional protection against widespread attacks, where no single client rate matched yet a very large number of clients suddenly request the server over a short period of time. </value>
  </data>
  <data name="RequestsCapInfo_MaxNbNewSources.Text" xml:space="preserve">
    <value>Max Nb New Sources</value>
  </data>
  <data name="StaticConditionProvider`1_Specifics.Header" xml:space="preserve">
    <value>Static Condition specifics</value>
  </data>
  <data name="StaticConditionProvider`1_Value.Help" xml:space="preserve">
    <value>Define here the static value (True/False) of that condition</value>
  </data>
  <data name="StaticConditionProvider`1_Value.Text" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="Constant.Text" xml:space="preserve">
    <value>Constant</value>
  </data>
  <data name="Current.Text" xml:space="preserve">
    <value>Current</value>
  </data>
  <data name="CurrentUI.Text" xml:space="preserve">
    <value>Current UI</value>
  </data>
  <data name="Custom.Text" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="DotNetType_TypeName.Help" xml:space="preserve">
    <value>Here is a simplified assembly name for the .Net type. When possible, the version part is ommited.</value>
  </data>
  <data name="DotNetType_TypeName.Text" xml:space="preserve">
    <value>.Net Type</value>
  </data>
  <data name="Dynamic.Text" xml:space="preserve">
    <value>Dynamic</value>
  </data>
  <data name="ExpressionTypes_AddNew.Text" xml:space="preserve">
    <value>Add New Variable Type</value>
  </data>
  <data name="ExpressionVariableInfo`1_Definition.Header" xml:space="preserve">
    <value>Variable Definition</value>
  </data>
  <data name="FleeExpressionInfo`1_StaticImports.Header" xml:space="preserve">
    <value>Static Imports</value>
  </data>
  <data name="FleeExpressionInfo`1_TechnicalSettings.Header" xml:space="preserve">
    <value>TechnicalSettings</value>
  </data>
  <data name="FleeExpressionInfo`1_Variables.Header" xml:space="preserve">
    <value>Variables</value>
  </data>
  <data name="FleeExpressionInfo`1_CustomCultureLocale.Help" xml:space="preserve">
    <value>When Custom is selected above</value>
  </data>
  <data name="FleeExpressionInfo`1_CustomCultureLocale.Text" xml:space="preserve">
    <value>Custom Culture Locale</value>
  </data>
  <data name="FleeExpressionInfo`1_DateTimeFormat.Help" xml:space="preserve">
    <value>If your expression contains date parsing operations, this is the format you should use for your dates as Strings.</value>
  </data>
  <data name="FleeExpressionInfo`1_DateTimeFormat.Text" xml:space="preserve">
    <value>DateTime Format</value>
  </data>
  <data name="FleeExpressionInfo`1_DecimalSeparator.Help" xml:space="preserve">
    <value>As it says, concerning expression literals</value>
  </data>
  <data name="FleeExpressionInfo`1_DecimalSeparator.Text" xml:space="preserve">
    <value>Decimal Separator</value>
  </data>
  <data name="SimpleExpression`1_Expression.Help" xml:space="preserve">
    <value>Enter here the Flee expression to be evaluated. See  the &lt;a href="https://flee.codeplex.com/wikipage?title=LanguageReference"&gt;language reference&lt;/a&gt; to get started. You can control the set of functions and variables available in the following sections.</value>
  </data>
  <data name="SimpleExpression`1_Expression.Text" xml:space="preserve">
    <value>Expression Text</value>
  </data>
  <data name="FleeExpressionInfo`1_FunctionArgumentSeparator.Help" xml:space="preserve">
    <value>When calling a function with several parameters. Might be useful when using a custom parse culture</value>
  </data>
  <data name="FleeExpressionInfo`1_FunctionArgumentSeparator.Text" xml:space="preserve">
    <value>Function Argument Separator</value>
  </data>
  <data name="FleeExpressionInfo`1_ImportBuiltinTypes.Help" xml:space="preserve">
    <value>When checked, does the following imports :("boolean", typeof(bool));("byte", typeof(byte));("sbyte", typeof(sbyte));("short", typeof(short));("ushort", typeof(ushort));("int", typeof(int));("uint", typeof(uint));("long", typeof(long));("ulong", typeof(ulong));("single", typeof(float));("double", typeof(double));("decimal", typeof(decimal));("char", typeof(char));("object", typeof(object));("string", typeof(string));</value>
  </data>
  <data name="FleeExpressionInfo`1_ImportBuiltinTypes.Text" xml:space="preserve">
    <value>Import Buit'in Types</value>
  </data>
  <data name="FleeExpressionInfo`1_ParseCultureMode.Help" xml:space="preserve">
    <value>Defines the general culture to parse expression literals.</value>
  </data>
  <data name="FleeExpressionInfo`1_ParseCultureMode.Text" xml:space="preserve">
    <value>Parse Culture Mode</value>
  </data>
  <data name="FleeExpressionInfo`1_RequireDigitsBeforeDecimalPoint.Help" xml:space="preserve">
    <value>As it says, concerning expression literals</value>
  </data>
  <data name="FleeExpressionInfo`1_RequireDigitsBeforeDecimalPoint.Text" xml:space="preserve">
    <value>Require Digits Before Decimal Point</value>
  </data>
  <data name="SimpleExpression`1_ReturnType.Help" xml:space="preserve">
    <value>This is the expected type for the overall expression. Local inner variables might be of a different type, though.</value>
  </data>
  <data name="SimpleExpression`1_ReturnType.Text" xml:space="preserve">
    <value>Return Type</value>
  </data>
  <data name="FleeExpressionInfo`1_StaticImports.Help" xml:space="preserve">
    <value>See &lt;a href="http://flee.codeplex.com/wikipage?title=ImportingTypes&amp;referringTitle=Examples"&gt;the official documentation&lt;/a&gt;</value>
  </data>
  <data name="FleeExpressionInfo`1_StaticImports.Text" xml:space="preserve">
    <value>Leverage all static .Net functions by declaring their parent type</value>
  </data>
  <data name="FleeExpressionInfo`1_Variables.Help" xml:space="preserve">
    <value>In order for the expression to compile, variables must be explicitally typed. The set of available types can be updated in the next section.&lt;br/&gt;There are 2 types of variables: &lt;ul&gt;&lt;li&gt;CtorVariable, only available when the target type has a default parameterless constructor, which resolve through calling the corresponding constructor.&lt;/li&gt;&lt;li&gt;ExpressionVariable, which is made from a complete sub Flee Expression&lt;/li&gt;/ul&gt;</value>
  </data>
  <data name="FleeExpressionInfo`1_Variables.Text" xml:space="preserve">
    <value>Declare here a series of typed variables</value>
  </data>
  <data name="FleeImportInfo_CustomNamespace.Help" xml:space="preserve">
    <value>When importing the static functions of a class, you can optionally attach them to a so-called "namespace", which then is used as a prefix to the function calls, e.g. Import System.Math with namespace "math", use math.cos()</value>
  </data>
  <data name="FleeImportInfo_CustomNamespace.Text" xml:space="preserve">
    <value>Custom Namespace</value>
  </data>
  <data name="VariableInfo_EvaluationMode.Help" xml:space="preserve">
    <value>There are 2 modes of evaluation, Constant, which means the variable is only computed on the first evaluation and then Dynamic, which means the variable is computed on each evaluation and may depend on the context. Flee engine can deal with chaining comiled sub-expression to keep performances optimal. </value>
  </data>
  <data name="VariableInfo_EvaluationMode.Text" xml:space="preserve">
    <value>Evaluation Mode</value>
  </data>
  <data name="Variables_ExpressionTypes.Help" xml:space="preserve">
    <value>You can add your own types, and the drop down list should update on saving to include the new variable types. Only types with a default parameterless constructor can be used as CtorVariable</value>
  </data>
  <data name="Variables_ExpressionTypes.Text" xml:space="preserve">
    <value>Here is the list of target types available to define your variables.</value>
  </data>
  <data name="Variables1_ReturnTypes.Header" xml:space="preserve">
    <value>Available Types</value>
  </data>
  <data name="Invariant.Text" xml:space="preserve">
    <value>Invariant</value>
  </data>
  <data name="StaticImports_AddNew.Text" xml:space="preserve">
    <value>Add New Static Import</value>
  </data>
  <data name="AuthenticateRequest.Text" xml:space="preserve">
    <value>Authenticate Request</value>
  </data>
  <data name="AutoLoginInfo_AutoLoginMode.Text" xml:space="preserve">
    <value>Auto Login Mode</value>
  </data>
  <data name="AutoLoginInfo_EncryptionKey.Text" xml:space="preserve">
    <value>Encryption key</value>
  </data>
  <data name="AutoLoginInfo_Manual.Header" xml:space="preserve">
    <value>Manual Settings</value>
  </data>
  <data name="AutoLoginInfo_TicketAuth.Header" xml:space="preserve">
    <value>Encrypted Ticket Settings</value>
  </data>
  <data name="AutoLoginInfo_TicketAuthParamName.Text" xml:space="preserve">
    <value>Ticket Url Param Name</value>
  </data>
  <data name="BeginRequestAfterDNN.Text" xml:space="preserve">
    <value>Begin Request After DNN</value>
  </data>
  <data name="EndRequest.Text" xml:space="preserve">
    <value>End Request</value>
  </data>
  <data name="Manual.Text" xml:space="preserve">
    <value>Manual</value>
  </data>
  <data name="PageInit.Text" xml:space="preserve">
    <value>Page Init</value>
  </data>
  <data name="TicketAuth.Text" xml:space="preserve">
    <value>Encrypted ticket</value>
  </data>
  <data name="CtorVariableInfo`1_Definition.Header" xml:space="preserve">
    <value>Variable Definition</value>
  </data>
  <data name="ExpressionVariableInfo`1_FleeExpression.Help" xml:space="preserve">
    <value>The expression should account for the delcared variable type. You may use in turn sub-variables, to be evaluated once as constants or to be chained to the current expression. In such a case, sub-expressions are cloned for better performances.</value>
  </data>
  <data name="ExpressionVariableInfo`1_FleeExpression.Text" xml:space="preserve">
    <value>Enter here the Flee Expression to initiate the variable</value>
  </data>
  <data name="FleeImportInfo_DotNetType.Help" xml:space="preserve">
    <value>You can use those methods directly in your expression, with or without a prefix according to the following parameter</value>
  </data>
  <data name="FleeImportInfo_DotNetType.Text" xml:space="preserve">
    <value>Enter the .Net type, the static methods of which you want to leverage.</value>
  </data>
  <data name="CtorVariableInfo`1_Parameters.Help" xml:space="preserve">
    <value>Define here the parameters to be passed to the constructor. Static evaluation is forced. </value>
  </data>
  <data name="CtorVariableInfo`1_Parameters.Text" xml:space="preserve">
    <value>Constructor Parameters</value>
  </data>
  <data name="VariableInfo_Scope.Help" xml:space="preserve">
    <value>Define here if you want the variable to be available for the parent expression only, the following sub expressions as well, or to be available globally in the "Items" dictionary.</value>
  </data>
  <data name="VariableInfo_Scope.Text" xml:space="preserve">
    <value>Variable Scope</value>
  </data>
  <data name="Global.Text" xml:space="preserve">
    <value>Global as Items("varName")</value>
  </data>
  <data name="Local.Text" xml:space="preserve">
    <value>Local Only</value>
  </data>
  <data name="LocalAndSiblings.Text" xml:space="preserve">
    <value>Local and Siblings</value>
  </data>
  <data name="VariableInfo`1_VariableType.Help" xml:space="preserve">
    <value>This is the .Net type of the variable to be defined</value>
  </data>
  <data name="VariableInfo`1_VariableType.Text" xml:space="preserve">
    <value>Variable Type</value>
  </data>
  <data name="FleeExpressionInfo`1_CurrentValue.Help" xml:space="preserve">
    <value>If applicable, displays the value for the expression given the current context.</value>
  </data>
  <data name="FleeExpressionInfo`1_CurrentValue.Text" xml:space="preserve">
    <value>Current Value</value>
  </data>
  <data name="CtorVariableInfo`1_VariableType.Help" xml:space="preserve">
    <value>This is the .Net type for the current variable</value>
  </data>
  <data name="CtorVariableInfo`1_VariableType.Text" xml:space="preserve">
    <value>Constructor Variable Type</value>
  </data>
  <data name="ExpressionVariableInfo`1_VariableType.Help" xml:space="preserve">
    <value>This is the .Net type for the current variable</value>
  </data>
  <data name="ExpressionVariableInfo`1_VariableType.Text" xml:space="preserve">
    <value>Expression Variable Type</value>
  </data>
  <data name="Items_AddNew.Text" xml:space="preserve">
    <value>Add New Item</value>
  </data>
  <data name="SelectionSetCondition`1_Items.Help" xml:space="preserve">
    <value>Add here the elements of the set of items to be matched</value>
  </data>
  <data name="SelectionSetCondition`1_Items.Text" xml:space="preserve">
    <value>Matching Set</value>
  </data>
  <data name="DnnPageCondition_Specifics.Header" xml:space="preserve">
    <value>DNN Page Specifics</value>
  </data>
  <data name="HtmlDecode.Text" xml:space="preserve">
    <value>Html Decode</value>
  </data>
  <data name="HtmlEncode.Text" xml:space="preserve">
    <value>Html Encode</value>
  </data>
  <data name="UrlDecode.Text" xml:space="preserve">
    <value>Url Decode</value>
  </data>
  <data name="UrlEncode.Text" xml:space="preserve">
    <value>Url Encode</value>
  </data>
  <data name="DotNetType_EditableTypeName.Required" xml:space="preserve">
    <value>Enter a valid .Net type assembly name</value>
  </data>
  <data name="ExpressionTypes_Delete.Text" xml:space="preserve">
    <value>Delete Type</value>
  </data>
  <data name="ExpressionTypes_Down.Text" xml:space="preserve">
    <value>Move Type Down</value>
  </data>
  <data name="ExpressionTypes_Up.Text" xml:space="preserve">
    <value>Move Type Up</value>
  </data>
  <data name="FleeExpressionInfo`1_DateTimeFormat.Required" xml:space="preserve">
    <value>DateTime Format Required</value>
  </data>
  <data name="FleeExpressionInfo`1_DecimalSeparator.Required" xml:space="preserve">
    <value>Decimal Separator Required</value>
  </data>
  <data name="FleeExpressionInfo`1_FunctionArgumentSeparator.Required" xml:space="preserve">
    <value>Function Argument Separator Required</value>
  </data>
  <data name="Instances_Down.Text" xml:space="preserve">
    <value>Move Item Down</value>
  </data>
  <data name="Instances_Up.Text" xml:space="preserve">
    <value>Move Item Up</value>
  </data>
  <data name="TokenizedTextInfo_Template.Help" xml:space="preserve">
    <value>Enter here the text to be associated with the action. If enabled, you can use dynamic Tokens; an advanced token engine allows you to form complex expressions, leveraging object hierarchies, methods, arrays, indexed properties, conditional and loop tokens.  </value>
  </data>
  <data name="RequestsCaps_Delete.Text" xml:space="preserve">
    <value>Delete Cap</value>
  </data>
  <data name="RequestsCaps_Down.Text" xml:space="preserve">
    <value>Move Cap Down</value>
  </data>
  <data name="RequestsCaps_Up.Text" xml:space="preserve">
    <value>Move Cap Up</value>
  </data>
  <data name="Rules_Up.Text" xml:space="preserve">
    <value>Move Rule Up</value>
  </data>
  <data name="StaticImports_Delete.Text" xml:space="preserve">
    <value>Delete Import</value>
  </data>
  <data name="STimeSpan_Days.Help" xml:space="preserve">
    <value>Nb of Days</value>
  </data>
  <data name="STimeSpan_FormattedDuration.Help" xml:space="preserve">
    <value>This is the resulting duration as configured below.</value>
  </data>
  <data name="STimeSpan_Hours.Help" xml:space="preserve">
    <value>Nb of Hours</value>
  </data>
  <data name="STimeSpan_Microseconds.Help" xml:space="preserve">
    <value>Nb of Microseconds</value>
  </data>
  <data name="STimeSpan_Milliseconds.Help" xml:space="preserve">
    <value>Nb of Milliseconds</value>
  </data>
  <data name="STimeSpan_Minutes.Help" xml:space="preserve">
    <value>Nb of Minutes</value>
  </data>
  <data name="STimeSpan_Seconds.Help" xml:space="preserve">
    <value>Nb of Seconds</value>
  </data>
  <data name="STimeSpan_Ticks.Help" xml:space="preserve">
    <value>Nb of Ticks (1 tick = 0.1 µs)</value>
  </data>
  <data name="ValueList_Delete.Text" xml:space="preserve">
    <value>Delete Value</value>
  </data>
  <data name="VirtualCustomErrorsInfo_VirtualHandlerName.Required" xml:space="preserve">
    <value>Virtual Handler Name Required</value>
  </data>
  <data name="VirtualCustomErrorsInfo_VirtualHandlerPath.Required" xml:space="preserve">
    <value>Virtual Handler Path Required</value>
  </data>
  <data name="DenialOfServiceSettings_DosBlackList.Help" xml:space="preserve">
    <value>This lists all the client keys currently blacklisted after having triggering a Ban enabled condition, along with the time when the ban will be lifted.</value>
  </data>
  <data name="DenialOfServiceSettings_DosBlackList.Text" xml:space="preserve">
    <value>Current list of banned clients</value>
  </data>
  <data name="RequestsCapInfo_Enabled.Help" xml:space="preserve">
    <value>If unchecked, the corresponding cap is never triggered upon testing</value>
  </data>
  <data name="RequestsCapInfo_Enabled.Text" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="DenialOfServiceSettings_BlackList.Header" xml:space="preserve">
    <value>Black List</value>
  </data>
  <data name="DenialOfServiceSettings_Enabled.Help" xml:space="preserve">
    <value>Uncheck to completely disable banning (Ban enabled condition can also be switched on/off individually)</value>
  </data>
  <data name="DenialOfServiceSettings_Enabled.Text" xml:space="preserve">
    <value>Enable Ban Protection</value>
  </data>
  <data name="FirewallConfig_DosSettings.Help" xml:space="preserve">
    <value>Portal Keeper can manage a list of banned clients given by the Ban enabled conditions when the corresponding subsystem is enabled.</value>
  </data>
  <data name="FirewallConfig_DosSettings.Text" xml:space="preserve">
    <value>Ban Settings</value>
  </data>
  <data name="FleeExpressionInfo`1_EvaluateCurrentValue.Help" xml:space="preserve">
    <value>When checked, the Expression is evaluated against the current http/dnn context, and the result is displayed below</value>
  </data>
  <data name="FleeExpressionInfo`1_EvaluateCurrentValue.Text" xml:space="preserve">
    <value>Evaluate Current Value</value>
  </data>
  <data name="FirewallConfig_ShowCustomErrorsSection.Text" xml:space="preserve">
    <value>Custom Errors</value>
  </data>
  <data name="FirewallConfig_ShowProviders.Text" xml:space="preserve">
    <value>Display Providers</value>
  </data>
  <data name="RuleEngineSettings`1_ShowRules.Text" xml:space="preserve">
    <value>Rules</value>
  </data>
  <data name="PortalKeeperConfig_FirewallConfig.Text" xml:space="preserve">
    <value>Configure the HttpModule rule engine and the CustomErrors engine</value>
  </data>
  <data name="PortalKeeperConfig_ShowFirewall.Text" xml:space="preserve">
    <value>Firewall</value>
  </data>
  <data name="RuleEngineSettings`1_ShowProviders.Text" xml:space="preserve">
    <value>Providers</value>
  </data>
  <data name="PortalKeeperConfig_Firewall.Header" xml:space="preserve">
    <value>Firewall</value>
  </data>
  <data name="PortalKeeperConfig_Section.Header" xml:space="preserve">
    <value>Sections</value>
  </data>
  <data name="FirewallConfig_Rules.Header" xml:space="preserve">
    <value>Rules</value>
  </data>
  <data name="FirewallConfig_Sections.Header" xml:space="preserve">
    <value>Sections</value>
  </data>
  <data name="KeeperRule`1_Sections.Header" xml:space="preserve">
    <value>Sections</value>
  </data>
  <data name="KeeperRule`1_ShowActions.Text" xml:space="preserve">
    <value>Show Actions</value>
  </data>
  <data name="KeeperRule`1_ShowConditions.Text" xml:space="preserve">
    <value>Show Conditions</value>
  </data>
  <data name="RuleEngineSettings`1_ShowTechnicalSettings.Text" xml:space="preserve">
    <value>Technical Settings</value>
  </data>
  <data name="FleeExpressionInfo`1_Section.Header" xml:space="preserve">
    <value>Sections</value>
  </data>
  <data name="FleeExpressionInfo`1_ShowStaticImports.Text" xml:space="preserve">
    <value>Static Imports</value>
  </data>
  <data name="FleeExpressionInfo`1_ShowTechnicalSettings.Text" xml:space="preserve">
    <value>Technical Settings</value>
  </data>
  <data name="FleeExpressionInfo`1_ShowVariables.Text" xml:space="preserve">
    <value>Variables</value>
  </data>
  <data name="BotFarmInfo1_Bots.Header" xml:space="preserve">
    <value>Bots</value>
  </data>
  <data name="BotFarmInfo`1_Bots.Text" xml:space="preserve">
    <value>Edit existing bots or add a new bot.</value>
  </data>
  <data name="BotInfoEvent_DurationString.Help" xml:space="preserve">
    <value>indicates how long the BotCall was. This duration is used into the calculation of Slowest BotCall, Fastest BotCall, and Average duration.</value>
  </data>
  <data name="BotInfoEvent_DurationString.Text" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="BotInfoEvent_PayLoad.Text" xml:space="preserve">
    <value>Payload</value>
  </data>
  <data name="BotInfoEvent_Success.Help" xml:space="preserve">
    <value>Indicates if the latest BotCall succeeded or not.</value>
  </data>
  <data name="BotInfoEvent_Success.Text" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="BotInfoEvent_Time.Help" xml:space="preserve">
    <value>The date and hour of the  latest BotCall made.</value>
  </data>
  <data name="BotInfoEvent_Time.Text" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="BotInfo`1_Providers.Header" xml:space="preserve">
    <value>Providers</value>
  </data>
  <data name="BotInfo`1_Activation.Header" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="BotInfo`1_ApiUrl.Help" xml:space="preserve">
    <value>Url  you want to BotCall. It can be a local or internet web site Url. </value>
  </data>
  <data name="BotInfo`1_ApiUrl.Text" xml:space="preserve">
    <value>Url</value>
  </data>
  <data name="BotInfo`1_BotHistory.Help" xml:space="preserve">
    <value>The global history of calls with statistics and individual dumps. </value>
  </data>
  <data name="BotInfo`1_BotHistory.Text" xml:space="preserve">
    <value>Bot History</value>
  </data>
  <data name="UserBotInfo_BotHistory.Help" xml:space="preserve">
    <value>The global history of calls with statistics and individual dumps. </value>
  </data>
  <data name="UserBotInfo_BotHistory.Text" xml:space="preserve">
    <value>Bot History</value>
  </data>
  <data name="BotInfo`1_BotStatsInfo.Help" xml:space="preserve">
    <value>This section present BotCalls statistics made </value>
  </data>
  <data name="BotInfo`1_BotStatsInfo.Text" xml:space="preserve">
    <value>WebBot Statistic Information. </value>
  </data>
  <data name="BotInfo`1_ConditionProviders.Header" xml:space="preserve">
    <value>Condition Providers</value>
  </data>
  <data name="BotInfo`1_Enabled.Help" xml:space="preserve">
    <value>Check this box if you want to activate the BotCall on the Url below. </value>
  </data>
  <data name="BotInfo`1_Enabled.Text" xml:space="preserve">
    <value>Enable Web BotCall</value>
  </data>
  <data name="BotInfo`1_History.Header" xml:space="preserve">
    <value>History</value>
  </data>
  <data name="BotInfo`1_BotSchedule.Help" xml:space="preserve">
    <value>In this section, you can define a schedule for your bot. There are 2 modes. &lt;ul&gt;&lt;li&gt;Period will let you enter a time span.&lt;/li&gt;&lt;li&gt;Fixed times will let you choose fixed hours and date events&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
  <data name="BotInfo`1_BotSchedule.Text" xml:space="preserve">
    <value>Schedule</value>
  </data>
  <data name="BotInfo`1_RetainHistoryNb.Help" xml:space="preserve">
    <value>Number of statistics blocks to display in History section. </value>
  </data>
  <data name="BotInfo`1_RetainHistoryNb.Text" xml:space="preserve">
    <value>Retain History Number</value>
  </data>
  <data name="BotInfo`1_Rules.Header" xml:space="preserve">
    <value>Rules</value>
  </data>
  <data name="BotInfo`1_Schedule.Header" xml:space="preserve">
    <value>Schedule</value>
  </data>
  <data name="BotInfo`1_Sections.Header" xml:space="preserve">
    <value>Sections</value>
  </data>
  <data name="WebBotHistory_Stats.Header" xml:space="preserve">
    <value>Stats</value>
  </data>
  <data name="BotInfo`1_TechnicalSettings.Header" xml:space="preserve">
    <value>Technical Settings</value>
  </data>
  <data name="PortalKeeperConfig_Scheduler.Header" xml:space="preserve">
    <value>Bots</value>
  </data>
  <data name="PortalKeeperConfig_SchedulerFarm.Help" xml:space="preserve">
    <value>You should configure their period to be equal or superior to the period defined for the task in the dnn scheduler menu</value>
  </data>
  <data name="PortalKeeperConfig_SchedulerFarm.Text" xml:space="preserve">
    <value>Those Rule Engines are run by a scheduler task</value>
  </data>
  <data name="PortalKeeperConfig_ShowSchedulerFarm.Text" xml:space="preserve">
    <value>Bots Farm</value>
  </data>
  <data name="SimpleList`1_Instances.Help" xml:space="preserve">
    <value>List of elements from the parent collection. Click on an accordion element header to display the corresponding item. Depending on your authorizations, you may be able to add new items and edit/delete reorder existing  items using the corresponding link buttons. </value>
  </data>
  <data name="SimpleList`1_Instances.Text" xml:space="preserve">
    <value>Items</value>
  </data>
  <data name="WebBotHistory_AverageDurationString.Help" xml:space="preserve">
    <value>represent the average duration of total successful BotCalls = Duration of successful BotCalls / Number of successful BotCalls</value>
  </data>
  <data name="WebBotHistory_AverageDurationString.Text" xml:space="preserve">
    <value>Average Duration</value>
  </data>
  <data name="WebBotHistory_AverageDurationWOExtremsString.Help" xml:space="preserve">
    <value>The average duration of answer without taking the 2 extremes durations  ( the biggest duration and the smallest duration) of BotCalls made on the Url.</value>
  </data>
  <data name="WebBotHistory_AverageDurationWOExtremsString.Text" xml:space="preserve">
    <value>Av Duration w/o extremes </value>
  </data>
  <data name="WebBotHistory_MaxDurationString.Help" xml:space="preserve">
    <value>represents the slowest amongs successful Bot runs</value>
  </data>
  <data name="WebBotHistory_MaxDurationString.Text" xml:space="preserve">
    <value>Slowest Run</value>
  </data>
  <data name="WebBotHistory_NumberOfBotCall.Help" xml:space="preserve">
    <value>Total number of BotCalls made on the Url.  </value>
  </data>
  <data name="WebBotHistory_NumberOfBotCall.Text" xml:space="preserve">
    <value>Number Of BotCalls</value>
  </data>
  <data name="WebBotHistory_NumberOfFailedBotCall.Help" xml:space="preserve">
    <value>represents the total number of failed BotCalls. +1 for every failed BotCalls.</value>
  </data>
  <data name="WebBotHistory_NumberOfFailedBotCall.Text" xml:space="preserve">
    <value>Failed BotCalls</value>
  </data>
  <data name="WebBotHistory_NumberOfSucceedBotCall.Help" xml:space="preserve">
    <value>represents the number of successful BotCalls. +1 for every successful BotCall.</value>
  </data>
  <data name="WebBotHistory_NumberOfSucceedBotCall.Text" xml:space="preserve">
    <value>Successful BotCalls</value>
  </data>
  <data name="WebBotHistory_MinDurationString.Help" xml:space="preserve">
    <value>represents the fastest amongst successful Bot runs.</value>
  </data>
  <data name="WebBotHistory_MinDurationString.Text" xml:space="preserve">
    <value>Fastest Run</value>
  </data>
  <data name="WebBots_AddNew.Text" xml:space="preserve">
    <value>Add New</value>
  </data>
  <data name="ExportPath.Help" xml:space="preserve">
    <value>Enter here the path to export/import the file to/from. The path should be relative to the portal root folder. You can access the file through the admin file manager.</value>
  </data>
  <data name="ExportPath.Text" xml:space="preserve">
    <value>Export Path</value>
  </data>
  <data name="Instances_Export.Text" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="Instances_Import.Text" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="Rules_Export.Text" xml:space="preserve">
    <value>Export Rules</value>
  </data>
  <data name="Rules_Import.Text" xml:space="preserve">
    <value>Import Rules</value>
  </data>
  <data name="ActionProviders_Export.Text" xml:space="preserve">
    <value>Export Action Providers</value>
  </data>
  <data name="ActionProviders_Import.Text" xml:space="preserve">
    <value>Import Action Providers</value>
  </data>
  <data name="ConditionProviders_Export.Text" xml:space="preserve">
    <value>Export Condition Providers</value>
  </data>
  <data name="ConditionProviders_Import.Text" xml:space="preserve">
    <value>Import Condition Providers</value>
  </data>
  <data name="WebAction`1_TechnicalSettings.Header" xml:space="preserve">
    <value>Technical Settings</value>
  </data>
  <data name="Get.Text" xml:space="preserve">
    <value>Get</value>
  </data>
  <data name="Post.Text" xml:space="preserve">
    <value>Post</value>
  </data>
  <data name="WebAction`1_Parameters.Header" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="WebAction`1_InputParameters.Help" xml:space="preserve">
    <value>Define here a series of parameters to be embedded with the Url call.</value>
  </data>
  <data name="WebAction`1_InputParameters.Text" xml:space="preserve">
    <value>Input Parameters</value>
  </data>
  <data name="OutputAction`1_OutputName.Help" xml:space="preserve">
    <value>This is the name of the variable created with the string result of the api call (optional: leave empty to discard the response)</value>
  </data>
  <data name="OutputAction`1_OutputName.Text" xml:space="preserve">
    <value>Result Name</value>
  </data>
  <data name="WebAction`1_WebRequest.Text" xml:space="preserve">
    <value>Enter here the parameters needed by the web client</value>
  </data>
  <data name="WebRequestInfo`1_Method.Help" xml:space="preserve">
    <value>This is the Http verb to be used when sending the request.</value>
  </data>
  <data name="WebRequestInfo`1_Method.Text" xml:space="preserve">
    <value>Method</value>
  </data>
  <data name="WebRequestInfo`1_ParametersMode.Help" xml:space="preserve">
    <value>This is the methode to embed given parameters in the url. They can be appended to the url as querystring params, or they can be posted (method should be Post),</value>
  </data>
  <data name="WebRequestInfo`1_ParametersMode.Text" xml:space="preserve">
    <value>Parameters Mode</value>
  </data>
  <data name="WebRequestInfo`1_Url.Help" xml:space="preserve">
    <value>This is the base url to connect to. Querystring parameters can also be included automatically.</value>
  </data>
  <data name="WebRequestInfo`1_Url.Text" xml:space="preserve">
    <value>Base Url</value>
  </data>
  <data name="BotInfo`1_ForceRun.Help" xml:space="preserve">
    <value>If you click on "Run Forced bots", only bots with this checkbox checked are run</value>
  </data>
  <data name="BotInfo`1_ForceRun.Text" xml:space="preserve">
    <value>Include in Forced Run</value>
  </data>
  <data name="Query.Text" xml:space="preserve">
    <value>Query String</value>
  </data>
  <data name="Rpc.Text" xml:space="preserve">
    <value>RPC</value>
  </data>
  <data name="WebAction`1_Simulation.Header" xml:space="preserve">
    <value>Simulation</value>
  </data>
  <data name="OutputAction`1_Simulation.Help" xml:space="preserve">
    <value>You can simulate your web calls by providing a simulated response content.</value>
  </data>
  <data name="OutputAction`1_Simulation.Text" xml:space="preserve">
    <value>Simulation Mode</value>
  </data>
  <data name="OutputAction`1_SimulationData.Help" xml:space="preserve">
    <value>Enter here a String to simulate the response content</value>
  </data>
  <data name="OutputAction`1_SimulationData.Text" xml:space="preserve">
    <value>Simulation Data</value>
  </data>
  <data name="Init.Text" xml:space="preserve">
    <value>Initialize</value>
  </data>
  <data name="Run.Text" xml:space="preserve">
    <value>Run</value>
  </data>
  <data name="Unload.Text" xml:space="preserve">
    <value>Unload</value>
  </data>
  <data name="cmdDebug" xml:space="preserve">
    <value>Debug Command</value>
  </data>
  <data name="AdditionalTypes_AddNew.Text" xml:space="preserve">
    <value>Add Additional Type</value>
  </data>
  <data name="Binary.Text" xml:space="preserve">
    <value>Binary Expression</value>
  </data>
  <data name="OutputAction`1_Simulation.Header" xml:space="preserve">
    <value>Simulation</value>
  </data>
  <data name="DeserializeActionProvider`1_Specifics.Header" xml:space="preserve">
    <value>Deserialize Specifics</value>
  </data>
  <data name="DeserializeActionProvider`1_TechnicalSettings.Header" xml:space="preserve">
    <value>Technical Settings</value>
  </data>
  <data name="DeserializeActionProvider`1_AdditionalTypes.Help" xml:space="preserve">
    <value>Add here any additional (inner) type needed by the serializer</value>
  </data>
  <data name="DeserializeActionProvider`1_AdditionalTypes.Text" xml:space="preserve">
    <value>Additional Types</value>
  </data>
  <data name="DeserializeActionProvider`1_InputExpression.Help" xml:space="preserve">
    <value>A dynamic expression lets you define the input, which should resolve into a String</value>
  </data>
  <data name="DeserializeActionProvider`1_InputExpression.Text" xml:space="preserve">
    <value>Input</value>
  </data>
  <data name="DeserializeActionProvider`1_OutputType.Help" xml:space="preserve">
    <value>Choose here the type of the Object you want to deserialize to</value>
  </data>
  <data name="DeserializeActionProvider`1_OutputType.Text" xml:space="preserve">
    <value>Output Type</value>
  </data>
  <data name="IConvertible.Text" xml:space="preserve">
    <value>IConvertible</value>
  </data>
  <data name="Json.Text" xml:space="preserve">
    <value>Json</value>
  </data>
  <data name="SerializationBaseActionProvider`1_SerializationType.Help" xml:space="preserve">
    <value>You can use various types of convertions according to your needs and/or the caracteristics of the objetcs to serialize</value>
  </data>
  <data name="SerializationBaseActionProvider`1_SerializationType.Text" xml:space="preserve">
    <value>Serialization Type</value>
  </data>
  <data name="SerializationBaseActionProvider`1_UseCompression.Help" xml:space="preserve">
    <value>If you choose to add compression, a deflate stream is used against the input/output</value>
  </data>
  <data name="SerializationBaseActionProvider`1_UseCompression.Text" xml:space="preserve">
    <value>Use Compression</value>
  </data>
  <data name="Xml.Text" xml:space="preserve">
    <value>Xml</value>
  </data>
  <data name="DefineVarsActionProvider`1_TechnicalSettings.Header" xml:space="preserve">
    <value>Technical Settings</value>
  </data>
  <data name="DefineVarsActionProvider`1_Variables.Header" xml:space="preserve">
    <value>Definitions</value>
  </data>
  <data name="DefineVarsActionProvider`1_Variables.Help" xml:space="preserve">
    <value>Define here a series of Variable to be included in the context's "Items" dictionary</value>
  </data>
  <data name="DefineVarsActionProvider`1_Variables.Text" xml:space="preserve">
    <value>Variable List</value>
  </data>
  <data name="LoopActionProvider`1_Specifics.Header" xml:space="preserve">
    <value>Loop Action Specifics</value>
  </data>
  <data name="LoopActionProvider`1_TechnicalSettings.Header" xml:space="preserve">
    <value>Technical Settings</value>
  </data>
  <data name="LoopActionProvider`1_CurrentItemParam.Help" xml:space="preserve">
    <value>Enter here the name of the parameter to get access to current item of the collection within the loop</value>
  </data>
  <data name="LoopActionProvider`1_CurrentItemParam.Text" xml:space="preserve">
    <value>Current Item Param Name</value>
  </data>
  <data name="LoopActionProvider`1_EnumerableExpression.Help" xml:space="preserve">
    <value>Define here the collection, the items of which make up each step of the loop</value>
  </data>
  <data name="LoopActionProvider`1_EnumerableExpression.Text" xml:space="preserve">
    <value>Collection Expression</value>
  </data>
  <data name="MultipleActionProvider`1_KeeperAction.Text" xml:space="preserve">
    <value>Action Sequence</value>
  </data>
  <data name="MultipleActionProvider`1_KeeperAction.Help" xml:space="preserve">
    <value>This is the sub sequence of actions to be run</value>
  </data>
  <data name="SubBotActionProvider1_TechnicalSettings.Header" xml:space="preserve">
    <value>Technical Settings</value>
  </data>
  <data name="SubBotActionProvider`1_CatchUpPreviousSteps.Help" xml:space="preserve">
    <value>The subbot will run on the event step of the parent action triggered. You can optionally run all the previous steps beforehand</value>
  </data>
  <data name="SubBotActionProvider`1_CatchUpPreviousSteps.Text" xml:space="preserve">
    <value>Catch Up Previous Steps</value>
  </data>
  <data name="SubBotActionProvider`1_ForceRun.Text" xml:space="preserve">
    <value>Force Run</value>
  </data>
  <data name="SubBotActionProvider`1_SubBot.Text" xml:space="preserve">
    <value>Sub Bot</value>
  </data>
  <data name="Run1.Text" xml:space="preserve">
    <value>Step 1</value>
  </data>
  <data name="Run2.Text" xml:space="preserve">
    <value>Step 2</value>
  </data>
  <data name="Run3.Text" xml:space="preserve">
    <value>Step 3</value>
  </data>
  <data name="FirewallConfig_ActionProviders.Header" xml:space="preserve">
    <value>Action Providers</value>
  </data>
  <data name="ActionProviderSettings`1_RuleSettings.Header" xml:space="preserve">
    <value>Runtime</value>
  </data>
  <data name="ActionProviderSettings`1_TechnicalSettings.Header" xml:space="preserve">
    <value>Technical Settings</value>
  </data>
  <data name="MessageBasedAction`1_MessageSettings.Header" xml:space="preserve">
    <value>Message Settings</value>
  </data>
  <data name="SelectionSetCondition`1_Specifics.Header" xml:space="preserve">
    <value>Selection Set</value>
  </data>
  <data name="SubConditionsProvider`1_Specifics.Header" xml:space="preserve">
    <value>Sub Conditions</value>
  </data>
  <data name="CtorVariableInfo`1_Constructor.Header" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="ExpressionVariableInfo2_Definition.Header" xml:space="preserve">
    <value>Expression Definition</value>
  </data>
  <data name="ExpressionVariableInfo`1_Expression.Header" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="VariableInfo_Definition.Header" xml:space="preserve">
    <value>Definition</value>
  </data>
  <data name="LoopActionProvider`1_LoopAction.Header" xml:space="preserve">
    <value>Loop Settings</value>
  </data>
  <data name="MultipleActionProvider`1_Specifics.Header" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="SerializationBaseActionProvider`1_Specifics.Header" xml:space="preserve">
    <value>Serialization Specifics</value>
  </data>
  <data name="OutputAction`1_Specifics.Header" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="RuleEngineSettings`1_Variables.Header" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="RuleEngineSettings`1_Variables.Help" xml:space="preserve">
    <value>You can use any parameter defined here by its name in any expression based condition/action. You can update the list of .Net types available below. For each .Net type, you can choose amongst at most 3 kinds of variables to define a new parameter: &lt;ul&gt;&lt;li&gt;&lt;strong&gt;VariableInfo :&lt;/strong&gt; An instance of the .Net type will be created and saved together with the configuration. You can edit the properties for that instance directly in the configuration form&lt;/li&gt;&lt;li&gt;&lt;strong&gt;cTorVariableInfo :&lt;/strong&gt; your parameter is created by calling a constructor of the corresponding .Net type. You can choose to pass parameters to the constructor.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ExpressionVariableInfo :&lt;/strong&gt; your parameter is defined by evaluating a Flee expression (see the corresponding help lables for more information).&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
  <data name="RuleEngineSettings`1_Variables.Text" xml:space="preserve">
    <value>Define here a series of global parameters to be used within the rules</value>
  </data>
  <data name="SerializationBaseActionProvider`1_Serialization.Header" xml:space="preserve">
    <value>Serialization</value>
  </data>
  <data name="StringFilterProvider`1_Filter.Header" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="StringFilterProvider`1_FilterSource.Help" xml:space="preserve">
    <value>Use one of the many available features to transform the input string.</value>
  </data>
  <data name="StringFilterProvider`1_FilterSource.Text" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="StringFilterProvider`1_InputExpression.Help" xml:space="preserve">
    <value>Define here the input to the filter as a variable that resolves as a String</value>
  </data>
  <data name="StringFilterProvider`1_InputExpression.Text" xml:space="preserve">
    <value>Input</value>
  </data>
  <data name="Expression.Text" xml:space="preserve">
    <value>Dynamic Expression</value>
  </data>
  <data name="String.Text" xml:space="preserve">
    <value>String</value>
  </data>
  <data name="WebRequestInfo`1_UrlExpression.Help" xml:space="preserve">
    <value>Enter here a Flee Expression, which resumes into a String</value>
  </data>
  <data name="WebRequestInfo`1_UrlExpression.Text" xml:space="preserve">
    <value>Url Expression</value>
  </data>
  <data name="WebRequestInfo`1_UrlMode.Help" xml:space="preserve">
    <value>You can choose to enter directly the target url as a String constant, or to use a dynamic expression. This allows to define the url elsewhere as a global parameter for easy updates without having to dig into the rule.</value>
  </data>
  <data name="WebRequestInfo`1_UrlMode.Text" xml:space="preserve">
    <value>Url Mode</value>
  </data>
  <data name="BotFarmInfo1_UserBots.Header" xml:space="preserve">
    <value>User Bots</value>
  </data>
  <data name="BotFarmInfo`1_EnableUserBots.Help" xml:space="preserve">
    <value>You can choose to provide authorized users with a bot of their own, by choosing an existing bot and exposing parameters to the end user.</value>
  </data>
  <data name="BotFarmInfo`1_EnableUserBots.Text" xml:space="preserve">
    <value>Enable User Bots</value>
  </data>
  <data name="UserBotSettings`1_BotName.Help" xml:space="preserve">
    <value>Choose the master bot to be cloned for each authorized user.</value>
  </data>
  <data name="UserBotSettings`1_BotName.Text" xml:space="preserve">
    <value>Selected Bot</value>
  </data>
  <data name="UserBotSettings`1_UserParameters.Help" xml:space="preserve">
    <value>You can choose to let your users edit some of its initial variables (lookup the corresponding tab). There are 2 display mode for your parameter depending on its nature. If it's a dedicated entity class with the appropriaté decorating property attributes, it may bind directly into its own Property Editor. If it's a simple type, you can choose to configure the field manually as in DNN profile properties editor.</value>
  </data>
  <data name="UserBotSettings`1_UserParameters.Text" xml:space="preserve">
    <value>User Parameters</value>
  </data>
  <data name="GeneralPropertyDefinition_DataType.Help" xml:space="preserve">
    <value>Select the Data Type for this field</value>
  </data>
  <data name="GeneralPropertyDefinition_DataType.Text" xml:space="preserve">
    <value>Data Type:</value>
  </data>
  <data name="GeneralPropertyDefinition_DefaultValue.Help" xml:space="preserve">
    <value>You can provide a default value for this property</value>
  </data>
  <data name="GeneralPropertyDefinition_DefaultValue.Text" xml:space="preserve">
    <value>Default Value:</value>
  </data>
  <data name="GeneralPropertyDefinition_Length.Help" xml:space="preserve">
    <value>Enter the maximum length for this property.  This will only be applicable for specific data types.</value>
  </data>
  <data name="GeneralPropertyDefinition_Length.Text" xml:space="preserve">
    <value>Length:</value>
  </data>
  <data name="GeneralPropertyDefinition_PropertyCategory.Help" xml:space="preserve">
    <value>Enter the category for this property.  This will allow the related properties to be grouped when dislayed to the user.</value>
  </data>
  <data name="GeneralPropertyDefinition_PropertyCategory.Required" xml:space="preserve">
    <value>The Category is required</value>
  </data>
  <data name="GeneralPropertyDefinition_PropertyCategory.Text" xml:space="preserve">
    <value>Property Category:</value>
  </data>
  <data name="GeneralPropertyDefinition_PropertyName.Help" xml:space="preserve">
    <value>Enter a name for the property</value>
  </data>
  <data name="GeneralPropertyDefinition_PropertyName.Required" xml:space="preserve">
    <value>The Property Name is required</value>
  </data>
  <data name="GeneralPropertyDefinition_PropertyName.Text" xml:space="preserve">
    <value>Property Name:</value>
  </data>
  <data name="GeneralPropertyDefinition_PropertyName.Validation" xml:space="preserve">
    <value>The property name cannot contain spaces</value>
  </data>
  <data name="GeneralPropertyDefinition_Required.Help" xml:space="preserve">
    <value>Set whether this property is required.</value>
  </data>
  <data name="GeneralPropertyDefinition_Required.Text" xml:space="preserve">
    <value>Required:</value>
  </data>
  <data name="GeneralPropertyDefinition_ValidationExpression.Help" xml:space="preserve">
    <value>You can provide a Regular Expression to validate the data entered for this property</value>
  </data>
  <data name="GeneralPropertyDefinition_ValidationExpression.Text" xml:space="preserve">
    <value>Validation Expression:</value>
  </data>
  <data name="GeneralPropertyDefinition_ViewOrder.Help" xml:space="preserve">
    <value>Enter a View Order for this property</value>
  </data>
  <data name="GeneralPropertyDefinition_ViewOrder.Text" xml:space="preserve">
    <value>View Order:</value>
  </data>
  <data name="GeneralPropertyDefinition_Visible.Help" xml:space="preserve">
    <value>You can optionally display properties to the user.</value>
  </data>
  <data name="GeneralPropertyDefinition_Visible.Text" xml:space="preserve">
    <value>Visible:</value>
  </data>
  <data name="PropertyDefinition.Text" xml:space="preserve">
    <value>Property Definition</value>
  </data>
  <data name="ReflectedEditor.Text" xml:space="preserve">
    <value>Reflected Editor</value>
  </data>
  <data name="UserVariableInfo_Mode.Help" xml:space="preserve">
    <value>Their are 2 modes to include a parameter into the user form's editor: Reflected Editor and Profile Property. Reflected mode is for entity classes with DNN friendly decorating property attributes. The object as defined in the bot's variable is directly bound to a PropertyEditor control. Profile Property lets you define the Field as in DNN's native profile property editor. </value>
  </data>
  <data name="UserVariableInfo_Mode.Text" xml:space="preserve">
    <value>Editor Mode</value>
  </data>
  <data name="UserVariableInfo_PropertyDefinition.Help" xml:space="preserve">
    <value>Just as with user profile properties, define here how to edit the parameter.</value>
  </data>
  <data name="UserVariableInfo_PropertyDefinition.Text" xml:space="preserve">
    <value>Property Definition</value>
  </data>
  <data name="BotFarmInfo`1_Bots.Header" xml:space="preserve">
    <value>Bots</value>
  </data>
  <data name="BotFarmInfo`1_EncryptionKey.Help" xml:space="preserve">
    <value>In order to secure user data, it is encrypted using Rijndael provider with a symmetrical key and a salt from the user's email address. Accordingly, users should backup their bot parameters before they update their profile email address. The encryption key itself is stored encrypted against a fingerprint of the current DNN hosting  Instance. </value>
  </data>
  <data name="BotFarmInfo`1_EncryptionKey.Text" xml:space="preserve">
    <value>Encryption Key</value>
  </data>
  <data name="UserBotSettings`1_Bot.Help" xml:space="preserve">
    <value>This is the selected User Bot. It is readonly and can be changed with the selector drop down list</value>
  </data>
  <data name="UserBotSettings`1_Bot.Text" xml:space="preserve">
    <value>User Bot</value>
  </data>
  <data name="BotFarmInfo`1_UserBots.Header" xml:space="preserve">
    <value>User Bots</value>
  </data>
  <data name="CacheableAction`1_EnableCache.Help" xml:space="preserve">
    <value>You can optionally choose to keep the action output in cache for a period of time to optimize performances.</value>
  </data>
  <data name="CacheableAction`1_EnableCache.Text" xml:space="preserve">
    <value>Enable Cache</value>
  </data>
  <data name="UserBotSettings`1_DisableTemplateBot.Help" xml:space="preserve">
    <value>Unchek if you want the template bot to also keep running as part of the other host level bots.</value>
  </data>
  <data name="UserBotSettings`1_DisableTemplateBot.Text" xml:space="preserve">
    <value>Disable Master Bot</value>
  </data>
  <data name="GeneralPropertyDefinition_DefaultVisibility.Text" xml:space="preserve">
    <value>Default Visibility</value>
  </data>
  <data name="List1_Credentials.Header" xml:space="preserve">
    <value>Credentials</value>
  </data>
  <data name="pe_Password.Help" xml:space="preserve">
    <value>Enter here the password to your trading account. All your data is stored encrypted and only decrypted for display on this form and when running the bot. Nevertheless, you should make sure your bot account only contains the minimum fund and to change your password on a regular basis.</value>
  </data>
  <data name="pe_Password.Text" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="pe_UserName.Help" xml:space="preserve">
    <value>Enter here the login to your trading account</value>
  </data>
  <data name="pe_UserName.Text" xml:space="preserve">
    <value>UserName</value>
  </data>
  <data name="UserBotInfo_Entities.Help" xml:space="preserve">
    <value>The following section contains advanced parameters</value>
  </data>
  <data name="UserBotInfo_Entities.Text" xml:space="preserve">
    <value>Advanced Parameters</value>
  </data>
  <data name="UserBotInfo_PropertyDefinitions.Help" xml:space="preserve">
    <value>Here's a series of simple properties you should update before you activate your bot</value>
  </data>
  <data name="UserBotInfo_PropertyDefinitions.Text" xml:space="preserve">
    <value>Basic Parameters</value>
  </data>
  <data name="CustomErrorsInfo_CustomErrors.Header" xml:space="preserve">
    <value>Custom Errors</value>
  </data>
  <data name="CustomErrorsInfo_MainSettings.Header" xml:space="preserve">
    <value>Main Settings</value>
  </data>
  <data name="CacheableAction`1_CacheDuration.Help" xml:space="preserve">
    <value>Enter here a time span for the action output to be retained in cache</value>
  </data>
  <data name="CacheableAction`1_CacheDuration.Text" xml:space="preserve">
    <value>Absolute Cache Duration</value>
  </data>
  <data name="CacheableAction`1_CacheKeyFormat.Help" xml:space="preserve">
    <value>Default caching key is the variable name. If you use the same name for distinct bots, you should add bot specific formatting to avoid collisions</value>
  </data>
  <data name="CacheableAction`1_CacheKeyFormat.Text" xml:space="preserve">
    <value>Caching Key Format</value>
  </data>
  <data name="BotFarmInfo`1_InitVector.Help" xml:space="preserve">
    <value>This string, automatically initialized, is stored on first save, and then used as an initialization vector for all encryption matters</value>
  </data>
  <data name="BotFarmInfo`1_InitVector.Text" xml:space="preserve">
    <value>Encryption Seed</value>
  </data>
  <data name="VariableInfo`1_Instance.Header" xml:space="preserve">
    <value>Instance</value>
  </data>
  <data name="VariableInfo`1_Instance.Help" xml:space="preserve">
    <value>Edit the entity's properties directly below</value>
  </data>
  <data name="VariableInfo`1_Instance.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="VariableInfo`1_InstanceMode.Help" xml:space="preserve">
    <value>Instance mode lets your save and edit a version of the expression result obtained by evaluating the expression once. You can either choose to immediately evaluate the current variable with a default context, or to leave to evaluate in context, refresh the form to display the saved entity and save the form together with the new entity.</value>
  </data>
  <data name="VariableInfo`1_InstanceMode.Text" xml:space="preserve">
    <value>Instance Mode</value>
  </data>
  <data name="BuyBTC.Text" xml:space="preserve">
    <value>Buy Btcs</value>
  </data>
  <data name="CancelOrder.Text" xml:space="preserve">
    <value>Cancel Order</value>
  </data>
  <data name="ContextLess.Text" xml:space="preserve">
    <value>Context Less Evaluation</value>
  </data>
  <data name="ExchangeInfo_AskCommission.Help" xml:space="preserve">
    <value>This is the transaction fee in percentage applied on ask orders</value>
  </data>
  <data name="ExchangeInfo_AskCommission.Text" xml:space="preserve">
    <value>Ask Commission</value>
  </data>
  <data name="ExchangeInfo_BidCommission.Help" xml:space="preserve">
    <value>This is the transaction fee in percentage applied on bid orders. It may be different from the Ask Commission when a double commission is applied on the order value and on the amount purchased.</value>
  </data>
  <data name="ExchangeInfo_BidCommission.Text" xml:space="preserve">
    <value>Bid Commission</value>
  </data>
  <data name="ExchangeInfo_Fees.Header" xml:space="preserve">
    <value>Fees</value>
  </data>
  <data name="ExchangeInfo_Filter.Header" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="ExchangeInfo_Filter.Help" xml:space="preserve">
    <value>If the API does not match exactly the expected format, you may be able to fix the response String from API calls to get it to work</value>
  </data>
  <data name="ExchangeInfo_Filter.Text" xml:space="preserve">
    <value>Response Content Formatting</value>
  </data>
  <data name="ExchangeInfo_TradingUrls.Help" xml:space="preserve">
    <value>Enter here the urls for various operations supported. The default bot expect json responses modeled against MtGox API</value>
  </data>
  <data name="ExchangeInfo_TradingUrls.Text" xml:space="preserve">
    <value>API End Points</value>
  </data>
  <data name="ExchangeInfo_Urls.Header" xml:space="preserve">
    <value>Urls</value>
  </data>
  <data name="VariableInfo`1_Evaluation.Header" xml:space="preserve">
    <value>Evaluation</value>
  </data>
  <data name="GetBalance.Text" xml:space="preserve">
    <value>Balance</value>
  </data>
  <data name="GetOrders.Text" xml:space="preserve">
    <value>Open Orders</value>
  </data>
  <data name="InContextEval.Text" xml:space="preserve">
    <value>In Context Evaluation</value>
  </data>
  <data name="MarketDepth.Text" xml:space="preserve">
    <value>Market Depth</value>
  </data>
  <data name="RecentTrades.Text" xml:space="preserve">
    <value>Recent Trades</value>
  </data>
  <data name="SellBTC.Text" xml:space="preserve">
    <value>Sell Btcs</value>
  </data>
  <data name="SendBTC.Text" xml:space="preserve">
    <value>Send Btcs</value>
  </data>
  <data name="Ticker.Text" xml:space="preserve">
    <value>Ticker</value>
  </data>
  <data name="TradingUrls_AddNew.Text" xml:space="preserve">
    <value>Add New API End Point</value>
  </data>
  <data name="pe_Password.Required" xml:space="preserve">
    <value>Password is mandatory</value>
  </data>
  <data name="pe_UserName.Required" xml:space="preserve">
    <value>User Name is mandatory</value>
  </data>
  <data name="ExchangeInfo_AmountDecil.Help" xml:space="preserve">
    <value>This is the number of decimals the exchange takes for order amounts</value>
  </data>
  <data name="ExchangeInfo_AmountDecil.Text" xml:space="preserve">
    <value>Amount Decil</value>
  </data>
  <data name="ExchangeInfo_Dynamics.Header" xml:space="preserve">
    <value>Dynamics</value>
  </data>
  <data name="ExchangeInfo_MinOrderAmount.Help" xml:space="preserve">
    <value>This is the amount for the lowest ask / highest bid issuable by the bot</value>
  </data>
  <data name="ExchangeInfo_MinOrderAmount.Text" xml:space="preserve">
    <value>Min Order Amount (Btcs)</value>
  </data>
  <data name="ExchangeInfo_PriceDecil.Help" xml:space="preserve">
    <value>This is the number of decimals the exchange takes for order prices</value>
  </data>
  <data name="ExchangeInfo_PriceDecil.Text" xml:space="preserve">
    <value>Price Decil</value>
  </data>
  <data name="TradingStrategy_AdjustOrderLimitRate.Help" xml:space="preserve">
    <value>This is the limit, below which an order is increased, in percentage of the ideal amount defined by the amount expression</value>
  </data>
  <data name="TradingStrategy_AdjustOrderLimitRate.Text" xml:space="preserve">
    <value>Increase Order Limit (%)</value>
  </data>
  <data name="TradingStrategy_LimitOrderValueRate.Help" xml:space="preserve">
    <value>(% Max Order Value)&lt;br/&gt;The pricer defines a profit margin band around the current price where no order is issued. This parameter defines the value of the limit central orders as a percentage of the outer orders.</value>
  </data>
  <data name="TradingStrategy_LimitOrderValueRate.Text" xml:space="preserve">
    <value>Min Order Value (%)</value>
  </data>
  <data name="TradingStrategy_DefaultMaxOrderValueRate.Help" xml:space="preserve">
    <value>(Value % available btc/$ )&lt;br/&gt;When defining a new band, this the percentage of available resource allocated to the upper/lower bound order</value>
  </data>
  <data name="TradingStrategy_DefaultMaxOrderValueRate.Text" xml:space="preserve">
    <value>Default Max Order (%)</value>
  </data>
  <data name="TradingStrategy_DefaultBandWidthRate.Help" xml:space="preserve">
    <value>(Current Price +- X %)&lt;br/&gt;This defines the default upper/lower orders, within which the trading bot will place other open orders. Manual orders can discard this value, which is only used when there is no ask/bid existing order.</value>
  </data>
  <data name="TradingStrategy_DefaultBandWidthRate.Text" xml:space="preserve">
    <value>Default Band Width (%)</value>
  </data>
  <data name="TradingStrategy_VolumeGrowthLimitFactor.Help" xml:space="preserve">
    <value>This accounts for adjusting the trading band by increasing the outer bound orders thus the trading volume, when the available resources increase. If the extreme orders value multiplied by this parameter are found to be less than the available resource, those orders are increased using the following parameter.</value>
  </data>
  <data name="TradingStrategy_VolumeGrowthLimitFactor.Text" xml:space="preserve">
    <value>Volume Increase Factor</value>
  </data>
  <data name="TradingStrategy_VolumeGrowthRate.Help" xml:space="preserve">
    <value>This is the percentage of available resource used to increase the amount of the corresponding outer order</value>
  </data>
  <data name="TradingStrategy_VolumeGrowthRate.Text" xml:space="preserve">
    <value>Volume Growth Rate (%)</value>
  </data>
  <data name="TradingUrls_Export.Text" xml:space="preserve">
    <value>Export Trading Urls</value>
  </data>
  <data name="TradingUrls_Import.Text" xml:space="preserve">
    <value>Import Trading Urls</value>
  </data>
  <data name="RuleEngineSettings`1_EnableStopWatch.Help" xml:space="preserve">
    <value>You can optionally enable a stop watch to record engine event timings in dnn event log. The "DebugInfo" Log type must be activated. The measurements give indications of the firewall overhead.</value>
  </data>
  <data name="RuleEngineSettings`1_EnableStopWatch.Text" xml:space="preserve">
    <value>Enable Debug Timer</value>
  </data>
  <data name="TransformList_Export.Text" xml:space="preserve">
    <value>Export Transformations</value>
  </data>
  <data name="TransformList_Import.Text" xml:space="preserve">
    <value>Import Transformations</value>
  </data>
  <data name="ActionProvider`1_SleepTime.Help" xml:space="preserve">
    <value>You can optionally define a period to wait after the action is performed</value>
  </data>
  <data name="ActionProvider`1_SleepTime.Text" xml:space="preserve">
    <value>Sleep Time</value>
  </data>
  <data name="TradingStrategyBase_AskReserveRate.Help" xml:space="preserve">
    <value>This is the percentage of btcs you keep off trading. Note that if the available resource decrease, so does the reserved resource</value>
  </data>
  <data name="TradingStrategyBase_AskReserveRate.Text" xml:space="preserve">
    <value>Ask Reserve (%)</value>
  </data>
  <data name="TradingStrategyBase_BidReserveRate.Help" xml:space="preserve">
    <value>This is the percentage of usds you keep off trading. Note that if the available resource decrease, so does the reserved resource</value>
  </data>
  <data name="TradingStrategyBase_BidReserveRate.Text" xml:space="preserve">
    <value>Bid Reserve (%)</value>
  </data>
  <data name="TradingStrategy_LimitOrderMarginRate.Help" xml:space="preserve">
    <value>(% Order Price)&lt;br/&gt;The central margin band where no orders are issued is defined by the exchange transaction fee and an additional margin defined by this parameter as a percentage of the current price.</value>
  </data>
  <data name="TradingStrategy_LimitOrderMarginRate.Text" xml:space="preserve">
    <value>Min Order Margin (%)</value>
  </data>
  <data name="RuleEngineSettings`1_EnableSimpleLogs.Help" xml:space="preserve">
    <value>The Debug Timer generates a lot of dnn events for each. The simple logger only logs run start/end together with dumped variables serialized if enabled</value>
  </data>
  <data name="RuleEngineSettings`1_EnableSimpleLogs.Text" xml:space="preserve">
    <value>Enable Simple Logger</value>
  </data>
  <data name="VariableInfo`1_Value.Header" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="TradingStrategy_BandWidthMarginRate.Help" xml:space="preserve">
    <value>If the ticker gets too close to one of the extreme orders by this percentage, a new bandwidth is defined and the open orders broken up to this new band.</value>
  </data>
  <data name="TradingStrategy_BandWidthMarginRate.Text" xml:space="preserve">
    <value>Band Margin Rate (N.A.)</value>
  </data>
  <data name="TradingStrategy_InterTradeReserve.Help" xml:space="preserve">
    <value>This the percentage of resources alocated to trading reserved for subsequent bot run.</value>
  </data>
  <data name="TradingStrategy_InterTradeReserve.Text" xml:space="preserve">
    <value>Inter Trade Reserve (%)</value>
  </data>
  <data name="ActionProvider`1_AlternateAction.Help" xml:space="preserve">
    <value>You can optionally define here the action to be performed when the condition is not met</value>
  </data>
  <data name="ActionProvider`1_AlternateAction.Text" xml:space="preserve">
    <value>Alternate Action</value>
  </data>
  <data name="ActionProvider`1_Condition.Help" xml:space="preserve">
    <value>Define her ethe condition to be evaluated</value>
  </data>
  <data name="ActionProvider`1_Condition.Text" xml:space="preserve">
    <value>Condition</value>
  </data>
  <data name="ActionProvider`1_ConditionalAction.Help" xml:space="preserve">
    <value>Check for a condition to be evaluate before the action is performed. You can optionallly provide an alternate action to be peformed when the condition is not met</value>
  </data>
  <data name="ActionProvider`1_ConditionalAction.Text" xml:space="preserve">
    <value>Conditional Action</value>
  </data>
  <data name="GetDepositAddress.Text" xml:space="preserve">
    <value>Get Deposit Address</value>
  </data>
  <data name="TradingStrategy_CancelOrderLimitRate.Help" xml:space="preserve">
    <value>In case of varying order density, this attempts to maintain the desired price distribution/density. An order is cancelled if the span between that order and the next one is found smaller than the following span by less than the percentage defined by this parameter.</value>
  </data>
  <data name="TradingStrategy_CancelOrderLimitRate.Text" xml:space="preserve">
    <value>Cancel Order Limit</value>
  </data>
  <data name="ActionProvider`1_AddSleepTime.Help" xml:space="preserve">
    <value>You can optionally define a time span to wait after the action was performed. This is useful for instance if you're constrained by rate cap on external web requests.</value>
  </data>
  <data name="ActionProvider`1_AddSleepTime.Text" xml:space="preserve">
    <value>Add Sleep Time</value>
  </data>
  <data name="BotFarmInfo`1_Bots.Help" xml:space="preserve">
    <value>Each bot has its own schedule and rule engine. You may use the import/export feature to copy elements between bots, yet you should always start with making sure that the target bot has got the needed providers properly registered.</value>
  </data>
  <data name="BotFarmInfo`1_DisplayBotConfig.Help" xml:space="preserve">
    <value>If enabled, a read only version of the bot is displayed to the end-user together with the editable parameters.</value>
  </data>
  <data name="BotFarmInfo`1_DisplayBotConfig.Text" xml:space="preserve">
    <value>Display Bot Config</value>
  </data>
  <data name="FirewallConfig_RestartParam.Help" xml:space="preserve">
    <value>Enter here a string, which when found in the url will trigger an app restart. As with recovery string, it should be secret, secured and complex enough</value>
  </data>
  <data name="FirewallConfig_RestartParam.Text" xml:space="preserve">
    <value>Restart Param</value>
  </data>
  <data name="VariableInfo_VariableType.Help" xml:space="preserve">
    <value>This is the .Net type for the variable</value>
  </data>
  <data name="VariableInfo_VariableType.Text" xml:space="preserve">
    <value>Variable Type</value>
  </data>
  <data name="ExpressionVariableInfo`1_AdvancedExpression.Help" xml:space="preserve">
    <value>Check to display advanced parameters</value>
  </data>
  <data name="ExpressionVariableInfo`1_AdvancedExpression.Text" xml:space="preserve">
    <value>Advanced Expression</value>
  </data>
  <data name="ExpressionVariableInfo`1_SimpleExpression.Help" xml:space="preserve">
    <value>The simple display lets you edit the expression text only</value>
  </data>
  <data name="ExpressionVariableInfo`1_SimpleExpression.Text" xml:space="preserve">
    <value>Simple Display</value>
  </data>
  <data name="LoginInfo_ClearPassword.Help" xml:space="preserve">
    <value>you should only use that mode when noone can see your screen. Accordingly, you should switch back not displaying your password after editing. </value>
  </data>
  <data name="LoginInfo_ClearPassword.Text" xml:space="preserve">
    <value>Password (clear text)</value>
  </data>
  <data name="LoginInfo_DisplayPasswordChars.Help" xml:space="preserve">
    <value>You can choose to edit the password in clear chars.</value>
  </data>
  <data name="LoginInfo_DisplayPasswordChars.Text" xml:space="preserve">
    <value>Display Password chars</value>
  </data>
  <data name="LoginInfo_HiddenPassword.Help" xml:space="preserve">
    <value>Enter the credentials password</value>
  </data>
  <data name="LoginInfo_HiddenPassword.Text" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="LoginInfo_UserName.Help" xml:space="preserve">
    <value>Enter the credentials username</value>
  </data>
  <data name="LoginInfo_UserName.Text" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="Variables_ShowAvailableTypes.Help" xml:space="preserve">
    <value>You can edit the list of .Net types available for variable declaration.</value>
  </data>
  <data name="Variables_ShowAvailableTypes.Text" xml:space="preserve">
    <value>Display Available Types</value>
  </data>
  <data name="TradingStrategyBase_Reserve.Header" xml:space="preserve">
    <value>Reserve</value>
  </data>
  <data name="TradingStrategy_TradingBand.Header" xml:space="preserve">
    <value>Trading Band</value>
  </data>
  <data name="TradingStrategy_Updates.Header" xml:space="preserve">
    <value>Order updates</value>
  </data>
  <data name="TradingStrategy_AskOrderAmountExpression.Help" xml:space="preserve">
    <value>This is the expression to compute an ask order amount given its price. It is used both for new orders and existing order updates. For advanced editing, the variables are brought by a Flee expression context owner with .Net type TradingContext.</value>
  </data>
  <data name="TradingStrategy_AskOrderAmountExpression.Text" xml:space="preserve">
    <value>Ask Order Amount</value>
  </data>
  <data name="TradingStrategy_BidOrderAmountExpression.Help" xml:space="preserve">
    <value>This is the expression to compute a bid order amount given its price. It is used both for new orders and existing order updates. For advanced editing, the variables are brought by a Flee expression context owner with .Net type TradingContext.</value>
  </data>
  <data name="TradingStrategy_BidOrderAmountExpression.Text" xml:space="preserve">
    <value>Bid Order Amount</value>
  </data>
  <data name="TradingStrategy_Expressions.Header" xml:space="preserve">
    <value>Expressions</value>
  </data>
  <data name="TradingStrategy_MaxBidOrderPriceExpression.Help" xml:space="preserve">
    <value>This defines how new inner bid orders are defined starting from the highest existing bid order, getting closer to the current price, until the central margin band is reached.. For advanced editing, the variables are brought by a Flee expression context owner with .Net type TradingContext.</value>
  </data>
  <data name="TradingStrategy_MaxBidOrderPriceExpression.Text" xml:space="preserve">
    <value>Max Bid Order Price</value>
  </data>
  <data name="TradingStrategy_MinAskOrderPriceExpression.Help" xml:space="preserve">
    <value>This defines how new inner ask orders are defined starting from the lowest existing ask order, getting closer to the current price, until the central margin band is reached.. For advanced editing, the variables are brought by a Flee expression context owner with .Net type TradingContext.</value>
  </data>
  <data name="TradingStrategy_MinAskOrderPriceExpression.Text" xml:space="preserve">
    <value>Min Ask Order Price</value>
  </data>
  <data name="BotFarmInfo`1_UserBots.Help" xml:space="preserve">
    <value>Authorized users may access and activate their bot in the module as defined in the module settings.</value>
  </data>
  <data name="BotFarmInfo`1_UserBots.Text" xml:space="preserve">
    <value>Define User enabled bots with restricted parameters</value>
  </data>
  <data name="UserBotSettings`1_MasterBot.Header" xml:space="preserve">
    <value>Master Bot</value>
  </data>
  <data name="UserBotSettings`1_Parameters.Header" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="KeeperModuleSettings_DisplayBotConfig.Help" xml:space="preserve">
    <value>Check if you want to be display a readonly version of the master bot together with the user variables </value>
  </data>
  <data name="KeeperModuleSettings_DisplayBotConfig.Text" xml:space="preserve">
    <value>Display Bot Config</value>
  </data>
  <data name="KeeperModuleSettings_EnableUserBots.Help" xml:space="preserve">
    <value>This is defined at the host level in the main configuration form</value>
  </data>
  <data name="KeeperModuleSettings_EnableUserBots.Text" xml:space="preserve">
    <value>User Bots Enabled</value>
  </data>
  <data name="KeeperModuleSettings_UserBot.Help" xml:space="preserve">
    <value>This is a readonly version of the master bot</value>
  </data>
  <data name="KeeperModuleSettings_UserBot.Text" xml:space="preserve">
    <value>Master Bot</value>
  </data>
  <data name="KeeperModuleSettings_UserBotName.Help" xml:space="preserve">
    <value>Choose here which of the available user bots this specific module instance should display</value>
  </data>
  <data name="KeeperModuleSettings_UserBotName.Text" xml:space="preserve">
    <value>Selected User Bot</value>
  </data>
  <data name="KeeperModuleSettings_UserBots.Header" xml:space="preserve">
    <value>User Bots</value>
  </data>
  <data name="UserBotInfo_BotCallHistory.Help" xml:space="preserve">
    <value>Each bot call is recorder with a dump of computed variables</value>
  </data>
  <data name="UserBotInfo_BotCallHistory.Text" xml:space="preserve">
    <value>Bot Call Dumps</value>
  </data>
  <data name="UserBotInfo_Configuration.Header" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="UserBotInfo_History.Header" xml:space="preserve">
    <value>Recent History</value>
  </data>
  <data name="NamedEntity_Name.Required" xml:space="preserve">
    <value>Name Required</value>
  </data>
  <data name="BotInfo`1_LogPath.Help" xml:space="preserve">
    <value>This the path, relative to the host folder, where the bot history logs are saved.</value>
  </data>
  <data name="BotInfo`1_LogPath.Text" xml:space="preserve">
    <value>Logs File Path</value>
  </data>
  <data name="CacheableAction`1_Specifics.Header" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="WebAction`1_WebRequest.Header" xml:space="preserve">
    <value>Web</value>
  </data>
  <data name="UserBotSettings`1_Compress.Help" xml:space="preserve">
    <value>If enabled, serialized user settings and history will be compressed before it is saved after each run</value>
  </data>
  <data name="UserBotSettings`1_Compress.Text" xml:space="preserve">
    <value>Compress User Data</value>
  </data>
  <data name="UserBotSettings`1_Encrypt.Help" xml:space="preserve">
    <value>If enabled (default), user date is encrypted before it is saved after each run</value>
  </data>
  <data name="UserBotSettings`1_Encrypt.Text" xml:space="preserve">
    <value>Encrypt</value>
  </data>
  <data name="WebRequestInfo`1_TimeOut.Help" xml:space="preserve">
    <value>Enter the maximum the web client must wait before the request times out.</value>
  </data>
  <data name="WebRequestInfo`1_TimeOut.Text" xml:space="preserve">
    <value>Time Out</value>
  </data>
  <data name="WebRequestInfo`1_UseProxyPool.Help" xml:space="preserve">
    <value>you can optionally associate a proxy with your web request, from a pool of proxies previously instanciated.</value>
  </data>
  <data name="WebRequestInfo`1_UseProxyPool.Text" xml:space="preserve">
    <value>Use Proxy Pool</value>
  </data>
  <data name="BotInfo`1_TaskQueueInfo.Help" xml:space="preserve">
    <value>Define here the specific timings and thread nb for the asynchronous queue to be configured</value>
  </data>
  <data name="BotInfo`1_TaskQueueInfo.Text" xml:space="preserve">
    <value>Task Queue Details</value>
  </data>
  <data name="BotInfo`1_UseTaskQueue.Help" xml:space="preserve">
    <value>If enabled, the bot is run asynchronously using a customizable task queue, with multi threading available.</value>
  </data>
  <data name="BotInfo`1_UseTaskQueue.Text" xml:space="preserve">
    <value>Asynchronous Queue</value>
  </data>
  <data name="RuleEngineSettings`1_DumpAllVars.Help" xml:space="preserve">
    <value>When checked, all the variables computed during the bot's execution are dumped.</value>
  </data>
  <data name="RuleEngineSettings`1_DumpAllVars.Text" xml:space="preserve">
    <value>Dump all variables</value>
  </data>
  <data name="WebBotHistory_CallHistory.Header" xml:space="preserve">
    <value>Recent Runs</value>
  </data>
  <data name="RuleEngineSettings`1_DumpVariables.Help" xml:space="preserve">
    <value>Enter here a comma separated list of variable names, to be included in the run dumps</value>
  </data>
  <data name="RuleEngineSettings`1_DumpVariables.Text" xml:space="preserve">
    <value>Dump Variables</value>
  </data>
  <data name="WebBotHistory_LastRun.Help" xml:space="preserve">
    <value>This is the date and time the bot was run last.</value>
  </data>
  <data name="WebBotHistory_LastRun.Text" xml:space="preserve">
    <value>Last Run</value>
  </data>
  <data name="ActionProviderSettings`1_ExitAction.Help" xml:space="preserve">
    <value>When checked, the action runs and then stops the rest of the current action sequence from being run in turn</value>
  </data>
  <data name="ActionProviderSettings`1_ExitAction.Text" xml:space="preserve">
    <value>Exit Action</value>
  </data>
  <data name="LoginInfo_Disabled.Help" xml:space="preserve">
    <value>This indicates if you credentials were disabled during a previous run. To enable you login again, please update your password.</value>
  </data>
  <data name="LoginInfo_Disabled.Text" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="ObjectActionsProvider`1_ObjectActions.Help" xml:space="preserve">
    <value>You must first add the type of the object you wish to act on.</value>
  </data>
  <data name="ObjectActionsProvider`1_ObjectActions.Text" xml:space="preserve">
    <value>You can can set properties or call procedures on target typed objects here</value>
  </data>
  <data name="ObjectActionsProvider`1_Specifics.Header" xml:space="preserve">
    <value>Object Actions</value>
  </data>
  <data name="ObjectActions_ExpressionTypes.Help" xml:space="preserve">
    <value>On each type, you can define property setters and method call actions</value>
  </data>
  <data name="ObjectActions_ExpressionTypes.Text" xml:space="preserve">
    <value>Add new items to the above drop down list by declaring new types here</value>
  </data>
  <data name="ObjectActions_ShowAvailableTypes.Help" xml:space="preserve">
    <value>Displays the types available for action</value>
  </data>
  <data name="ObjectActions_ShowAvailableTypes.Text" xml:space="preserve">
    <value>Display available types</value>
  </data>
  <data name="ObjectAction`1_Instance.Header" xml:space="preserve">
    <value>Instance</value>
  </data>
  <data name="ObjectAction`1_Instance.Help" xml:space="preserve">
    <value>Typically a local variable, leave empty if you want to access a static member</value>
  </data>
  <data name="ObjectAction`1_Instance.Text" xml:space="preserve">
    <value>This is an expression for the object on which you wish to perform an action</value>
  </data>
  <data name="ObjectAction_ObjectType.Help" xml:space="preserve">
    <value>This is the .Net type of the object you wish to act on</value>
  </data>
  <data name="ObjectAction_ObjectType.Text" xml:space="preserve">
    <value>Object Type</value>
  </data>
  <data name="ObjectAction`1_Parameters.Header" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="SetObjectProperty`1_Property.Header" xml:space="preserve">
    <value>Property</value>
  </data>
  <data name="SetObjectProperty`1_PropertyName.Help" xml:space="preserve">
    <value>This is the name of the property to be set (readonly properties are filtered out)</value>
  </data>
  <data name="SetObjectProperty`1_PropertyName.Text" xml:space="preserve">
    <value>Property Name</value>
  </data>
  <data name="SetObjectProperty`1_Value.Help" xml:space="preserve">
    <value>Enter an object expression for the value to set. As it is passed as an object by reflection, you must ensure type safety by yourself</value>
  </data>
  <data name="SetObjectProperty`1_Value.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="WebProxyInfo_Address.Help" xml:space="preserve">
    <value>This is the URI of the proxy of the form http(s)://IPorDomain:Port</value>
  </data>
  <data name="WebProxyInfo_Address.Text" xml:space="preserve">
    <value>Uri</value>
  </data>
  <data name="WebProxyInfo_Available.Help" xml:space="preserve">
    <value>This states if the proxy is currently available for use (enabled and recently tested)</value>
  </data>
  <data name="WebProxyInfo_Available.Text" xml:space="preserve">
    <value>Available</value>
  </data>
  <data name="WebProxyInfo_Disabled.Help" xml:space="preserve">
    <value>This is a global switch to disable the proxy</value>
  </data>
  <data name="WebProxyInfo_Disabled.Text" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="WebProxyInfo_Lag.Help" xml:space="preserve">
    <value>This is the last measured response time, requesting www.google.com</value>
  </data>
  <data name="WebProxyInfo_Lag.Text" xml:space="preserve">
    <value>Response Time</value>
  </data>
  <data name="WebProxyInfo_LastTestDate.Help" xml:space="preserve">
    <value>This is the date the proxy was last tested</value>
  </data>
  <data name="WebProxyInfo_LastTestDate.Text" xml:space="preserve">
    <value>Last tested</value>
  </data>
  <data name="WebProxyPool_CheckPeriod.Help" xml:space="preserve">
    <value>This is the period a valid proxy keeps enabled before it is checked again</value>
  </data>
  <data name="WebProxyPool_CheckPeriod.Text" xml:space="preserve">
    <value>Check Period</value>
  </data>
  <data name="WebProxyPool_CheckTaskQueueInfo.Help" xml:space="preserve">
    <value>Proxies are checked within an asynchronous TaskQueue. This sets the parameters for this task queue.</value>
  </data>
  <data name="WebProxyPool_CheckTaskQueueInfo.Text" xml:space="preserve">
    <value>Check Task Queue</value>
  </data>
  <data name="WebProxyPool_Proxies.Header" xml:space="preserve">
    <value>Proxies</value>
  </data>
  <data name="WebProxyPool_Proxies.Help" xml:space="preserve">
    <value>You can add individual proxies here or gather proxies dynamically at run time.</value>
  </data>
  <data name="WebProxyPool_Proxies.Text" xml:space="preserve">
    <value>Those are the individual proxies contained in the pool</value>
  </data>
  <data name="WebProxyPool_TimeOut.Help" xml:space="preserve">
    <value>This is the maximum response duration for a proxy to validate</value>
  </data>
  <data name="WebProxyPool_TimeOut.Text" xml:space="preserve">
    <value>Time Out</value>
  </data>
  <data name="WebProxyPool_Verification.Header" xml:space="preserve">
    <value>Verification</value>
  </data>
  <data name="CallObjectMethod`1_MethodName.Help" xml:space="preserve">
    <value>Select the name of the method you want to call on the target object</value>
  </data>
  <data name="CallObjectMethod`1_MethodName.Text" xml:space="preserve">
    <value>Method Name</value>
  </data>
  <data name="ObjectAction`1_Parameters.Help" xml:space="preserve">
    <value>Add the .Net types corresponding to the choosen constructor parameters first.</value>
  </data>
  <data name="ObjectAction`1_Parameters.Text" xml:space="preserve">
    <value>Enter the parameters to pass to your method or in case of an indexed property</value>
  </data>
  <data name="StringFilterProvider`1_FilterMode.Help" xml:space="preserve">
    <value>There are 3 filter modes. You can either apply a series of string transformations, use xpath queries, or apply token replace</value>
  </data>
  <data name="StringFilterProvider`1_FilterMode.Text" xml:space="preserve">
    <value>Filter Mode</value>
  </data>
  <data name="StringFilterProvider`1_XPathSource.Help" xml:space="preserve">
    <value>Here you define the xpath query to be performed. You can choose to return a single or a list of values. Values may be individual strings or dictionaries of subselects.</value>
  </data>
  <data name="StringFilterProvider`1_XPathSource.Text" xml:space="preserve">
    <value>XPath configuration</value>
  </data>
  <data name="SubSelects_AddNew.Text" xml:space="preserve">
    <value>Add Sub Select</value>
  </data>
  <data name="TransformsList.Text" xml:space="preserve">
    <value>Transforms List</value>
  </data>
  <data name="Xpath.Text" xml:space="preserve">
    <value>XPath Select</value>
  </data>
  <data name="XPathInfo_IsHtmlContent.Help" xml:space="preserve">
    <value>If checked, the HtmlAgilityPack library is used instead of the usual System.Xml namespace. This allows for malformed html parsing</value>
  </data>
  <data name="XPathInfo_IsHtmlContent.Text" xml:space="preserve">
    <value>Html Content</value>
  </data>
  <data name="XPathInfo_Expression.Help" xml:space="preserve">
    <value>Enter here your XPath query or an dynamic expression of it</value>
  </data>
  <data name="XPathInfo_Expression.Text" xml:space="preserve">
    <value>XPath Expression</value>
  </data>
  <data name="XPathInfo_SelectTree.Help" xml:space="preserve">
    <value>If checked, you can choose to return dictionaries of string and sub queries results rather than scalars.</value>
  </data>
  <data name="XPathInfo_SelectTree.Text" xml:space="preserve">
    <value>Use Sub Selects</value>
  </data>
  <data name="XPathInfo_SingleSelect.Help" xml:space="preserve">
    <value>If checked, the first object of the list is returned if any, null otherwise (instead of an empty list)</value>
  </data>
  <data name="XPathInfo_SingleSelect.Text" xml:space="preserve">
    <value>Single Select</value>
  </data>
  <data name="XPathInfo_SubSelects.Help" xml:space="preserve">
    <value>You can create subselects to be performed against the returned node from the main query, and associate each of them with a key in a dictionary.</value>
  </data>
  <data name="XPathInfo_SubSelects.Text" xml:space="preserve">
    <value>Sub Selects Dictionary</value>
  </data>
  <data name="WebRequestInfo`1_ProxyExpression.Help" xml:space="preserve">
    <value>Enter here an Expression that resolves into an instance of class WebProxyPool (typically a variable) </value>
  </data>
  <data name="WebRequestInfo`1_ProxyExpression.Text" xml:space="preserve">
    <value>ProxyPool Expression</value>
  </data>
  <data name="WebProxyInfo_AvailableNb.Help" xml:space="preserve">
    <value>This number represents the proxy health. 1 is available, and any null or negative number is unavailable. On each failed test, the number is descreased, together with the probability to perform the test on subsequent checks. It needs several positive checks to restart a long failing proxy.</value>
  </data>
  <data name="WebProxyInfo_AvailableNb.Text" xml:space="preserve">
    <value>Availability</value>
  </data>
  <data name="WebProxyPool_IsDefault.Help" xml:space="preserve">
    <value>Sets the Pool instance as global default static pool on property setter.</value>
  </data>
  <data name="WebProxyPool_IsDefault.Text" xml:space="preserve">
    <value>Is Default</value>
  </data>
  <data name="WebRequestInfo`1_UseDefaultProxyPool.Help" xml:space="preserve">
    <value>If checked, the engine automatically detects any previously created proxy pool with default property enabled.</value>
  </data>
  <data name="WebRequestInfo`1_UseDefaultProxyPool.Text" xml:space="preserve">
    <value>Use Default Proxy Pool</value>
  </data>
  <data name="TradingStrategyBase_ClearAsks.Help" xml:space="preserve">
    <value>If checked, the bot will cancel all ask orders</value>
  </data>
  <data name="TradingStrategyBase_ClearAsks.Text" xml:space="preserve">
    <value>Clear existing Asks</value>
  </data>
  <data name="TradingStrategyBase_ClearBids.Help" xml:space="preserve">
    <value>If checked, the bot will cancel all bid orders</value>
  </data>
  <data name="TradingStrategyBase_ClearBids.Text" xml:space="preserve">
    <value>Clear existing Bids</value>
  </data>
  <data name="TradingStrategy_MaxBandWidthRate.Help" xml:space="preserve">
    <value>This sets an outer bound for the trading band outer orders. When outside of that bound, the corresponding half band is redefined.</value>
  </data>
  <data name="TradingStrategy_MaxBandWidthRate.Text" xml:space="preserve">
    <value>Max Band width (%)</value>
  </data>
  <data name="TradingStrategy_MinBandWidthRate.Help" xml:space="preserve">
    <value>This sets an inner bound for the trading band outer orders. When outside of that bound, the corresponding half band is redefined.</value>
  </data>
  <data name="TradingStrategy_MinBandWidthRate.Text" xml:space="preserve">
    <value>Min Band width (%)</value>
  </data>
  <data name="BotFarmInfo`1_Schedule.Help" xml:space="preserve">
    <value>The DNN scheduler task running the farm is set to run every minute. &lt;p&gt; Now each bot can be individually scheduled  to a shorter period. Accordingly, this minimum schedule allows to run the farm several times within each DNN scheduler period. The corresponding sub period should be less than the shortest bot period. Also, if you have several bots, some of which require a lengthy execution, you should make sure to configure them to run asynchronously. &lt;/p&gt;&lt;p&gt;Note, that unless you get a constant traffic, you'll get the most accurate results with timer mode. The asynchronous autoping bot helps mitigating that effect&lt;/p&gt;</value>
  </data>
  <data name="BotFarmInfo`1_Schedule.Text" xml:space="preserve">
    <value>Min Schedule</value>
  </data>
  <data name="PortalKeeperConfig_FirewallConfig.Help" xml:space="preserve">
    <value>This first tab contains the configuration form for the firewall and custom errors. The firewall engine contains rules, which deal with processing incoming requests.</value>
  </data>
  <data name="XForwardedIP.Text" xml:space="preserve">
    <value>XForwarded IP</value>
  </data>
  <data name="BotInfo`1_RunningServers.Help" xml:space="preserve">
    <value>In case of a web farm, you can optionnally enter a comma separated list of server names, on which the bot will exclusively be run.</value>
  </data>
  <data name="BotInfo`1_RunningServers.Text" xml:space="preserve">
    <value>Running Servers</value>
  </data>
  <data name="TradingStrategy_VolumeResetLimitFactor.Help" xml:space="preserve">
    <value>If an extreme order value multiplied by this factor becomes higher than the available resources of that kind, then all open orders of that kind are cancelled to reset the band.</value>
  </data>
  <data name="TradingStrategy_VolumeResetLimitFactor.Text" xml:space="preserve">
    <value>Low Resource Reset Factor</value>
  </data>
  <data name="WebAction`1_HeaderParameters.Help" xml:space="preserve">
    <value>You can specify static or variable parameters to be included in the http request header.</value>
  </data>
  <data name="WebAction`1_HeaderParameters.Text" xml:space="preserve">
    <value>Header Parameters</value>
  </data>
  <data name="WebRequestInfo`1_RetryNb.Help" xml:space="preserve">
    <value>Enter here the maximum number of times the  web request should be resent when a webexception is raised.</value>
  </data>
  <data name="WebRequestInfo`1_RetryNb.Text" xml:space="preserve">
    <value>Retry Number</value>
  </data>
  <data name="BotFarmInfo`1_EnableLogs.Help" xml:space="preserve">
    <value>When enabled, a dnn event log is created at the beginning and at the end of each web farm run. Event log is of log type "Debug", which isn't monitored by default.</value>
  </data>
  <data name="BotFarmInfo`1_EnableLogs.Text" xml:space="preserve">
    <value>Enable Logs</value>
  </data>
  <data name="BotFarmInfo`1_TechnicalSettings.Header" xml:space="preserve">
    <value>Technical Settings</value>
  </data>
  <data name="LoginInfo_HiddenPassword.Required" xml:space="preserve">
    <value>Password Required</value>
  </data>
  <data name="LocationSettings_BackupsNb.Help" xml:space="preserve">
    <value>When saving config changes, backup can be saved in a dedicated folder next to the config file. This sets the number of old backups to keep</value>
  </data>
  <data name="LocationSettings_BackupsNb.Text" xml:space="preserve">
    <value>Backups Number</value>
  </data>
  <data name="BotInfoEvent_PayLoad.Help" xml:space="preserve">
    <value>This is the XmlSerialized value of all bot variables dumped by the end of the bot run</value>
  </data>
  <data name="UserBotInfo_NoOverride.Help" xml:space="preserve">
    <value>The platform allows site administrators to occasionally propose updated default values for selected variable to be overwritten, typically with better values. When checked, your set of variables won't be overwritten when given the opportunity, unless the overwrite is explicitly forced. A platform administrator should warn you when such an upgrade opportunity is given.</value>
  </data>
  <data name="UserBotInfo_NoOverride.Text" xml:space="preserve">
    <value>No Admin Updates</value>
  </data>
  <data name="UserVariableInfo_ForceOverride.Help" xml:space="preserve">
    <value>When checked, all user values will be overriden with the default value regardless of their choice to lock their value</value>
  </data>
  <data name="UserVariableInfo_ForceOverride.Text" xml:space="preserve">
    <value>Force Override</value>
  </data>
  <data name="UserVariableInfo_Override.Help" xml:space="preserve">
    <value>When checked the default bot variable value will replace any previously saved user value on subsequent bot runs. Users can choose to lock their variables unless the override is forced.</value>
  </data>
  <data name="UserVariableInfo_Override.Text" xml:space="preserve">
    <value>Override User Data</value>
  </data>
  <data name="WebBotHistory_BotCallHistory.Help" xml:space="preserve">
    <value>You'll find here detailed information about the last bot runs, which can prove helpful to diagnose potential issues</value>
  </data>
  <data name="WebBotHistory_BotCallHistory.Text" xml:space="preserve">
    <value>Recent Runs History</value>
  </data>
  <data name="UserBotSettings`1_FormerName.Help" xml:space="preserve">
    <value>User bots are saved as serialized, compressed and encrypted in user personalisation profiles entries registered with a key depending on the user bot names. If you  change the user bot name, you can provide here the previous name to have the existing user bots properly migrated with the new key. </value>
  </data>
  <data name="UserBotSettings`1_FormerName.Text" xml:space="preserve">
    <value>Previous Name</value>
  </data>
  <data name="APICredentials_Key.Help" xml:space="preserve">
    <value>Enter here the Key as generated on your Echange account settings</value>
  </data>
  <data name="APICredentials_Key.Required" xml:space="preserve">
    <value>API Key is required</value>
  </data>
  <data name="APICredentials_Key.Text" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="APICredentials_Secret.Help" xml:space="preserve">
    <value>Enter here the Secret as generated on your Echange account settings</value>
  </data>
  <data name="APICredentials_Secret.Required" xml:space="preserve">
    <value>API Secret is required</value>
  </data>
  <data name="APICredentials_Secret.Text" xml:space="preserve">
    <value>Secret</value>
  </data>
  <data name="ExchangeCredentials_APIKey.Help" xml:space="preserve">
    <value>Those are the parameters generated from within your account settings to grant access to the bot</value>
  </data>
  <data name="ExchangeCredentials_APIKey.Text" xml:space="preserve">
    <value>API Key</value>
  </data>
  <data name="ExchangeCredentials_Login.Help" xml:space="preserve">
    <value>Those are the username and password from your account to connect to the Exchange platform</value>
  </data>
  <data name="ExchangeCredentials_Login.Text" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="ExchangeCredentials_TradingFee.Help" xml:space="preserve">
    <value>Enter here the trading fees percentage associated with your account</value>
  </data>
  <data name="ExchangeCredentials_TradingFee.Text" xml:space="preserve">
    <value>Custom Trading Fees</value>
  </data>
  <data name="LoginInfo_UserName.Required" xml:space="preserve">
    <value>User Name Required</value>
  </data>
  <data name="WebAction`1_IncludePostData.Help" xml:space="preserve">
    <value>Certain scenarios imply that some headers variable are computed based on the post data, for instance for signing an authenticated request. Check here to derive the post data from the above parameters  and include them as an additional variable string available to compute the headers variables.</value>
  </data>
  <data name="WebAction`1_IncludePostData.Text" xml:space="preserve">
    <value>Include Post Data</value>
  </data>
  <data name="WebAction`1_PostDataVar.Help" xml:space="preserve">
    <value>Enter here the name of the post data variable to be accessed from the headers variable definitions</value>
  </data>
  <data name="WebAction`1_PostDataVar.Text" xml:space="preserve">
    <value>Post Data Variable</value>
  </data>
  <data name="TradingStrategyBase_AskReserveAmount.Help" xml:space="preserve">
    <value>Since your available resources may change with orders getting executed, you may want to place an absolute reserve additionally to the percentage defined above. The resulting reserve will be computed as the max of both values</value>
  </data>
  <data name="TradingStrategyBase_AskReserveAmount.Text" xml:space="preserve">
    <value>Ask Reserve (btcs)</value>
  </data>
  <data name="TradingStrategyBase_BidReserveValue.Help" xml:space="preserve">
    <value>Since your available resources may change with orders getting executed, you may want to place an absolute reserve additionally to the percentage defined above. The resulting reserve will be computed as the max of both values</value>
  </data>
  <data name="TradingStrategyBase_BidReserveValue.Text" xml:space="preserve">
    <value>Bid Reserve (usds)</value>
  </data>
  <data name="TradingStrategyBase_NoAsks.Help" xml:space="preserve">
    <value>If checked, your bot will stop issueing new ask order (getting in)</value>
  </data>
  <data name="TradingStrategyBase_NoAsks.Text" xml:space="preserve">
    <value>No Ask</value>
  </data>
  <data name="TradingStrategyBase_NoBids.Help" xml:space="preserve">
    <value>If checked, your bot will stop issueing new bid order (clearing your position)</value>
  </data>
  <data name="TradingStrategyBase_NoBids.Text" xml:space="preserve">
    <value>No Bid</value>
  </data>
  <data name="ActionProviderSettings`1_CaptureException.Help" xml:space="preserve">
    <value>You can optionally capture any raised exception into a custom exception object variable to be used in subsequent rules/actions</value>
  </data>
  <data name="ActionProviderSettings`1_CaptureException.Text" xml:space="preserve">
    <value>Capture Exception</value>
  </data>
  <data name="ActionProviderSettings`1_ExceptionVarName.Help" xml:space="preserve">
    <value>Make this name specific to the action context to avoid collisions</value>
  </data>
  <data name="ActionProviderSettings`1_ExceptionVarName.Text" xml:space="preserve">
    <value>Exception Variable Name</value>
  </data>
  <data name="ActionProvider`1_CaptureRunDuration.Help" xml:space="preserve">
    <value>You can optionally capture the action run duration as a custom timespan object variable to be used in subsequent rules/actions</value>
  </data>
  <data name="ActionProvider`1_CaptureRunDuration.Text" xml:space="preserve">
    <value>Capture Run Duration</value>
  </data>
  <data name="ActionProvider`1_RunDurationVarName.Help" xml:space="preserve">
    <value>Make this name specific to the action context to avoid collisions</value>
  </data>
  <data name="ActionProvider`1_RunDurationVarName.Text" xml:space="preserve">
    <value>Duration Variable Name</value>
  </data>
  <data name="BotInfo`1_IncludeLastDump.Help" xml:space="preserve">
    <value>When checked, the last set of dumped variables will be loaded into the current run with each variable prefixed with "Last"</value>
  </data>
  <data name="BotInfo`1_IncludeLastDump.Text" xml:space="preserve">
    <value>Load Last Dump</value>
  </data>
  <data name="BotInfo`1_MasterBotDisabled.Help" xml:space="preserve">
    <value>This indicates if a user bot was associated to this bot definition and the corresponding master bot was disabled. In such a case, only user defined bots will be run with dedicated parameters.</value>
  </data>
  <data name="BotInfo`1_MasterBotDisabled.Text" xml:space="preserve">
    <value>Master Bot Disabled</value>
  </data>
  <data name="PingUrlInfo_AlertDuration.Help" xml:space="preserve">
    <value>This is the max request duration, above which an alert email is sent to signal the site slow down</value>
  </data>
  <data name="PingUrlInfo_AlertDuration.Text" xml:space="preserve">
    <value>Request Duration Thresold</value>
  </data>
  <data name="PingUrlInfo_AlertEmail.Help" xml:space="preserve">
    <value>This is the address, to which email alerts are sent</value>
  </data>
  <data name="PingUrlInfo_AlertEmail.Text" xml:space="preserve">
    <value>Email Address</value>
  </data>
  <data name="PingUrlInfo_AlertEmail.Validation" xml:space="preserve">
    <value>Please provide a valid email address</value>
  </data>
  <data name="PingUrlInfo_Alerts.Header" xml:space="preserve">
    <value>Alerts</value>
  </data>
  <data name="PingUrlInfo_AverageDurationString.Help" xml:space="preserve">
    <value>This is the average duration for a ping</value>
  </data>
  <data name="PingUrlInfo_AverageDurationString.Text" xml:space="preserve">
    <value>Average Duration</value>
  </data>
  <data name="PingUrlInfo_AverageDurationWOExtremsString.Help" xml:space="preserve">
    <value>This is the average duration, taking out min and max</value>
  </data>
  <data name="PingUrlInfo_AverageDurationWOExtremsString.Text" xml:space="preserve">
    <value>Average w/o extremes</value>
  </data>
  <data name="PingUrlInfo_Definition.Header" xml:space="preserve">
    <value>Definition</value>
  </data>
  <data name="PingUrlInfo_LastRun.Help" xml:space="preserve">
    <value>This is the date of the last ping (successful or not)</value>
  </data>
  <data name="PingUrlInfo_LastRun.Text" xml:space="preserve">
    <value>Last Run</value>
  </data>
  <data name="PingUrlInfo_LastRunDurationString.Help" xml:space="preserve">
    <value>This is the last ping duration (if available)</value>
  </data>
  <data name="PingUrlInfo_LastRunDurationString.Text" xml:space="preserve">
    <value>Last Duration</value>
  </data>
  <data name="PingUrlInfo_MaxDurationString.Help" xml:space="preserve">
    <value>This is the duration for the longest ping successfully run</value>
  </data>
  <data name="PingUrlInfo_MaxDurationString.Text" xml:space="preserve">
    <value>Max Duration</value>
  </data>
  <data name="PingUrlInfo_MinDurationString.Help" xml:space="preserve">
    <value>This is the duration for the shortest ping successfully run</value>
  </data>
  <data name="PingUrlInfo_MinDurationString.Text" xml:space="preserve">
    <value>Min Duration</value>
  </data>
  <data name="PingUrlInfo_NumberOfFailedPings.Text" xml:space="preserve">
    <value>Nb Failed Pings</value>
  </data>
  <data name="PingUrlInfo_NumberOfPings.Help" xml:space="preserve">
    <value>This is the total number of pings run</value>
  </data>
  <data name="PingUrlInfo_NumberOfPings.Text" xml:space="preserve">
    <value>Nb of Pings</value>
  </data>
  <data name="PingUrlInfo_NumberOfSucceedPings.Help" xml:space="preserve">
    <value>This is the total number of pings which completed successfully</value>
  </data>
  <data name="PingUrlInfo_NumberOfSucceedPings.Text" xml:space="preserve">
    <value>Nb Successful Pings</value>
  </data>
  <data name="PingUrlInfo_PingUrl.Help" xml:space="preserve">
    <value>This is the Url to send a HttpRequest to. On a DotNetNuke instance there is a dedicated KeepAlive.aspx page, which fire the Asp.Net engine without filling the site log with unwanted data. </value>
  </data>
  <data name="PingUrlInfo_PingUrl.Text" xml:space="preserve">
    <value>Ping Url</value>
  </data>
  <data name="PingUrlInfo_Schedule.Help" xml:space="preserve">
    <value>This is the period between 2 successive pings.</value>
  </data>
  <data name="PingUrlInfo_Schedule.Text" xml:space="preserve">
    <value>Schedule</value>
  </data>
  <data name="PingUrlInfo_SendAlertEmails.Help" xml:space="preserve">
    <value>You can optionnally choose to receive alert emails when the site slows down or stops responding</value>
  </data>
  <data name="PingUrlInfo_SendAlertEmails.Text" xml:space="preserve">
    <value>Send Alert Emails</value>
  </data>
  <data name="PingUrlInfo_Stats.Header" xml:space="preserve">
    <value>Statistics</value>
  </data>
  <data name="SimpleList`1PingUrlInfo.Text" xml:space="preserve">
    <value>List of Urls to Ping</value>
  </data>
  <data name="PingUrlInfo_AlertEmail.Required" xml:space="preserve">
    <value>a target email address is required to enable alerts</value>
  </data>
  <data name="ActionProvider`1_ConditonalSettings.Header" xml:space="preserve">
    <value>Conditional</value>
  </data>
  <data name="WebProxyPool_TestUri.Help" xml:space="preserve">
    <value>This the Url used to test that the proxy is functional</value>
  </data>
  <data name="WebProxyPool_TestUri.Text" xml:space="preserve">
    <value>Test Url</value>
  </data>
  <data name="WebRequestInfo`1_Url.Required" xml:space="preserve">
    <value>Url is Required</value>
  </data>
  <data name="CacheableAction`1_UseSingleton.Help" xml:space="preserve">
    <value>If checked, a single shared instance of the variable will be created instead of relying on the cache system</value>
  </data>
  <data name="CacheableAction`1_UseSingleton.Text" xml:space="preserve">
    <value>Use Singleton</value>
  </data>
  <data name="LoopActionProvider`1_CounterEval.Help" xml:space="preserve">
    <value>Enter a boolean expression to exit the loop</value>
  </data>
  <data name="LoopActionProvider`1_CounterEval.Text" xml:space="preserve">
    <value>Counter Eval</value>
  </data>
  <data name="LoopActionProvider`1_CounterStart.Help" xml:space="preserve">
    <value>Enter an Integer expression to compute the initial value for the counter</value>
  </data>
  <data name="LoopActionProvider`1_CounterStart.Text" xml:space="preserve">
    <value>Counter Start</value>
  </data>
  <data name="LoopActionProvider`1_CounterUpdate.Help" xml:space="preserve">
    <value>Enter an Integer expression to update the counter variable after each pass of the loop</value>
  </data>
  <data name="LoopActionProvider`1_CounterUpdate.Text" xml:space="preserve">
    <value>Counter Update</value>
  </data>
  <data name="LoopActionProvider`1_UseCounter.Help" xml:space="preserve">
    <value>Check if you want to use an Integer counter instead of an enumerated collection</value>
  </data>
  <data name="LoopActionProvider`1_UseCounter.Text" xml:space="preserve">
    <value>Use Counter</value>
  </data>
  <data name="WebProxyPool_MaxNbProxies.Help" xml:space="preserve">
    <value>This nb determines the max nb of proxies to be added to the pool</value>
  </data>
  <data name="WebProxyPool_MaxNbProxies.Text" xml:space="preserve">
    <value>Max Nb Proxies</value>
  </data>
  <data name="WebProxyPool_MinNbProxies.Help" xml:space="preserve">
    <value>This nb is used to determine when the pool needs updating, and when newly added proxies must be tested right away instead of being queued for later testing </value>
  </data>
  <data name="WebProxyPool_MinNbProxies.Text" xml:space="preserve">
    <value>Min Nb Proxies</value>
  </data>
  <data name="WebProxyPool_Size.Header" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="WebProxyPool_TestProxies.Help" xml:space="preserve">
    <value>Check if you want each proxy to be individually tested against a given url</value>
  </data>
  <data name="WebProxyPool_TestProxies.Text" xml:space="preserve">
    <value>Test Proxies</value>
  </data>
  <data name="WebProxyPool_TestXPath.Help" xml:space="preserve">
    <value>You can optionnally enter a xpath query to be tested against the response html. The proxy is validated only if the query returns some content</value>
  </data>
  <data name="WebProxyPool_TestXPath.Text" xml:space="preserve">
    <value>Test XPath</value>
  </data>
  <data name="WebRequestInfo`1_ProxyIsMandatory.Help" xml:space="preserve">
    <value>If checked, the httprequest will be executed only if a proxy is available from the pool and return an empty string otherwise.</value>
  </data>
  <data name="WebRequestInfo`1_ProxyIsMandatory.Text" xml:space="preserve">
    <value>Proxy Is Mandatory</value>
  </data>
  <data name="KeeperModuleSettings_AssignUserBot.Help" xml:space="preserve">
    <value>When User Bots are enabled, you can choose to assign a single user bot to this module instance. Users with View (resp. Edit) authorization will get a readonly (resp. editable) version of the user parameters defined together with the user bot. You can optionally choose to add a readonly version of the master bot  for documentation at the bottom of the user parameters form.</value>
  </data>
  <data name="KeeperModuleSettings_AssignUserBot.Text" xml:space="preserve">
    <value>Assign User Bot</value>
  </data>
  <data name="ExpressionVariableInfo`1_AsCompiledExpression.Help" xml:space="preserve">
    <value>If your variable is only to be used in subsequent Flee Expression, you can choose to postpone its evaluation and pass the compiled expression for direct integration in a wrapping expression, in order to optimize the resulting performances</value>
  </data>
  <data name="ExpressionVariableInfo`1_AsCompiledExpression.Text" xml:space="preserve">
    <value>As Compiled Expression</value>
  </data>
  <data name="pe_NbPages.Help" xml:space="preserve">
    <value>Enter the number of result pages that you want to include in the wath list.</value>
  </data>
  <data name="pe_NbPages.Text" xml:space="preserve">
    <value>Nb of Pages to monitor</value>
  </data>
  <data name="pe_Search.Header" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="pe_Watch.Header" xml:space="preserve">
    <value>Watch</value>
  </data>
  <data name="pe_What.Help" xml:space="preserve">
    <value>Enter here the type of business to place an alert on</value>
  </data>
  <data name="pe_What.Text" xml:space="preserve">
    <value>What ?</value>
  </data>
  <data name="pe_Where.Help" xml:space="preserve">
    <value>Enter here the address or location to center the search on</value>
  </data>
  <data name="pe_Where.Text" xml:space="preserve">
    <value>Where ?</value>
  </data>
  <data name="WebProxyInfo_CheckEnqueued.Help" xml:space="preserve">
    <value>Indicates that the proxy is currently planned for checking within a pool</value>
  </data>
  <data name="WebProxyInfo_CheckEnqueued.Text" xml:space="preserve">
    <value>Check planned </value>
  </data>
  <data name="WebProxyInfo_Credentials.Help" xml:space="preserve">
    <value>Enter here the credentials to connect to the proxy</value>
  </data>
  <data name="WebProxyInfo_Credentials.Text" xml:space="preserve">
    <value>Credentials</value>
  </data>
  <data name="WebProxyInfo_UseCredentials.Help" xml:space="preserve">
    <value>Check if your proxy requires specific credentials</value>
  </data>
  <data name="WebProxyInfo_UseCredentials.Text" xml:space="preserve">
    <value>Use Credentials</value>
  </data>
  <data name="VariableInfo`1_UseClone.Help" xml:space="preserve">
    <value>If checked, a clone of the variable is returned instead of the variable itself. This allows for subsequent modifications without the original variable being affected.</value>
  </data>
  <data name="VariableInfo`1_UseClone.Text" xml:space="preserve">
    <value>Use Clone</value>
  </data>
  <data name="DefineVarsActionProvider`1_GetFromHistory.Help" xml:space="preserve">
    <value>&lt;p&gt;When checked, the variables defined here are checked for the existence of an existing version within the execution context with the same name prefixed with "Last"; Any existing version replaces the new definition. &lt;/p&gt;&lt;p&gt; That allows you to define variables to be reused between each run, with a bot History configured to load last variable dump from history (from within the Bot History tab: previous run variables are loaded with their original key prefixed with "Last")&lt;/p&gt;</value>
  </data>
  <data name="DefineVarsActionProvider`1_GetFromHistory.Text" xml:space="preserve">
    <value>Report from History</value>
  </data>
  <data name="OutputAction`1_AddItems.Help" xml:space="preserve">
    <value>If the corresponding variable is found existing, and if its corresponding type allows it (Ilist, IDictionary or String), the result is added to the existing variable instead of replacing it.</value>
  </data>
  <data name="OutputAction`1_AddItems.Text" xml:space="preserve">
    <value>Add if Existing</value>
  </data>
  <data name="WebRequestInfo`1_Request.Header" xml:space="preserve">
    <value>Request</value>
  </data>
  <data name="WebRequestInfo`1_Url.Header" xml:space="preserve">
    <value>Url</value>
  </data>
  <data name="AbsoluteMapPath.Text" xml:space="preserve">
    <value>Full Map Path</value>
  </data>
  <data name="AdminPath.Text" xml:space="preserve">
    <value>Relative Path from Portal Root Directory</value>
  </data>
  <data name="ASCII.Text" xml:space="preserve">
    <value>ASCII</value>
  </data>
  <data name="BigEndianUnicode.Text" xml:space="preserve">
    <value>Big Endian Unicode</value>
  </data>
  <data name="DoUntil.Text" xml:space="preserve">
    <value>Do...Until False</value>
  </data>
  <data name="FileReadWriteActionProvider`1_Encoding.Help" xml:space="preserve">
    <value>As the provider deals with String variables, you must choose the encoding to apply</value>
  </data>
  <data name="FileReadWriteActionProvider`1_Encoding.Text" xml:space="preserve">
    <value>Encoding</value>
  </data>
  <data name="FileAccessActionProvider`1_File.Header" xml:space="preserve">
    <value>File Settings</value>
  </data>
  <data name="PathInfo_Path.Help" xml:space="preserve">
    <value>Enter here a String or a String expression that resolves into the file path, according to the path mode choosen above.</value>
  </data>
  <data name="PathInfo_Path.Text" xml:space="preserve">
    <value>File Path</value>
  </data>
  <data name="PathInfo_PathMode.Help" xml:space="preserve">
    <value>Enter here the mode to compute the complete file path from the expression below. You can choose to provide the full file mappath or a path relative to the application root, the host "_default" directory or the current portal home directory</value>
  </data>
  <data name="PathInfo_PathMode.Text" xml:space="preserve">
    <value>Path Mode</value>
  </data>
  <data name="PathInfo_PortalId.Help" xml:space="preserve">
    <value>Select the portal, from which the home directory is computed</value>
  </data>
  <data name="PathInfo_PortalId.Text" xml:space="preserve">
    <value>Portal</value>
  </data>
  <data name="FileReadWriteActionProvider`1_UseCompression.Help" xml:space="preserve">
    <value>You can choose optionally to compress the file content, in which case the string is encoded to an UTF8 Byte Array, which is compressed using Deflate  and converted back to a base64 String before the file operation with the choosen encoding is performed.</value>
  </data>
  <data name="FileReadWriteActionProvider`1_UseCompression.Text" xml:space="preserve">
    <value>Use Compression</value>
  </data>
  <data name="FileWriteActionProvider`1_AppendContent.Help" xml:space="preserve">
    <value>When checked, if the file is found to already exist, the content to write is appended to the existing file instead of overwriting the original content</value>
  </data>
  <data name="FileWriteActionProvider`1_AppendContent.Text" xml:space="preserve">
    <value>Append Content</value>
  </data>
  <data name="FileWriteActionProvider`1_InputExpression.Help" xml:space="preserve">
    <value>Enter here a String expression for the file content to be written</value>
  </data>
  <data name="FileWriteActionProvider`1_InputExpression.Text" xml:space="preserve">
    <value>File Content Expression</value>
  </data>
  <data name="HostPath.Text" xml:space="preserve">
    <value>Relative Path from Host Directory</value>
  </data>
  <data name="RootPath.Text" xml:space="preserve">
    <value>Relative Path from application Root</value>
  </data>
  <data name="Unicode.Text" xml:space="preserve">
    <value>Unicode</value>
  </data>
  <data name="UTF32.Text" xml:space="preserve">
    <value>UTF32</value>
  </data>
  <data name="UTF7.Text" xml:space="preserve">
    <value>UTF7</value>
  </data>
  <data name="UTF8.Text" xml:space="preserve">
    <value>UTF8</value>
  </data>
  <data name="WhileActionProvider`1_MaxIterationNb.Help" xml:space="preserve">
    <value>You can optionally set a maximum number of iteration (0 means no limit)</value>
  </data>
  <data name="WhileActionProvider`1_MaxIterationNb.Text" xml:space="preserve">
    <value>Max Iterations Nb</value>
  </data>
  <data name="WhileActionProvider`1_WhileAction.Header" xml:space="preserve">
    <value>While Settings</value>
  </data>
  <data name="WhileActionProvider`1_WhileCondition.Help" xml:space="preserve">
    <value>Enter here the set of conditions to match on each iteration</value>
  </data>
  <data name="WhileActionProvider`1_WhileCondition.Text" xml:space="preserve">
    <value>Test Condition</value>
  </data>
  <data name="WhileActionProvider`1_WhileType.Help" xml:space="preserve">
    <value>Enter here if the condition is evaluated before or after each iteration</value>
  </data>
  <data name="WhileActionProvider`1_WhileType.Text" xml:space="preserve">
    <value>Loop type</value>
  </data>
  <data name="WhileDo.Text" xml:space="preserve">
    <value>While True Do...</value>
  </data>
  <data name="SendEmailAction`1_Encoding.Help" xml:space="preserve">
    <value>Select here the encoding to apply when sending the email</value>
  </data>
  <data name="SendEmailAction`1_Encoding.Text" xml:space="preserve">
    <value>Encoding</value>
  </data>
  <data name="Balance_BTC.Text" xml:space="preserve">
    <value>BTCs</value>
  </data>
  <data name="Balance_TickerLast.Help" xml:space="preserve">
    <value>As extracted from the ticker at the moment of the collect</value>
  </data>
  <data name="Balance_TickerLast.Text" xml:space="preserve">
    <value>Last Price ($)</value>
  </data>
  <data name="Balance_Total.Help" xml:space="preserve">
    <value>Total = USDs + (BTCs * Last Price)</value>
  </data>
  <data name="Balance_Total.Text" xml:space="preserve">
    <value>Total ($)</value>
  </data>
  <data name="Balance_USD.Text" xml:space="preserve">
    <value>USDs</value>
  </data>
  <data name="ExchangeCredentials.Text" xml:space="preserve">
    <value>Credentials</value>
  </data>
  <data name="ExchangeInfo_MinOrderValue.Help" xml:space="preserve">
    <value>As the Exchange might set a minimum order value in $ (cf TradeHill) The min order amount is computed as the max from the min order amount and the min order value divided by current price.</value>
  </data>
  <data name="ExchangeInfo_MinOrderValue.Text" xml:space="preserve">
    <value>Min Order Value ($)</value>
  </data>
  <data name="TradingEvent_Balance.Help" xml:space="preserve">
    <value>The balance contains the available bitcoins and us dollars in your account, the price of the bitcoin at the moment of the run and the total in us dollars as computed from the price</value>
  </data>
  <data name="TradingEvent_Balance.Text" xml:space="preserve">
    <value>Balance</value>
  </data>
  <data name="TradingEvent_Time.Help" xml:space="preserve">
    <value>This is the time of the bot run when the data was collected</value>
  </data>
  <data name="TradingEvent_Time.Text" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="TradingHistory.Text" xml:space="preserve">
    <value>Balance History</value>
  </data>
  <data name="TradingHistory_Daily.Header" xml:space="preserve">
    <value>Daily</value>
  </data>
  <data name="TradingHistory_DailyEvents.Text" xml:space="preserve">
    <value>Those events are recorded with a minimum period of 1 day, and a max number of 7 events</value>
  </data>
  <data name="TradingHistory_Hourly.Header" xml:space="preserve">
    <value>Hourly</value>
  </data>
  <data name="TradingHistory_HourlyEvents.Text" xml:space="preserve">
    <value>Those events are recorded with a minimum period of 1 hour, and a max number of 24 events</value>
  </data>
  <data name="TradingHistory_Last.Header" xml:space="preserve">
    <value>Last Runs</value>
  </data>
  <data name="TradingHistory_LastEvents.Help" xml:space="preserve">
    <value>This series is updated on each run with a max number of 10 items</value>
  </data>
  <data name="TradingHistory_LastEvents.Text" xml:space="preserve">
    <value>Data collected from the last trading runs</value>
  </data>
  <data name="TradingHistory_Monthly.Header" xml:space="preserve">
    <value>Monthly</value>
  </data>
  <data name="TradingHistory_MonthlyEvents.Text" xml:space="preserve">
    <value>Those events are recorded with a minimum period of 30 days, and a max number of 12 events</value>
  </data>
  <data name="TradingHistory_Weekly.Header" xml:space="preserve">
    <value>Weekly</value>
  </data>
  <data name="TradingHistory_WeeklyEvents.Text" xml:space="preserve">
    <value>Those events are recorded with a minimum period of 7 days, and a max number of 4 events</value>
  </data>
  <data name="TradingSeries_TotalEarnings.Help" xml:space="preserve">
    <value>This is the difference between the balance total (usds + btcs * price) of the oldest run from the series and the last balance</value>
  </data>
  <data name="TradingSeries_TotalEarnings.Text" xml:space="preserve">
    <value>Total Earnings ($)</value>
  </data>
  <data name="TradingSeries_TotalEarningsFixedPrice.Help" xml:space="preserve">
    <value>Same except that the previous balance is computed with current price ( = usds + btcs * lastprice)</value>
  </data>
  <data name="TradingSeries_TotalEarningsFixedPrice.Text" xml:space="preserve">
    <value>TE - Fixed Price ($)</value>
  </data>
  <data name="TradingSeries_TotalEarningsRate.Help" xml:space="preserve">
    <value>This the total earnings as a percentage of the original balance</value>
  </data>
  <data name="TradingSeries_TotalEarningsRate.Text" xml:space="preserve">
    <value>Total Earnings (%)</value>
  </data>
  <data name="TradingSeries_TotalEarningsRateFixedPrice.Help" xml:space="preserve">
    <value>Same except that the previous balance is computed with current price ( = usds + btcs * lastprice)</value>
  </data>
  <data name="TradingSeries_TotalEarningsRateFixedPrice.Text" xml:space="preserve">
    <value>TE - Fixed Price (%)</value>
  </data>
  <data name="Decimal.Text" xml:space="preserve">
    <value>Decimal</value>
  </data>
  <data name="Double.Text" xml:space="preserve">
    <value>Double</value>
  </data>
  <data name="FleeExpressionInfo`1_RealLiteralDataType.Help" xml:space="preserve">
    <value>This is the default resolves type when using a decimal point. You can also use 'd', 'f' and 'm' to explicitely define respectively a double, single or decimal. Note that implicit conversions are not  supported for decimals.</value>
  </data>
  <data name="FleeExpressionInfo`1_RealLiteralDataType.Text" xml:space="preserve">
    <value>Real Data Type</value>
  </data>
  <data name="Inwards.Text" xml:space="preserve">
    <value>Inwards</value>
  </data>
  <data name="Outwards.Text" xml:space="preserve">
    <value>Outwards</value>
  </data>
  <data name="Single.Text" xml:space="preserve">
    <value>Single</value>
  </data>
  <data name="TradingStrategy_NextAskOrderPriceExpression.Help" xml:space="preserve">
    <value>When trading outwards, the first order is defined by the margin band, further orders are defined using the following expression. For advanced editing, the variables are brought by a Flee expression context owner with .Net type TradingContext</value>
  </data>
  <data name="TradingStrategy_NextAskOrderPriceExpression.Text" xml:space="preserve">
    <value>Next Ask Price Expression</value>
  </data>
  <data name="TradingStrategy_NextBidOrderPriceExpression.Help" xml:space="preserve">
    <value>When trading outwards, the first order is defined by the margin band, further orders are defined using the following expression. For advanced editing, the variables are brought by a Flee expression context owner with .Net type TradingContext</value>
  </data>
  <data name="TradingStrategy_NextBidOrderPriceExpression.Text" xml:space="preserve">
    <value>Next Bid Price Expression</value>
  </data>
  <data name="TradingStrategy_TradingBandDirection.Help" xml:space="preserve">
    <value>Once the outer orders of the trading band are defined according to the parameters, inner orders are defined based on custom arithmetic expressions. You can choose to define the innter orders outwards, starting from a price limit defined by the margin band, or inwards, starting with the existing open orders towards the limit band.</value>
  </data>
  <data name="TradingStrategy_TradingBandDirection.Text" xml:space="preserve">
    <value>Trading Band Direction</value>
  </data>
  <data name="UserVariableInfo_IsReadOnly.Help" xml:space="preserve">
    <value>When checked, the form version of the parameter is discarded upon saving</value>
  </data>
  <data name="UserVariableInfo_IsReadOnly.Text" xml:space="preserve">
    <value>Is Read Only</value>
  </data>
  <data name="BotFarmInfo`1_MutexName.Help" xml:space="preserve">
    <value>Choose here the name to give to your cross-process Mutex</value>
  </data>
  <data name="BotFarmInfo`1_MutexName.Text" xml:space="preserve">
    <value>Mutex Name</value>
  </data>
  <data name="BotFarmInfo`1_SynchronisationTimeout.Help" xml:space="preserve">
    <value>This is the duration the thread waits for an existing lock to be released before giving up.</value>
  </data>
  <data name="BotFarmInfo`1_SynchronisationTimeout.Text" xml:space="preserve">
    <value>Synchro Timeout</value>
  </data>
  <data name="BotFarmInfo`1_Synchronization.Help" xml:space="preserve">
    <value>Depending on your hosting environment (several instances, web gardening, old dnn scheduler etc.), you might find yourself with the scheduling taks running simultaneously in distinct threads/processus. As this could be detrimental in case of critical bots, you can choose here how the farm locks upon running. Note that using a Mutex requires elevated Full trust permissions.</value>
  </data>
  <data name="BotFarmInfo`1_Synchronization.Text" xml:space="preserve">
    <value>Synchronization Mode</value>
  </data>
  <data name="Monitor.Text" xml:space="preserve">
    <value>Monitor</value>
  </data>
  <data name="Mutex.Text" xml:space="preserve">
    <value>Mutex</value>
  </data>
  <data name="TradingStrategy_AccountForTrend.Help" xml:space="preserve">
    <value>When checked, the bot avoid issueing inner band asks when the amount of btcs is found to decrease in  the recent history, and similarly bids when the total of btcs is found to increase. This is a simple mechanism to prevent the same types of orders to be issued and executed several times in a row when the price oscillates between successive runs.</value>
  </data>
  <data name="TradingStrategy_AccountForTrend.Text" xml:space="preserve">
    <value>Account for trends</value>
  </data>
  <data name="TradingHistory_FiveMin.Header" xml:space="preserve">
    <value>5 Min</value>
  </data>
  <data name="TradingHistory_FiveMinEvents.Text" xml:space="preserve">
    <value>Those events are recorded with a minimum period of 5 minutes, and a max number of 12 events</value>
  </data>
  <data name="TradingStrategy_TakeMarginOnOppositeOrder.Help" xml:space="preserve">
    <value>If checked, the min ask limit price is defined as the max of price + half margin and highest bid + full margin, otherwise it is defined as price + half margin (and symmetrically for bids).</value>
  </data>
  <data name="TradingStrategy_TakeMarginOnOppositeOrder.Text" xml:space="preserve">
    <value>Take Margin On Opposite Order</value>
  </data>
  <data name="APICredentials_Disabled.Help" xml:space="preserve">
    <value>This indicates if you credentials were disabled during a previous run. To enable you bot again, please update your key and/or your secret</value>
  </data>
  <data name="APICredentials_Disabled.Text" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="ProbeInstance_Parameters.Help" xml:space="preserve">
    <value>This is a series of parameters extracted from the parent user bot</value>
  </data>
  <data name="ProbeInstance_Parameters.Text" xml:space="preserve">
    <value>User Parameters</value>
  </data>
  <data name="ProbeInstance_User.Help" xml:space="preserve">
    <value>This is the account display name of the user bot owner</value>
  </data>
  <data name="ProbeInstance_User.Text" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="ProbeSettings`1ScheduleEvent.Text" xml:space="preserve">
    <value>New Parameter Probe</value>
  </data>
  <data name="ProbeSettings`1_Display.Header" xml:space="preserve">
    <value>Display</value>
  </data>
  <data name="ProbeSettings`1_DumpVariables.Help" xml:space="preserve">
    <value>This is a list of user parameters to be displayed within the ranking </value>
  </data>
  <data name="ProbeSettings`1_DumpVariables.Text" xml:space="preserve">
    <value>DumpVariables</value>
  </data>
  <data name="ProbeSettings`1_Evaluation.Header" xml:space="preserve">
    <value>Evaluation</value>
  </data>
  <data name="ProbeSettings`1_ProbeHeaderExpression.Help" xml:space="preserve">
    <value>This expression resolves into the item header within the ranking list.</value>
  </data>
  <data name="ProbeSettings`1_ProbeHeaderExpression.Text" xml:space="preserve">
    <value>Header Expression</value>
  </data>
  <data name="ProbeSettings`1_ProbeValueExpression.Help" xml:space="preserve">
    <value>The following expression is evaluated against the set of the user parameters, to compute an object, the type of which must implement IComparable</value>
  </data>
  <data name="ProbeSettings`1_ProbeValueExpression.Text" xml:space="preserve">
    <value>Probe Value Expression</value>
  </data>
  <data name="ProbeSettings`1_RankingsSize.Help" xml:space="preserve">
    <value>This is the number of top user bots, sorted against the computed value expression, to display in the result list.</value>
  </data>
  <data name="ProbeSettings`1_RankingsSize.Text" xml:space="preserve">
    <value>Ranking Size</value>
  </data>
  <data name="ProbeRanking_Items.Help" xml:space="preserve">
    <value>Here is a list of user parameters ranked according to a computed value of their user bot.</value>
  </data>
  <data name="ProbeRanking_Items.Text" xml:space="preserve">
    <value>Ranked User bots</value>
  </data>
  <data name="TradingSeries_EarningsPerPeriodRate.Help" xml:space="preserve">
    <value>This is the total earnings of the series proportionally adjusted to the series period.</value>
  </data>
  <data name="TradingSeries_EarningsPerPeriodRate.Text" xml:space="preserve">
    <value>Earnings per Period (%)</value>
  </data>
  <data name="UserBotInfo_AnonymousRanking.Help" xml:space="preserve">
    <value>Check if you don't want your username to appear in the configured rankings</value>
  </data>
  <data name="UserBotInfo_AnonymousRanking.Text" xml:space="preserve">
    <value>Anonymous Ranking</value>
  </data>
  <data name="UserBotInfo_Rankings.Header" xml:space="preserve">
    <value>User Rankings</value>
  </data>
  <data name="UserBotInfo_Rankings.Text" xml:space="preserve">
    <value>In this tab, you'll find series of user parameters, ranked according to distinct  values</value>
  </data>
  <data name="UserBotSettings`1_Probes.Header" xml:space="preserve">
    <value>Probes</value>
  </data>
  <data name="UserBotSettings`1_Probes.Help" xml:space="preserve">
    <value>Each probes computes a value against the user parameters, and sort individual user bots against that value. Corresponding results are displayed and sorted according to the other parameters.</value>
  </data>
  <data name="UserBotSettings`1_Probes.Text" xml:space="preserve">
    <value>You can look up user bot data, build user ranking accordingly</value>
  </data>
  <data name="Ascending.Text" xml:space="preserve">
    <value>Ascending</value>
  </data>
  <data name="Descending.Text" xml:space="preserve">
    <value>Descending</value>
  </data>
  <data name="ProbeInstance_Header.Help" xml:space="preserve">
    <value>This is the formatted user bot parameter value used for ranking.</value>
  </data>
  <data name="ProbeInstance_Header.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="ProbeSettings`1_SortDirection.Help" xml:space="preserve">
    <value>This is the direction to sort the user bot values computed by the following expression</value>
  </data>
  <data name="ProbeSettings`1_SortDirection.Text" xml:space="preserve">
    <value>Ranking Direction</value>
  </data>
  <data name="Exponential.Text" xml:space="preserve">
    <value>Exponential</value>
  </data>
  <data name="Linear.Text" xml:space="preserve">
    <value>Linear</value>
  </data>
  <data name="RuleEngineSettings`1_ExceptionDumpVars.Help" xml:space="preserve">
    <value>Enter here a comma separated list of parameters or expressions to be evaluated and dumped when an exception is caught</value>
  </data>
  <data name="RuleEngineSettings`1_ExceptionDumpVars.Text" xml:space="preserve">
    <value>Exceptions Dump Vars</value>
  </data>
  <data name="TradingStrategy_OrdersDistribution.Help" xml:space="preserve">
    <value>The steps between your orders are defined by the following arithmetic expressions. You can switch to predefined distibutions here.</value>
  </data>
  <data name="TradingStrategy_OrdersDistribution.Text" xml:space="preserve">
    <value>Orders Distribution</value>
  </data>
  <data name="Order_amount.Help" xml:space="preserve">
    <value>This is the the order amount in Bitcoins</value>
  </data>
  <data name="Order_amount.Text" xml:space="preserve">
    <value>Amount (btcs)</value>
  </data>
  <data name="Order_dark.Help" xml:space="preserve">
    <value>Indicates if the order is from a dark pool</value>
  </data>
  <data name="Order_dark.Text" xml:space="preserve">
    <value>Dark</value>
  </data>
  <data name="Order_date.Help" xml:space="preserve">
    <value>This is the order Unix time</value>
  </data>
  <data name="Order_date.Text" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Order_FriendlyId.Help" xml:space="preserve">
    <value>This string summarizes the current order</value>
  </data>
  <data name="Order_FriendlyId.Text" xml:space="preserve">
    <value>Friendly Description</value>
  </data>
  <data name="Order_oid.Help" xml:space="preserve">
    <value>This is the order ID as returned by the exchange platform</value>
  </data>
  <data name="Order_oid.Text" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="Order_OrderType.Help" xml:space="preserve">
    <value>Order types are sell, ask and cancel</value>
  </data>
  <data name="Order_OrderType.Text" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Order_price.Help" xml:space="preserve">
    <value>This is the the order price in US dollars</value>
  </data>
  <data name="Order_price.Text" xml:space="preserve">
    <value>Price ($)</value>
  </data>
  <data name="Order_status.Help" xml:space="preserve">
    <value>This is the order status as returned by the exchange platform</value>
  </data>
  <data name="Order_status.Text" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Order_Value.Help" xml:space="preserve">
    <value>Value is computed as V = Amount * Price</value>
  </data>
  <data name="Order_Value.Text" xml:space="preserve">
    <value>Value ($)</value>
  </data>
  <data name="ProbeSettings`1_ProbeFilterExpression.Help" xml:space="preserve">
    <value>Enter a boolean expression evaluated against the user bot parameters to be matched for inclusion in the result list. The previously computed value is accessible through the "Value" variable.</value>
  </data>
  <data name="ProbeSettings`1_ProbeFilterExpression.Text" xml:space="preserve">
    <value>Filter Expression</value>
  </data>
  <data name="ProbeSettings`1_UseFilter.Help" xml:space="preserve">
    <value>You can optionnally set up a filter on your results</value>
  </data>
  <data name="ProbeSettings`1_UseFilter.Text" xml:space="preserve">
    <value>Filter Results</value>
  </data>
  <data name="TradingHistory_LastOrdersSeries.Help" xml:space="preserve">
    <value>This is a series of wallets for the last set of orders issued by the bot, together with the available usds and btcs at the time of computation (=total resources - reserved resources - existing orders resources + cancelled orders resources)</value>
  </data>
  <data name="TradingHistory_LastOrdersSeries.Text" xml:space="preserve">
    <value>Last Issued orders</value>
  </data>
  <data name="TradingHistory_LastWallet.Help" xml:space="preserve">
    <value>This is the wallet as retrieved from the last bot call recorded in the History</value>
  </data>
  <data name="TradingHistory_LastWallet.Text" xml:space="preserve">
    <value>Last Wallet</value>
  </data>
  <data name="TradingHistory_Wallet.Header" xml:space="preserve">
    <value>Wallet</value>
  </data>
  <data name="Wallet.Text" xml:space="preserve">
    <value>Orders</value>
  </data>
  <data name="Wallet_Balance.Header" xml:space="preserve">
    <value>Balance</value>
  </data>
  <data name="Wallet_Boundaries.Header" xml:space="preserve">
    <value>Boundaries</value>
  </data>
  <data name="Wallet_btcs.Help" xml:space="preserve">
    <value>This is the amount of Bitcoins in the wallet</value>
  </data>
  <data name="Wallet_btcs.Text" xml:space="preserve">
    <value>BTCs</value>
  </data>
  <data name="Wallet_CancelOrders.Help" xml:space="preserve">
    <value>This is a list of cancel orders (only used for issued orders wallets)</value>
  </data>
  <data name="Wallet_CancelOrders.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Wallet_HighestAsk.Help" xml:space="preserve">
    <value>This is the ask order with the highest price</value>
  </data>
  <data name="Wallet_HighestAsk.Text" xml:space="preserve">
    <value>Highest Ask</value>
  </data>
  <data name="Wallet_HighestBid.Help" xml:space="preserve">
    <value>This is the bid order with the highest price</value>
  </data>
  <data name="Wallet_HighestBid.Text" xml:space="preserve">
    <value>Highest Bid</value>
  </data>
  <data name="Wallet_LowestAsk.Help" xml:space="preserve">
    <value>This is the ask order with the lowest price</value>
  </data>
  <data name="Wallet_LowestAsk.Text" xml:space="preserve">
    <value>Lowest Ask</value>
  </data>
  <data name="Wallet_LowestBid.Help" xml:space="preserve">
    <value>This is the bid order with the lowest price</value>
  </data>
  <data name="Wallet_LowestBid.Text" xml:space="preserve">
    <value>Lowest Bid</value>
  </data>
  <data name="Wallet_OrderedAsks.Help" xml:space="preserve">
    <value>This is a sorted list of ask orders</value>
  </data>
  <data name="Wallet_OrderedAsks.Text" xml:space="preserve">
    <value>Asks</value>
  </data>
  <data name="Wallet_OrderedBids.Help" xml:space="preserve">
    <value>This is a sorted list of bid orders</value>
  </data>
  <data name="Wallet_OrderedBids.Text" xml:space="preserve">
    <value>Bids</value>
  </data>
  <data name="Wallet_Orders.Header" xml:space="preserve">
    <value>Orders</value>
  </data>
  <data name="Wallet_usds.Help" xml:space="preserve">
    <value>This is the amount of US dollars in the wallet</value>
  </data>
  <data name="Wallet_usds.Text" xml:space="preserve">
    <value>USDs</value>
  </data>
  <data name="TradingStrategy_ProfitMargin.Header" xml:space="preserve">
    <value>Profit Margin</value>
  </data>
  <data name="KeeperModuleSettings_DisplayRankings.Help" xml:space="preserve">
    <value>Check if you want to display the user rankings defined in your user bot probe parameters</value>
  </data>
  <data name="KeeperModuleSettings_DisplayRankings.Text" xml:space="preserve">
    <value>Display User Rankings</value>
  </data>
  <data name="ResourceBalancingStrategy_HighOrderBalanceCoef.Help" xml:space="preserve">
    <value>This is the percentage of the unbalance value at the order price before the order is executed that is put in the order: 0.5 means issue an order to balance btcs value and $ in the wallet</value>
  </data>
  <data name="ResourceBalancingStrategy_HighOrderBalanceCoef.Text" xml:space="preserve">
    <value>High Order Balancing Coef</value>
  </data>
  <data name="ResourceBalancingStrategy_LowOrderBalanceCoef.Help" xml:space="preserve">
    <value>This is the percentage of the unbalance value at the order price before the order is executed that is put in the order: 0.5 means issue an order to balance btcs value and $ in the wallet</value>
  </data>
  <data name="ResourceBalancingStrategy_LowOrderBalanceCoef.Text" xml:space="preserve">
    <value>Low Order Balancing Coef</value>
  </data>
  <data name="ResourceBalancingStrategy_Parameters.Header" xml:space="preserve">
    <value>Trading Parameters</value>
  </data>
  <data name="ResourceBalancingStrategy_PriceMargin.Help" xml:space="preserve">
    <value>This is the percentage above and below the last price to define the 2 balancing orders.</value>
  </data>
  <data name="ResourceBalancingStrategy_PriceMargin.Text" xml:space="preserve">
    <value>Price Margin</value>
  </data>
  <data name="Balance_BTCValue.Help" xml:space="preserve">
    <value>This is the value of btcs given the price</value>
  </data>
  <data name="Balance_BTCValue.Text" xml:space="preserve">
    <value>Btcs Value ($)</value>
  </data>
  <data name="UserBotSettings`1_VariableOverwrites.Help" xml:space="preserve">
    <value>You can choose to define custom parameters here, in order to overwrite several of the master bot default parameters.</value>
  </data>
  <data name="UserBotSettings`1_VariableOverwrites.Text" xml:space="preserve">
    <value>Parameter Overwrites</value>
  </data>
  <data name="Wallet_Time.Help" xml:space="preserve">
    <value>This is the date and time the wallet/orders was checked/issued</value>
  </data>
  <data name="Wallet_Time.Text" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="TrialMode.Disabled" xml:space="preserve">
    <value>Limited in Free Version</value>
  </data>
  <data name="BlueInfo.Text" xml:space="preserve">
    <value>Blue Information</value>
  </data>
  <data name="PagePreRender.Text" xml:space="preserve">
    <value>Page PreRender</value>
  </data>
  <data name="PagePreRenderComplete.Text" xml:space="preserve">
    <value>Page PreRender Complete</value>
  </data>
  <data name="DisplayMessageAction`1_Heading.Help" xml:space="preserve">
    <value>You can optionally enter a heading to be inserted as a label together with your message</value>
  </data>
  <data name="DisplayMessageAction`1_Heading.Text" xml:space="preserve">
    <value>Heading</value>
  </data>
  <data name="DisplayMessageAction`1_IsModuleMessage.Help" xml:space="preserve">
    <value>Check if you want to display your message within a specific module rather than as a page message</value>
  </data>
  <data name="DisplayMessageAction`1_IsModuleMessage.Text" xml:space="preserve">
    <value>Module Message</value>
  </data>
  <data name="UserBotInfo_ReadonlyEntities.Help" xml:space="preserve">
    <value>The following user parameters are readonly. They are only computed on bot runs</value>
  </data>
  <data name="UserBotInfo_ReadonlyEntities.Text" xml:space="preserve">
    <value>Reports</value>
  </data>
  <data name="IsCancel.Help" xml:space="preserve">
    <value>Indicates if this is a cancel order</value>
  </data>
  <data name="IsCancel.Text" xml:space="preserve">
    <value>Cancel Order</value>
  </data>
  <data name="KC_LocationSettings.Header" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="APICredentials_LastAuthenticationFailure.Help" xml:space="preserve">
    <value>This is the date your bot last received an authentication failure response if any. If you get 2 failures within 1 hour, your bot is disabled and you must update your key to restart it.</value>
  </data>
  <data name="APICredentials_LastAuthenticationFailure.Text" xml:space="preserve">
    <value>Last Authentication failure</value>
  </data>
  <data name="AsyncEnabledActionProvider`1_TechnicalSettings.Header" xml:space="preserve">
    <value>Technical Settings</value>
  </data>
  <data name="UserBotSettings`1_ResourceFile.Help" xml:space="preserve">
    <value>You can optionally define an alternate Resource File name to customize the user form to this particular user bot</value>
  </data>
  <data name="UserBotSettings`1_ResourceFile.Text" xml:space="preserve">
    <value>Resource File</value>
  </data>
  <data name="PortalKeeperConfig_RestServices.Text" xml:space="preserve">
    <value>Here, you can define a series of custom REST web services to be hosted through the DNN Web API service framework.</value>
  </data>
  <data name="Delete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="FileHelperCSV.Text" xml:space="preserve">
    <value>CSV using FileHelper</value>
  </data>
  <data name="FileManagerActionProvider`1_File.Header" xml:space="preserve">
    <value>File Settings</value>
  </data>
  <data name="FileManagerActionProvider`1_Mode.Help" xml:space="preserve">
    <value>Choose here how to manipulate the target files</value>
  </data>
  <data name="FileManagerActionProvider`1_Mode.Text" xml:space="preserve">
    <value>Manager Mode</value>
  </data>
  <data name="FileManagerActionProvider`1_Pattern.Help" xml:space="preserve">
    <value>You can optionally use a pattern to match multiple files with a wildcard</value>
  </data>
  <data name="FileManagerActionProvider`1_Pattern.Text" xml:space="preserve">
    <value>Pattern (optional)</value>
  </data>
  <data name="FileReadWriteActionProvider`1_AccessMode.Help" xml:space="preserve">
    <value>Choose here to read/write file using strings with direct access or entities with the filehelper library</value>
  </data>
  <data name="FileReadWriteActionProvider`1_AccessMode.Text" xml:space="preserve">
    <value>File Access Mode</value>
  </data>
  <data name="FileReadWriteActionProvider`1_File.Header" xml:space="preserve">
    <value>File Settings</value>
  </data>
  <data name="FileWriteActionProvider`1_InputEntityVarName.Help" xml:space="preserve">
    <value>Enter here the name for the current item variable while looping against the Enumerable expression</value>
  </data>
  <data name="FileWriteActionProvider`1_InputEntityVarName.Text" xml:space="preserve">
    <value>Current Entity Variable Name</value>
  </data>
  <data name="GetDirectories.Text" xml:space="preserve">
    <value>Get Directories</value>
  </data>
  <data name="GetFiles.Text" xml:space="preserve">
    <value>Get Files</value>
  </data>
  <data name="StringReadWrite.Text" xml:space="preserve">
    <value>From/To Strings</value>
  </data>
  <data name="AlternateUris_AddNew.Text" xml:space="preserve">
    <value>Add Alternate Uri</value>
  </data>
  <data name="PortalKeeperConfig_RestServices.Help" xml:space="preserve">
    <value>Note that you need to restart the website for any change to be applied</value>
  </data>
  <data name="RestServicesSettings_Enabled.Help" xml:space="preserve">
    <value>This is a global switch for the REST services configurator</value>
  </data>
  <data name="RestServicesSettings_Enabled.Text" xml:space="preserve">
    <value>Enable REST Services</value>
  </data>
  <data name="RestServicesSettings_EnableDigestAuthentication.Text" xml:space="preserve">
    <value>Enable Digest Authentication</value>
  </data>
  <data name="RestServicesSettings_EnableOpenRastaLogger.Help" xml:space="preserve">
    <value>The underlying REST engine, OpenRasta, exposes a log interface, which can be optionally routed to the DNN Event Log (the log type DEBUG must be enabled)</value>
  </data>
  <data name="RestServicesSettings_EnableOpenRastaLogger.Text" xml:space="preserve">
    <value>Enable OpenRasta Logger</value>
  </data>
  <data name="RestServicesSettings_RestServices.Text" xml:space="preserve">
    <value>List of REST Services</value>
  </data>
  <data name="RestService_AlternateUris.Text" xml:space="preserve">
    <value>Alternate Uris</value>
  </data>
  <data name="RestService_AsJsonDataContract.Text" xml:space="preserve">
    <value>As Json DataContract</value>
  </data>
  <data name="RestService_AsXmlDataContract.Text" xml:space="preserve">
    <value>As XML DataContract</value>
  </data>
  <data name="RestService_AsXmlSerializer.Text" xml:space="preserve">
    <value>As XML Serializer</value>
  </data>
  <data name="RestService_AtUri.Text" xml:space="preserve">
    <value>At Uri</value>
  </data>
  <data name="RestService_HandlerType.Text" xml:space="preserve">
    <value>Custom Handler Type</value>
  </data>
  <data name="RestService_ResourceType.Text" xml:space="preserve">
    <value>Resource Type</value>
  </data>
  <data name="DeserializeActionProvider`1_DefaultToNewEntity.Help" xml:space="preserve">
    <value>Check if you want to create a new entity with the default constructor instead of returning nothing when the input string is null or empty </value>
  </data>
  <data name="DeserializeActionProvider`1_DefaultToNewEntity.Text" xml:space="preserve">
    <value>Default To New Entity</value>
  </data>
  <data name="SerializeActionProvider`1_InputExpression.Help" xml:space="preserve">
    <value>Enter a Flee expression for the object to be serialized</value>
  </data>
  <data name="SerializeActionProvider`1_InputExpression.Text" xml:space="preserve">
    <value>Input Expression</value>
  </data>
  <data name="Copy.Text" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="FileManagerActionProvider`1_TargetPathExpression.Help" xml:space="preserve">
    <value>Enter here a Flee expression for the target path to copy/move the source content to</value>
  </data>
  <data name="FileManagerActionProvider`1_TargetPathExpression.Text" xml:space="preserve">
    <value>Target Path</value>
  </data>
  <data name="Move.Text" xml:space="preserve">
    <value>Move</value>
  </data>
  <data name="Delimiter.Text" xml:space="preserve">
    <value>Delimiter</value>
  </data>
  <data name="DynamicExpressions.Text" xml:space="preserve">
    <value>Dynamic Expressions</value>
  </data>
  <data name="FileHelpers.Text" xml:space="preserve">
    <value>Flat Records</value>
  </data>
  <data name="FileHelpersSettings_Delimiter.Text" xml:space="preserve">
    <value>Delimiter</value>
  </data>
  <data name="FileHelpersSettings_FieldVars.Text" xml:space="preserve">
    <value>Dynamic Fields</value>
  </data>
  <data name="FileHelpersSettings_FileHelpersMode.Text" xml:space="preserve">
    <value>Line Mode</value>
  </data>
  <data name="FileHelpersSettings_IncludeHeaders.Text" xml:space="preserve">
    <value>Include Headers</value>
  </data>
  <data name="FileHelpersSettings_InputEntityVarName.Text" xml:space="preserve">
    <value>List Entity Variable Name</value>
  </data>
  <data name="FileHelpersSettings_RecordsMode.Text" xml:space="preserve">
    <value>Records Mode</value>
  </data>
  <data name="FixedLength.Text" xml:space="preserve">
    <value>Fixed Length</value>
  </data>
  <data name="SerializationBaseActionProvider`1_FileHelpersSettings.Text" xml:space="preserve">
    <value>Use the following parameters to define a delimited/csv or fixed length format</value>
  </data>
  <data name="StaticType.Text" xml:space="preserve">
    <value>Static Type</value>
  </data>
  <data name="BotFarmInfo`1_RunForcedBots.Text" xml:space="preserve">
    <value>Run Forced Bots</value>
  </data>
  <data name="ImportFile.Help" xml:space="preserve">
    <value>You can edit the xml file downloaded from an export and upload it back to import your edited items.</value>
  </data>
  <data name="ImportFile.Text" xml:space="preserve">
    <value>Import Xml File</value>
  </data>
  <data name="Instances_Copy.Text" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="Rules_Copy.Text" xml:space="preserve">
    <value>Copy Rules</value>
  </data>
  <data name="StringFilterProvider`1_XPathNavigableVarName.Help" xml:space="preserve">
    <value>In order to avoid parsing the Html/Xml content from the input string several times,  you can choose to optionally store the resulting IXPathNavigable object (XmlDocument or HtmlDocument depending on your settings) to a variable by providing a name here. The variable is tested to match the input string when found existing. </value>
  </data>
  <data name="StringFilterProvider`1_XPathNavigableVarName.Text" xml:space="preserve">
    <value>Document Var Name</value>
  </data>
  <data name="XPathInfo_Simulation.Header" xml:space="preserve">
    <value>Simulation</value>
  </data>
  <data name="XPathInfo_Simulation.Help" xml:space="preserve">
    <value>Check to optionally test your query locally by providing test data</value>
  </data>
  <data name="XPathInfo_Simulation.Text" xml:space="preserve">
    <value>Simulate Query</value>
  </data>
  <data name="XPathInfo_SimulationData.Help" xml:space="preserve">
    <value>Paste here the XmlDocument / HtmlDocument, against which to test your query</value>
  </data>
  <data name="XPathInfo_SimulationData.Text" xml:space="preserve">
    <value>Simulation Data</value>
  </data>
  <data name="XPathInfo_SimulationResult.Help" xml:space="preserve">
    <value>The result of your XPath Query against your test data will display here after a refresh.</value>
  </data>
  <data name="XPathInfo_SimulationResult.Text" xml:space="preserve">
    <value>Results (XmlSerialized)</value>
  </data>
  <data name="XPathInfo_SubSelects.Header" xml:space="preserve">
    <value>Sub Selects</value>
  </data>
  <data name="XPathInfo_XPathSettings.Header" xml:space="preserve">
    <value>XPath Settings</value>
  </data>
  <data name="FirewallConfig_SetCustomErrors.Text" xml:space="preserve">
    <value>Update Web.Config with Custom Errors</value>
  </data>
  <data name="TradingHistory_Transactions.Header" xml:space="preserve">
    <value>Transactions</value>
  </data>
  <data name="UserBotSettings`1_Computation.Header" xml:space="preserve">
    <value>Computation</value>
  </data>
  <data name="UserBotSettings`1_Computation.Help" xml:space="preserve">
    <value>Define here custom rules to be run at user display time.</value>
  </data>
  <data name="UserBotSettings`1_Computation.Text" xml:space="preserve">
    <value>Computation Definition</value>
  </data>
  <data name="UserBotSettings`1_ComputedVars.Help" xml:space="preserve">
    <value>Define here a comma separated list of vars in the form "VarName1=VarExpression1,VarName2=VarExpression2 etc." Those variable will be added to a list available for display within the user bot</value>
  </data>
  <data name="UserBotSettings`1_ComputedVars.Text" xml:space="preserve">
    <value>Computed Variables</value>
  </data>
  <data name="UserBotSettings`1_EnableActionCommands.Help" xml:space="preserve">
    <value>That option lets you define a custom set of rules to be run before the user bot is displayed and selected computed variables to be added to the configuration form.</value>
  </data>
  <data name="UserBotSettings`1_EnableActionCommands.Text" xml:space="preserve">
    <value>Enable Computation</value>
  </data>
  <data name="Wallet_Status.Help" xml:space="preserve">
    <value>Here is a free label which lets you track the state of your trading within your strategy</value>
  </data>
  <data name="Wallet_Status.Text" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="FileHelpersSettings_RecordType.Help" xml:space="preserve">
    <value>Enter here the record type to deserialize to</value>
  </data>
  <data name="FileHelpersSettings_RecordType.Text" xml:space="preserve">
    <value>Record Type</value>
  </data>
  <data name="KeeperModuleSettings_EnableActionCommands.Help" xml:space="preserve">
    <value>When defining a user bot you can optionally configure an on demand computation with corresponding result variables to display. Define here wether to display the command button to trigger the corresponding computation</value>
  </data>
  <data name="KeeperModuleSettings_EnableActionCommands.Text" xml:space="preserve">
    <value>Enable Computation</value>
  </data>
  <data name="SimulationInfo_CustomStrategy.Help" xml:space="preserve">
    <value>Define here the strategy to be used during the simulation.</value>
  </data>
  <data name="SimulationInfo_CustomStrategy.Text" xml:space="preserve">
    <value>Custom Strategy</value>
  </data>
  <data name="SimulationInfo_EndDate.Help" xml:space="preserve">
    <value>Enter here the end date for the simulation within the trading history available</value>
  </data>
  <data name="SimulationInfo_EndDate.Text" xml:space="preserve">
    <value>End Date</value>
  </data>
  <data name="SimulationInfo_StartDate.Help" xml:space="preserve">
    <value>Enter here the starting date for the simulation within the trading history available</value>
  </data>
  <data name="SimulationInfo_StartDate.Text" xml:space="preserve">
    <value>Start Date</value>
  </data>
  <data name="SimulationInfo_UseCustomStrategy.Help" xml:space="preserve">
    <value>Check if you want to override your default strategy with a custom one</value>
  </data>
  <data name="SimulationInfo_UseCustomStrategy.Text" xml:space="preserve">
    <value>Use Custom Strategy</value>
  </data>
  <data name="ActionCommands_AddNew.Text" xml:space="preserve">
    <value>Add New Action Command</value>
  </data>
  <data name="ActionCommands_Export.Text" xml:space="preserve">
    <value>Export Action Commands</value>
  </data>
  <data name="ActionCommands_Import.Text" xml:space="preserve">
    <value>Import Action Commands</value>
  </data>
  <data name="ActionCommand_ComputedVars.Help" xml:space="preserve">
    <value>Enter here a semi-colon separated list of variable expressions to be computed. </value>
  </data>
  <data name="ActionCommand_ComputedVars.Text" xml:space="preserve">
    <value>Result Variables</value>
  </data>
  <data name="ActionCommand_IconPath.Help" xml:space="preserve">
    <value>Enter the relative path of the icon file for the command button.</value>
  </data>
  <data name="ActionCommand_IconPath.Text" xml:space="preserve">
    <value>Icon Path</value>
  </data>
  <data name="ActionCommand_ResxKey.Help" xml:space="preserve">
    <value>Enter the resource file key for the command button text.</value>
  </data>
  <data name="ActionCommand_ResxKey.Text" xml:space="preserve">
    <value>Resx Key</value>
  </data>
  <data name="Simulation.Command" xml:space="preserve">
    <value>Run Simulation</value>
  </data>
  <data name="UserBotSettings`1_ActionCommands.Header" xml:space="preserve">
    <value>Action Commands</value>
  </data>
  <data name="UserBotSettings`1_ActionCommands.Help" xml:space="preserve">
    <value>you can configure a series of command buttons together with rules to be executed on click and a selection of result variables to display</value>
  </data>
  <data name="UserBotSettings`1_ActionCommands.Text" xml:space="preserve">
    <value>Action Commands</value>
  </data>
  <data name="SimulationInfo.Text" xml:space="preserve">
    <value>Simulation Parameters</value>
  </data>
  <data name="SimulationInfo_BotPeriod.Help" xml:space="preserve">
    <value>Define here the simulated period for running the bot strategy and updating the wallet order while the exchange historic prices are gone though</value>
  </data>
  <data name="SimulationInfo_BotPeriod.Text" xml:space="preserve">
    <value>Simulation Bot Period</value>
  </data>
  <data name="Payment_Amount.Help" xml:space="preserve">
    <value>Amount of the payment</value>
  </data>
  <data name="Payment_Amount.Text" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="Payment_Currency.Help" xml:space="preserve">
    <value>Currency for the payment</value>
  </data>
  <data name="Payment_Currency.Text" xml:space="preserve">
    <value>Currency</value>
  </data>
  <data name="Payment_Label.Help" xml:space="preserve">
    <value>This is the recorded label for the payment</value>
  </data>
  <data name="Payment_Label.Text" xml:space="preserve">
    <value>Label</value>
  </data>
  <data name="Payment_Time.Help" xml:space="preserve">
    <value>Time the payment was made</value>
  </data>
  <data name="Payment_Time.Text" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="Trade_AmountDisplay.Help" xml:space="preserve">
    <value>This is the amount of the order executed</value>
  </data>
  <data name="Trade_AmountDisplay.Text" xml:space="preserve">
    <value>Amount (btcs)</value>
  </data>
  <data name="Trade_PriceDisplay.Help" xml:space="preserve">
    <value>This is the price of the order executed</value>
  </data>
  <data name="Trade_PriceDisplay.Text" xml:space="preserve">
    <value>Prices (usds)</value>
  </data>
  <data name="Trade_Time.Help" xml:space="preserve">
    <value>This is the time the trade was executed</value>
  </data>
  <data name="Trade_Time.Text" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="TradingHistory_Fees.Help" xml:space="preserve">
    <value>Here is a list of fees paid for executed orders</value>
  </data>
  <data name="TradingHistory_Fees.Text" xml:space="preserve">
    <value>Fees</value>
  </data>
  <data name="TradingHistory_Trades.Help" xml:space="preserve">
    <value>Here is a list of executed orders from your history</value>
  </data>
  <data name="TradingHistory_Trades.Text" xml:space="preserve">
    <value>Trades</value>
  </data>
  <data name="UserBotInfo_ComputedEntities.Help" xml:space="preserve">
    <value>Here you'll find a list of variables resulting from your action commands</value>
  </data>
  <data name="UserBotInfo_ComputedEntities.Text" xml:space="preserve">
    <value>Results</value>
  </data>
  <data name="SimulationInfo_FastSimulation.Help" xml:space="preserve">
    <value>Depending on your strategy, their might be extended periods of relative price stability where the bot does not issue any order. Enabling fast simulation mode attempts to detect those period an skip running the bot until an existing open order gets executed or a significant price variation is observed. This allows for much faster simulations, yet you should check that the results fit the regular mode upon validating a new strategy.</value>
  </data>
  <data name="SimulationInfo_FastSimulation.Text" xml:space="preserve">
    <value>Fast Simulation</value>
  </data>
  <data name="SimulationInfo_SkippedMinVoidRuns.Help" xml:space="preserve">
    <value>Minimum number of runs without orders issued, before next runs are considered for skipping. </value>
  </data>
  <data name="SimulationInfo_SkippedMinVoidRuns.Text" xml:space="preserve">
    <value>Min Nb empty runs</value>
  </data>
  <data name="SimulationInfo_SkippedVariationRate.Help" xml:space="preserve">
    <value>This is the maximum price variation below which the bot run is skipped after successive empty runs</value>
  </data>
  <data name="SimulationInfo_SkippedVariationRate.Text" xml:space="preserve">
    <value>Max Price variation (%)</value>
  </data>
  <data name="ActionTree.Text" xml:space="preserve">
    <value>Action Tree</value>
  </data>
  <data name="ActionTreeExpression.Text" xml:space="preserve">
    <value>Action Tree Expression</value>
  </data>
  <data name="MultipleActionProvider`1_ActionTree.Help" xml:space="preserve">
    <value>This is the root level of your Action tree. You can choose to create a list of subtrees to be run sequentially, or to define a sub dictionary of trees based on the runtime evaluation of a contextual variable.</value>
  </data>
  <data name="MultipleActionProvider`1_ActionTree.Text" xml:space="preserve">
    <value>Root Tree</value>
  </data>
  <data name="MultipleActionProvider`1_MultipleActionMode.Help" xml:space="preserve">
    <value>You can choose to define a simple sequence of actions, a more complex decision tree defined either locally or by a contextual variable</value>
  </data>
  <data name="MultipleActionProvider`1_MultipleActionMode.Text" xml:space="preserve">
    <value>Mode</value>
  </data>
  <data name="Sequence.Text" xml:space="preserve">
    <value>Action Sequence</value>
  </data>
  <data name="ActionTree`1_Actions.Help" xml:space="preserve">
    <value>Define here the sequence of actions to be run with the current tree.</value>
  </data>
  <data name="ActionTree`1_Actions.Text" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="ActionTree`1_KeyExpression.Help" xml:space="preserve">
    <value>Define here a dynamic expression to be evaluated at runtime and matched against the keys of the decision tree.</value>
  </data>
  <data name="ActionTree`1_KeyExpression.Text" xml:space="preserve">
    <value>Key Expression</value>
  </data>
  <data name="ActionTree`1_MainList.Help" xml:space="preserve">
    <value>You can define here a list of sub action trees. They will be run sequentially.</value>
  </data>
  <data name="ActionTree`1_MainList.Text" xml:space="preserve">
    <value>List of sub trees</value>
  </data>
  <data name="ActionTree`1_Mode.Help" xml:space="preserve">
    <value>There are 3 modes for each action tree node: you can either define a list of sub trees, to be run sequentially (mainly for organisational purposes), a decision tree where a dynamic string expression to be evaluated is matched against a sorted dictionary of potential target trees to be run, or a synonym branch, which in case of a parent decision tree let you associate several keys to the same sub tree without having to redefine the child sub tree</value>
  </data>
  <data name="ActionTree`1_Mode.Text" xml:space="preserve">
    <value>Node Mode</value>
  </data>
  <data name="ActionTree`1_SubTrees.Help" xml:space="preserve">
    <value>Your decision tree is defined as a sorted dictionary with custom pagination. the string expression defined below is evaluated at runtime and matched to the descision tree keys, to figure out which tree should be run.</value>
  </data>
  <data name="ActionTree`1_SubTrees.Text" xml:space="preserve">
    <value>Decision tree</value>
  </data>
  <data name="DecisionTree.Text" xml:space="preserve">
    <value>Decision Tree</value>
  </data>
  <data name="ListSubTrees.Text" xml:space="preserve">
    <value>List of sub Trees</value>
  </data>
  <data name="MainList_AddNew.Text" xml:space="preserve">
    <value>Add sub tree</value>
  </data>
  <data name="MainList_Export.Text" xml:space="preserve">
    <value>Export sub trees</value>
  </data>
  <data name="MainList_Import.Text" xml:space="preserve">
    <value>Import sub trees</value>
  </data>
  <data name="MultipleActionProvider`1_ActionTreeExpression.Help" xml:space="preserve">
    <value>Enter here a variable or an expression that resolves into an Action Tree to be run</value>
  </data>
  <data name="MultipleActionProvider`1_ActionTreeExpression.Text" xml:space="preserve">
    <value>Action Tree Expression</value>
  </data>
  <data name="SubTrees_AddNew.Text" xml:space="preserve">
    <value>Add decision</value>
  </data>
  <data name="SubTrees_Export.Text" xml:space="preserve">
    <value>Export decision tree</value>
  </data>
  <data name="SubTrees_Import.Text" xml:space="preserve">
    <value>Import decision tree</value>
  </data>
  <data name="SynonymBranch.Text" xml:space="preserve">
    <value>Synonym branch</value>
  </data>
  <data name="ActionTree`1_Conditions.Help" xml:space="preserve">
    <value>You can optionally define a set of conditions to be matched for the current node's actions to be run</value>
  </data>
  <data name="ActionTree`1_Conditions.Text" xml:space="preserve">
    <value>Conditions</value>
  </data>
  <data name="ActionTree`1_CurrentNode.Header" xml:space="preserve">
    <value>Current Node</value>
  </data>
  <data name="ActionTree`1_SubTrees.Header" xml:space="preserve">
    <value>Child Nodes</value>
  </data>
  <data name="Send418.Text" xml:space="preserve">
    <value>Http Status 418 - I'm a teapot</value>
  </data>
  <data name="Send429.Text" xml:space="preserve">
    <value>Http Status 429 - Too Many Requests</value>
  </data>
  <data name="Send503.Text" xml:space="preserve">
    <value>Http Status 503 - Service Unavailable</value>
  </data>
  <data name="CommonTypes.Text" xml:space="preserve">
    <value>Common Type</value>
  </data>
  <data name="DotNetType_CommonType.Help" xml:space="preserve">
    <value>Here is a list of common types used in other places and available for selection</value>
  </data>
  <data name="DotNetType_CommonType.Text" xml:space="preserve">
    <value>Common Types</value>
  </data>
  <data name="DotNetType_EditableTypeName.Help" xml:space="preserve">
    <value>Enter here a .Net type with full syntax. Depending on the underlying engine, you may omit the version part, and the assembly</value>
  </data>
  <data name="DotNetType_EditableTypeName.Text" xml:space="preserve">
    <value>.Net Type</value>
  </data>
  <data name="DotNetType_TypeSelector.Help" xml:space="preserve">
    <value>You can either choose amongst a list of types already used, or enter a new type</value>
  </data>
  <data name="DotNetType_TypeSelector.Text" xml:space="preserve">
    <value>Type Selection</value>
  </data>
  <data name="DotNetType_ValidateNewType.Text" xml:space="preserve">
    <value>Apply Selected Type</value>
  </data>
  <data name="NewType.Text" xml:space="preserve">
    <value>Enter New Type</value>
  </data>
  <data name="VirtualCustomErrorsInfo_Apply.Text" xml:space="preserve">
    <value>Update web.config file with custom errors</value>
  </data>
  <data name="Variables_ApplyUpdates.Text" xml:space="preserve">
    <value>Apply updates and close type list</value>
  </data>
  <data name="CustomHandler.Text" xml:space="preserve">
    <value>Custom Handler</value>
  </data>
  <data name="DynamicHandler.Text" xml:space="preserve">
    <value>Dynamic Handler</value>
  </data>
  <data name="DynamicMethods_AddNew.Text" xml:space="preserve">
    <value>Add New Method</value>
  </data>
  <data name="DynamicMethods_Export.Text" xml:space="preserve">
    <value>Export Methods</value>
  </data>
  <data name="DynamicMethods_Import.Text" xml:space="preserve">
    <value>Import Methods</value>
  </data>
  <data name="PortalKeeperConfig_RestServices.Header" xml:space="preserve">
    <value>Web services</value>
  </data>
  <data name="RestService_DynamicMethods.Help" xml:space="preserve">
    <value>Here you can define individual methods for your web service. Each method is associated to one or several http verbs, and runs a dedicated rule engine with dedicated actions to deal with operation results.</value>
  </data>
  <data name="RestService_DynamicMethods.Text" xml:space="preserve">
    <value>Dynamic Methods</value>
  </data>
  <data name="RestService_HandlerType.Help" xml:space="preserve">
    <value>This is the .Net type for your OpenRasta handler. See &lt;a href="https://github.com/openrasta/openrasta/wiki/Implementing-a-Handler"&gt;the documentation&lt;/a&gt; for instructions on how to develop a custom handler.</value>
  </data>
  <data name="RestService_RestHandlerType.Help" xml:space="preserve">
    <value>You can choose amongst 2 types of OpenRasta handlers. If you have a custom handler available, just enter the corresponding .Net type. Otherwise, you can use a dynamic handler, and define each method individually with a dedicated rule engine.</value>
  </data>
  <data name="RestService_RestHandlerType.Text" xml:space="preserve">
    <value>Rest Handler Type</value>
  </data>
  <data name="KeeperProviderConfig`2_RequestEvents.Header" xml:space="preserve">
    <value>Request events scope</value>
  </data>
  <data name="ProviderSettings_ProviderName.Help" xml:space="preserve">
    <value>This is the name of the action provider used here and configured by the following settings</value>
  </data>
  <data name="ProviderSettings_ProviderName.Text" xml:space="preserve">
    <value>Provider Name</value>
  </data>
  <data name="ModuleConfig`2_BackupToRestore.Help" xml:space="preserve">
    <value>Here is a list of existing backup files to restore. Select one and click the command button to restore.</value>
  </data>
  <data name="ModuleConfig`2_BackupToRestore.Text" xml:space="preserve">
    <value>Backup file to restore</value>
  </data>
  <data name="ModuleConfig`2_Cancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ModuleConfig`2_Reset.Text" xml:space="preserve">
    <value>Reset Config to default</value>
  </data>
  <data name="PortalKeeperConfig_RestoreBackup.Text" xml:space="preserve">
    <value>Restore selected backup</value>
  </data>
  <data name="ModuleConfig`2_Save.Text" xml:space="preserve">
    <value>Save Configuration</value>
  </data>
  <data name="Reset.Warning" xml:space="preserve">
    <value>You are about to restore the default configuration. All customizations will be lost.</value>
  </data>
  <data name="BackupNotRestored.Message" xml:space="preserve">
    <value>Backup could not be restored. Check the event log</value>
  </data>
  <data name="BackupRestored.Message" xml:space="preserve">
    <value>Backup successfully restored</value>
  </data>
  <data name="ModuleConfigInvalid.Message" xml:space="preserve">
    <value>Invalid Config - Check the validators</value>
  </data>
  <data name="ModuleConfigReset.Message" xml:space="preserve">
    <value>Module Configuration succesfully restored to default value</value>
  </data>
  <data name="ModuleConfigSaved.Message" xml:space="preserve">
    <value>Module Configuration succesfully saved according to your location settings</value>
  </data>
  <data name="RestoreBackup.Warning" xml:space="preserve">
    <value>You are about to restore a backup. This will overwrite the current configuration. </value>
  </data>
  <data name="LocationSettingsSaved.Message" xml:space="preserve">
    <value>The location of your config file was successfully changed.</value>
  </data>
  <data name="ModuleConfig`2_Backup.Header" xml:space="preserve">
    <value>Backup Restoration</value>
  </data>
  <data name="ModuleConfig`2_SaveLocationSettings.Text" xml:space="preserve">
    <value>Save New Configuration Settings</value>
  </data>
  <data name="DynamicRestMethod_HttpVerbs.Help" xml:space="preserve">
    <value>Select the Rest Http Verb(s) that this method respond to.</value>
  </data>
  <data name="DynamicRestMethod_HttpVerbs.Text" xml:space="preserve">
    <value>Http Verbs</value>
  </data>
  <data name="Head.Text" xml:space="preserve">
    <value>Head</value>
  </data>
  <data name="HttpVerbs_AddNew.Text" xml:space="preserve">
    <value>Add Http Verb</value>
  </data>
  <data name="Options.Text" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="Put.Text" xml:space="preserve">
    <value>Put</value>
  </data>
  <data name="AdditionalFilters_AddNew.Text" xml:space="preserve">
    <value>Add additional filter</value>
  </data>
  <data name="AdditionalFilters_Export.Text" xml:space="preserve">
    <value>Export additional filters</value>
  </data>
  <data name="AdditionalFilters_Import.Text" xml:space="preserve">
    <value>Import additional filters</value>
  </data>
  <data name="DictionaryEntry_Value.Required" xml:space="preserve">
    <value>Value is Required</value>
  </data>
  <data name="ExpressionFilterInfo_AdditionalFilters.Help" xml:space="preserve">
    <value>Add new filters if you want to fine tune the ordering of several rounds of encoding and transformations. By design, regex transforms are processed before string replaces and char replaces, which are merged for better performances.</value>
  </data>
  <data name="ExpressionFilterInfo_AdditionalFilters.Text" xml:space="preserve">
    <value>Additional Filters</value>
  </data>
  <data name="ExpressionFilterInfo_DefaultCharReplacement.Help" xml:space="preserve">
    <value>Whitespace replacement if any, '-' otherwise</value>
  </data>
  <data name="ExpressionFilterInfo_DefaultCharReplacement.Text" xml:space="preserve">
    <value>Default Char Replacement</value>
  </data>
  <data name="ExpressionFilterInfo_EncodePostProcessing.Help" xml:space="preserve">
    <value>This allows you to apply html or url encoding/decoding to postprocess the string passed to the filter after prior transformations were applied</value>
  </data>
  <data name="ExpressionFilterInfo_EncodePostProcessing.Text" xml:space="preserve">
    <value>Encoding postprocessing</value>
  </data>
  <data name="ExpressionFilterInfo_EncodePreProcessing.Help" xml:space="preserve">
    <value>This allows you to apply html or url encoding/decoding to pre process the string passed to the filter</value>
  </data>
  <data name="ExpressionFilterInfo_EncodePreProcessing.Text" xml:space="preserve">
    <value>Encoding preprocessing</value>
  </data>
  <data name="ExpressionFilterInfo_ForceToLower.Help" xml:space="preserve">
    <value>Check to force lowercase on all chars</value>
  </data>
  <data name="ExpressionFilterInfo_ForceToLower.Text" xml:space="preserve">
    <value>Force lower case</value>
  </data>
  <data name="ExpressionFilterInfo_MaxLength.Help" xml:space="preserve">
    <value>Enter here the max length allowed for the filter's output strings. Extra chars will be removed.</value>
  </data>
  <data name="ExpressionFilterInfo_MaxLength.Required" xml:space="preserve">
    <value>Max length is required</value>
  </data>
  <data name="ExpressionFilterInfo_MaxLength.Text" xml:space="preserve">
    <value>Max Group Length</value>
  </data>
  <data name="ExpressionFilterInfo_PreventDoubleDefaults.Help" xml:space="preserve">
    <value>Prevents the engine to output 2 consecutive default characters as a result of char replaces</value>
  </data>
  <data name="ExpressionFilterInfo_PreventDoubleDefaults.Text" xml:space="preserve">
    <value>Prevent Double defaults</value>
  </data>
  <data name="ExpressionFilterInfo_TransformList.Help" xml:space="preserve">
    <value>Add here any number of transformations applied by the filter. Transformations are applied sequentially by genre. Regex are applied first, then string transforms and finally chars transforms.</value>
  </data>
  <data name="ExpressionFilterInfo_TransformList.Text" xml:space="preserve">
    <value>Transformation list</value>
  </data>
  <data name="ExpressionFilterInfo_Trim.Help" xml:space="preserve">
    <value>Optionally Trim the result after transformations </value>
  </data>
  <data name="ExpressionFilterInfo_Trim.Text" xml:space="preserve">
    <value>Trim</value>
  </data>
  <data name="ExpressionFilterInfo_TrimChar.Help" xml:space="preserve">
    <value>Enter the character to be trimmed</value>
  </data>
  <data name="ExpressionFilterInfo_TrimChar.Text" xml:space="preserve">
    <value>Trim Char</value>
  </data>
  <data name="BotInfo`1_SynchronisationTimeout.Help" xml:space="preserve">
    <value>This is the duration the thread waits for an existing lock to be released before giving up.</value>
  </data>
  <data name="BotInfo`1_SynchronisationTimeout.Text" xml:space="preserve">
    <value>Synchro Timeout</value>
  </data>
  <data name="BotInfo`1_UseMutex.Help" xml:space="preserve">
    <value>You can ensure cross processus safety by preventing concurrent execution of 2 same bots at the same time with a dedicated Mutex</value>
  </data>
  <data name="BotInfo`1_UseMutex.Text" xml:space="preserve">
    <value>Use Mutex</value>
  </data>
  <data name="RuleEngineSettings`1_LogDump.Help" xml:space="preserve">
    <value>If enabled a dump of the specifiied variables will be included in the last log</value>
  </data>
  <data name="RuleEngineSettings`1_LogDump.Text" xml:space="preserve">
    <value>Log Dump</value>
  </data>
  <data name="BotInfo`1_AddDumpToHistory.Help" xml:space="preserve">
    <value>You can choose the dump generated should be added to user history</value>
  </data>
  <data name="BotInfo`1_AddDumpToHistory.Text" xml:space="preserve">
    <value>Add Dump to history</value>
  </data>
  <data name="Item_Delete.Text" xml:space="preserve">
    <value>Delete Item</value>
  </data>
  <data name="Item_Down.Text" xml:space="preserve">
    <value>Move Item Down</value>
  </data>
  <data name="Item_Focus.Text" xml:space="preserve">
    <value>Open Sub Item</value>
  </data>
  <data name="Item_Up.Text" xml:space="preserve">
    <value>Move Item Up</value>
  </data>
  <data name="MessageBasedAction`1_TokenizedText.Help" xml:space="preserve">
    <value>Enter here the textual content of you message based action. You can optionally use tokens to get access to contextual data</value>
  </data>
  <data name="MessageBasedAction`1_TokenizedText.Text" xml:space="preserve">
    <value>Message Content</value>
  </data>
  <data name="SubPathContainer_CloseSubEditor.Text" xml:space="preserve">
    <value>Full Editor</value>
  </data>
  <data name="SubPathContainer_OriginalPath.Help" xml:space="preserve">
    <value>When switching to child entities editing, this is the original subpath selected.</value>
  </data>
  <data name="SubPathContainer_OriginalPath.Text" xml:space="preserve">
    <value>Sub Editor Original Path</value>
  </data>
  <data name="SubPathContainer_Path.Help" xml:space="preserve">
    <value>This is the current selected sub path for the child entity. Click on a node to navigate upward or downward the objects hierarchy.</value>
  </data>
  <data name="SubPathContainer_Path.Text" xml:space="preserve">
    <value>Current Path</value>
  </data>
  <data name="SubPathContainer_SubEntity.Help" xml:space="preserve">
    <value>Here is a subeditor generated for a child entity of the original main one. Use the extra dropdownlist and command button to broader back the scope.</value>
  </data>
  <data name="SubPathContainer_SubEntity.Text" xml:space="preserve">
    <value>Current Node</value>
  </data>
  <data name="BotFarmInfo`1_ResetEncryptionKey.Text" xml:space="preserve">
    <value>Reset Encryption Key</value>
  </data>
  <data name="ResetEncryptionKey.Alert" xml:space="preserve">
    <value>You are about to reset your main encryption key. All user data will become unreadable.</value>
  </data>
  <data name="Instances_Paste.Text" xml:space="preserve">
    <value>Paste</value>
  </data>
  <data name="DeleteUserBot.Alert" xml:space="preserve">
    <value>You are about to delete your user bot parameters and start over from a new version. Proceed?</value>
  </data>
  <data name="ExchangeCredentials_AskTradingFee.Help" xml:space="preserve">
    <value>Enter your individual trading fee for sell orders</value>
  </data>
  <data name="ExchangeCredentials_AskTradingFee.Text" xml:space="preserve">
    <value>Ask Trading Fee</value>
  </data>
  <data name="ExchangeCredentials_BidTradingFee.Help" xml:space="preserve">
    <value>Enter your individual trading fee for buy orders</value>
  </data>
  <data name="ExchangeCredentials_BidTradingFee.Text" xml:space="preserve">
    <value>Bid Trading Fee</value>
  </data>
  <data name="UserBotInfo_Cancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="UserBotInfo_Delete.Text" xml:space="preserve">
    <value>Delete your Bot</value>
  </data>
  <data name="UserBotInfo_Save.Text" xml:space="preserve">
    <value>Save your Bot</value>
  </data>
  <data name="EncryptionInfo_EncryptedKey.Help" xml:space="preserve">
    <value>Your symmetric key was encrypted using the current dotnetnuke instance decryption key. Use the reset keys button to change it to a new or a known version</value>
  </data>
  <data name="EncryptionInfo_EncryptedKey.Text" xml:space="preserve">
    <value>Encrypted Symmetric Key</value>
  </data>
  <data name="EncryptionInfo_EncryptedPrivateKey.Help" xml:space="preserve">
    <value>Your asymmetric private key was encrypted using the current encryption key. Use the reset keys button to change it to a new or a known version</value>
  </data>
  <data name="EncryptionInfo_EncryptedPrivateKey.Text" xml:space="preserve">
    <value>Encrypted Asymmetrical Private Key</value>
  </data>
  <data name="EncryptionInfo_EncryptionKey.Help" xml:space="preserve">
    <value>This is your main password, from which your symmpetrical encryption key</value>
  </data>
  <data name="EncryptionInfo_EncryptionKey.Text" xml:space="preserve">
    <value>Symmetric Key</value>
  </data>
  <data name="EncryptionInfo_EncryptionPrivateKey.Help" xml:space="preserve">
    <value>Those are the parameters used to derive an asymetrical RSA private key</value>
  </data>
  <data name="EncryptionInfo_EncryptionPrivateKey.Text" xml:space="preserve">
    <value>Asymmetric Private Key</value>
  </data>
  <data name="EncryptionInfo_InitVector.Help" xml:space="preserve">
    <value>This is an auto-generated string that serves customizing the encryption process</value>
  </data>
  <data name="EncryptionInfo_InitVector.Text" xml:space="preserve">
    <value>Init Vector</value>
  </data>
  <data name="EncryptionInfo_ResetEncryptionKeys.Text" xml:space="preserve">
    <value>Reset Encryption Keys</value>
  </data>
  <data name="EncryptionInfo_Salt.Help" xml:space="preserve">
    <value>When the encryption key is sealed and encrypted, a salt is generated and saved together with the key.</value>
  </data>
  <data name="EncryptionInfo_Salt.Text" xml:space="preserve">
    <value>Salt</value>
  </data>
  <data name="EncryptionInfo_Seal.Text" xml:space="preserve">
    <value>Seal Keys</value>
  </data>
  <data name="Personalisation.Text" xml:space="preserve">
    <value>Personalisation</value>
  </data>
  <data name="ResetEncryption.Completed" xml:space="preserve">
    <value>Symmetrical and Asymmetrical keys were reset. You can also override them with previously saved versions.</value>
  </data>
  <data name="SealEncryption.Completed" xml:space="preserve">
    <value>Your keys were sealed and a salt generated. Don't forget to save your new configuration. If you want to move your data to a new DotNetNuke instance, you will need to reset and manually restore the previous keys in order for the existing data to be properly processed.</value>
  </data>
  <data name="SealEncryptionKey.Alert" xml:space="preserve">
    <value>Warning: You are about to seal your encryption keys. Make sure you have a copy of them, since they won't be available through the UI nor the API anymore. </value>
  </data>
  <data name="SimpleOrExpressionBase`2_Mode.Help" xml:space="preserve">
    <value>You can choose to directly edit an object value or to enter an expression, which resolves at runtime into an object of the right type</value>
  </data>
  <data name="SimpleOrExpressionBase`2_Mode.Text" xml:space="preserve">
    <value>Definition Mode</value>
  </data>
  <data name="SimpleOrExpressionBase`2_Simple.Help" xml:space="preserve">
    <value>Enter here the direct value to be used</value>
  </data>
  <data name="SimpleOrExpressionBase`2_Simple.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="SmartFileInfo_Compress.Help" xml:space="preserve">
    <value>You can choose to compress the resulting string using gzip compression</value>
  </data>
  <data name="SmartFileInfo_Compress.Text" xml:space="preserve">
    <value>Compress</value>
  </data>
  <data name="SmartFileInfo_Encrypt.Help" xml:space="preserve">
    <value>You can choose to encrypt the resulting string with the symmetrical key available in the corresponding tab, and should saved and sealed before data is produced.</value>
  </data>
  <data name="SmartFileInfo_Encrypt.Text" xml:space="preserve">
    <value>Encrypt</value>
  </data>
  <data name="SmartFileInfo_Encryption.Help" xml:space="preserve">
    <value>The parameters below define how the file will be signed and encrypted. Make sure to save the keys to a safe location and seal them before you release your system as public.</value>
  </data>
  <data name="SmartFileInfo_Encryption.Text" xml:space="preserve">
    <value>Encryption Parameters</value>
  </data>
  <data name="SmartFileInfo_GrantUserEdit.Help" xml:space="preserve">
    <value>Check if you want the target user, if any, to be granted Edit permission to the parent folder where the smart file is saved.</value>
  </data>
  <data name="SmartFileInfo_GrantUserEdit.Text" xml:space="preserve">
    <value>Grant Users Edit Permission</value>
  </data>
  <data name="SmartFileInfo_GrantUserView.Help" xml:space="preserve">
    <value>Check if you want the target user, if any, to be granted view permission to the parent folder where the smart file is saved.</value>
  </data>
  <data name="SmartFileInfo_GrantUserView.Text" xml:space="preserve">
    <value>Grant Users View Permission</value>
  </data>
  <data name="SmartFileInfo_Keys.Header" xml:space="preserve">
    <value>Encryption Keys</value>
  </data>
  <data name="SmartFileInfo_PathFormat.Help" xml:space="preserve">
    <value>Use the corresponding pattern as a template to build the paths to save your smart files to. </value>
  </data>
  <data name="SmartFileInfo_PathFormat.Text" xml:space="preserve">
    <value>Path Format</value>
  </data>
  <data name="SmartFileInfo_Processing.Header" xml:space="preserve">
    <value>Processing</value>
  </data>
  <data name="SmartFileInfo_Sign.Help" xml:space="preserve">
    <value>You can choose to sign the Xml documents created through serialization, such that each signed document is checked for authenticity of the signature upon retrieval. The key used is the asymmetrical key available in the corresponding tab and should saved and sealed before data is produced.</value>
  </data>
  <data name="SmartFileInfo_Sign.Text" xml:space="preserve">
    <value>Sign</value>
  </data>
  <data name="SmartFileInfo_Storage.Header" xml:space="preserve">
    <value>Storage Location</value>
  </data>
  <data name="SmartFiles.Text" xml:space="preserve">
    <value>Smart Files</value>
  </data>
  <data name="SmartFolder`1_FolderPath.Help" xml:space="preserve">
    <value>The following data define where the folder is located</value>
  </data>
  <data name="SmartFolder`1_FolderPath.Text" xml:space="preserve">
    <value>Folder Path</value>
  </data>
  <data name="SmartFolder`1_SelectedFile.Help" xml:space="preserve">
    <value>Select a file from the corresponding list to display its content.</value>
  </data>
  <data name="SmartFolder`1_SelectedFile.Text" xml:space="preserve">
    <value>Select File</value>
  </data>
  <data name="UserBotSettings`1_Management.Header" xml:space="preserve">
    <value>Management</value>
  </data>
  <data name="UserBotSettings`1_Storage.Header" xml:space="preserve">
    <value>Storage</value>
  </data>
  <data name="UserBotSettings`1_Storage.Help" xml:space="preserve">
    <value>Choose how you want to save the user bot data. Several persistence systems are proposed</value>
  </data>
  <data name="UserBotSettings`1_Storage.Text" xml:space="preserve">
    <value>Storage Type</value>
  </data>
  <data name="UserBotSettings`1_StorageSettings.Help" xml:space="preserve">
    <value>A range of options let you define how the data is stored in the choosen persistence system. </value>
  </data>
  <data name="UserBotSettings`1_StorageSettings.Text" xml:space="preserve">
    <value>Storage Settings</value>
  </data>
  <data name="UserBotSettings`1_UserBots.Help" xml:space="preserve">
    <value>Below is a list of all user bot files saved according to your configuration</value>
  </data>
  <data name="UserBotSettings`1_UserBots.Text" xml:space="preserve">
    <value>Registered User Bots</value>
  </data>
  <data name="SmartFile_Key.Header" xml:space="preserve">
    <value>Item Key</value>
  </data>
  <data name="SmartFolder`1_CurrentFile.Help" xml:space="preserve">
    <value>Smart files are embedded files with metadata, optional optimisation and online editing.</value>
  </data>
  <data name="SmartFolder`1_CurrentFile.Text" xml:space="preserve">
    <value>File Details</value>
  </data>
  <data name="UserBotSaved.Message" xml:space="preserve">
    <value>Your bot settings were updated</value>
  </data>
  <data name="EntityKey_Application.Text" xml:space="preserve">
    <value>Application</value>
  </data>
  <data name="EntityKey_Entity.Text" xml:space="preserve">
    <value>Entity</value>
  </data>
  <data name="EntityKey_Field.Text" xml:space="preserve">
    <value>Field</value>
  </data>
  <data name="EntityKey_PortalId.Text" xml:space="preserve">
    <value>Portal</value>
  </data>
  <data name="EntityKey_UserName.Text" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="SmartFileCompressed.Message" xml:space="preserve">
    <value>File payload was compressed</value>
  </data>
  <data name="SmartFileDecompressed.Message" xml:space="preserve">
    <value>File Payload was decompressed</value>
  </data>
  <data name="SmartFile_Compress.Text" xml:space="preserve">
    <value>Compress</value>
  </data>
  <data name="SmartFile_Compressed.Help" xml:space="preserve">
    <value>Indicates if the current file content is compressed</value>
  </data>
  <data name="SmartFile_Compressed.Text" xml:space="preserve">
    <value>Is Compressed</value>
  </data>
  <data name="SmartFile_Content.Header" xml:space="preserve">
    <value>File Content</value>
  </data>
  <data name="SmartFile_Decompress.Text" xml:space="preserve">
    <value>Decompress</value>
  </data>
  <data name="SmartFile_Encrypt.Text" xml:space="preserve">
    <value>Encrypt</value>
  </data>
  <data name="SmartFile_Encrypted.Help" xml:space="preserve">
    <value>Indicates if the current file content is encrypted</value>
  </data>
  <data name="SmartFile_Encrypted.Text" xml:space="preserve">
    <value>Encrypted</value>
  </data>
  <data name="SmartFile_HasEncrypter.Help" xml:space="preserve">
    <value>Indicates if the file is currently loaded with a custom encrypter</value>
  </data>
  <data name="SmartFile_HasEncrypter.Text" xml:space="preserve">
    <value>Has Encrypter</value>
  </data>
  <data name="SmartFile_Key.Text" xml:space="preserve">
    <value>Object Key</value>
  </data>
  <data name="SmartFile_MD5Checksum.Help" xml:space="preserve">
    <value>Computes a live MD5 Checksum of the actual content</value>
  </data>
  <data name="SmartFile_MD5Checksum.Text" xml:space="preserve">
    <value>MD5  Checksum</value>
  </data>
  <data name="SmartFile_EditPayLoad.Help" xml:space="preserve">
    <value>Above is the full content of the file, in the current state.</value>
  </data>
  <data name="SmartFile_EditPayLoad.Text" xml:space="preserve">
    <value>File Content</value>
  </data>
  <data name="SmartFile_Sha256Checksum.Help" xml:space="preserve">
    <value>Computes a live SHA256 Hash of the actual content</value>
  </data>
  <data name="SmartFile_Sha256Checksum.Text" xml:space="preserve">
    <value>SHA256 Hash</value>
  </data>
  <data name="SmartFile_ShowPayLoad.Help" xml:space="preserve">
    <value>Check to display the actual file content as a String</value>
  </data>
  <data name="SmartFile_ShowPayLoad.Text" xml:space="preserve">
    <value>Display File Content</value>
  </data>
  <data name="SmartFile_Signed.Help" xml:space="preserve">
    <value>Indicates if the inner Xml Document was signed upon saving. If so, the signature will get verified upon retrieval if applicable.</value>
  </data>
  <data name="SmartFile_Signed.Text" xml:space="preserve">
    <value>Is Signed</value>
  </data>
  <data name="SmartFile_UseCustomEncryption.Help" xml:space="preserve">
    <value>Check to enter a new encryption key to be used for encryption / decryption according to the current state</value>
  </data>
  <data name="SmartFile_UseCustomEncryption.Text" xml:space="preserve">
    <value>Enter custom encryption key</value>
  </data>
  <data name="SmartFile`1_ShowValue.Help" xml:space="preserve">
    <value>Check to display an editing form of the actual deserialized object. You'll need to click the update button for the file content to reflect your changes</value>
  </data>
  <data name="SmartFile`1_ShowValue.Text" xml:space="preserve">
    <value>Show Value</value>
  </data>
  <data name="SmartFile`1_UpdatePayload.Text" xml:space="preserve">
    <value>Update File Content</value>
  </data>
  <data name="SmartFile`1_Value.Header" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="SmartFile`1_Value.Help" xml:space="preserve">
    <value>The form below contains an actual in memory representation of the object as deserialized from the file content. You'll need to click the update button for the file content to reflect your changes</value>
  </data>
  <data name="SmartFile`1_Value.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="SmartFile_HasCustomEncryption.Help" xml:space="preserve">
    <value>Checked if the content was encrypted with a custom encrypter, which you need to load or alternatively to provide through custom encryption key, in order for the content to be decrypted.</value>
  </data>
  <data name="SmartFile_HasCustomEncryption.Text" xml:space="preserve">
    <value>Has Custom Encryption</value>
  </data>
  <data name="SmartFile_Decrypt.Text" xml:space="preserve">
    <value>Decrypt</value>
  </data>
  <data name="SmartFile_Salt.Help" xml:space="preserve">
    <value>This is the salt that was generated upon encrypting the file content</value>
  </data>
  <data name="SmartFile_Salt.Text" xml:space="preserve">
    <value>Encryption Salt</value>
  </data>
  <data name="SmartFolder`1_HasEncrypter.Help" xml:space="preserve">
    <value>If checked, indicates that a custom encrypter was associated to the folder to allow for encrypting/decrypting file content</value>
  </data>
  <data name="SmartFolder`1_HasEncrypter.Text" xml:space="preserve">
    <value>Encrypter Loaded</value>
  </data>
  <data name="CacheableAction`1_ProcessTokens.Help" xml:space="preserve">
    <value>If enabled, you can add tokens to the caching key format, to be replaced at runtime with contextual values such as parameters or local variables</value>
  </data>
  <data name="CacheableAction`1_ProcessTokens.Text" xml:space="preserve">
    <value>Process Tokens</value>
  </data>
  <data name="FileAccessActionProvider`1_FilePath.Help" xml:space="preserve">
    <value>There are several ways to specify a file path, from a string expression, or from the direct selction of a dnn file.</value>
  </data>
  <data name="FileAccessActionProvider`1_FilePath.Text" xml:space="preserve">
    <value>File Path</value>
  </data>
  <data name="FilePathInfo_ChooseDnnFile.Help" xml:space="preserve">
    <value>You can choose to select an existing file rather than specifying the file path. Note that in this case, the file id will be saved, so you should make sure that the file does not risk being deleted or resynchronised from dnn file system.</value>
  </data>
  <data name="FilePathInfo_ChooseDnnFile.Text" xml:space="preserve">
    <value>Select DotNetNuke File</value>
  </data>
  <data name="FilePathInfo_DnnFile.Help" xml:space="preserve">
    <value>Use the form below to select your file</value>
  </data>
  <data name="FilePathInfo_DnnFile.Text" xml:space="preserve">
    <value>DotNetNuke File</value>
  </data>
  <data name="GetMarkets.Text" xml:space="preserve">
    <value>Get Markets</value>
  </data>
  <data name="KeyValuePair`2_Value.Required" xml:space="preserve">
    <value>Value is required</value>
  </data>
  <data name="LoopActionProvider`1_MaxIterations.Help" xml:space="preserve">
    <value>Additionally to the loop condition, you can specify an absolute maximum number of iterations (0 = unlimited)</value>
  </data>
  <data name="LoopActionProvider`1_MaxIterations.Text" xml:space="preserve">
    <value>Max Number of Iterations</value>
  </data>
  <data name="MissingFile.Message" xml:space="preserve">
    <value>Please specify a file to import</value>
  </data>
  <data name="Rules_Paste.Text" xml:space="preserve">
    <value>Paste Rules</value>
  </data>
  <data name="SubPathContainer_LevelUp.Text" xml:space="preserve">
    <value>Level Up</value>
  </data>
  <data name="FileWriteActionProviderBase`1_AppendContent.Help" xml:space="preserve">
    <value>You can choose to append content to existing file rather than overwriting.</value>
  </data>
  <data name="FileWriteActionProviderBase`1_AppendContent.Text" xml:space="preserve">
    <value>Append Content</value>
  </data>
  <data name="AboveNormal.Text" xml:space="preserve">
    <value>High</value>
  </data>
  <data name="ActionProvider`1_NbConcurrentThreads.Help" xml:space="preserve">
    <value>Number of concurrent threads allowed by the semaphore to enter the named section (system-wide)</value>
  </data>
  <data name="ActionProvider`1_NbConcurrentThreads.Text" xml:space="preserve">
    <value>Nb Concurrent Threads</value>
  </data>
  <data name="ActionProvider`1_SemaphoreName.Help" xml:space="preserve">
    <value>This is the system-wide name that will indentify your blocking semaphore. Example: HttpRequest-www.cryptsy.com</value>
  </data>
  <data name="ActionProvider`1_SemaphoreName.Text" xml:space="preserve">
    <value>Semaphore Name</value>
  </data>
  <data name="ActionProvider`1_SynchronisationTimeout.Help" xml:space="preserve">
    <value>Set a non zero value if you want a blocked thread to give up waiting after a time out. In such a case, the action is skipped and returns false</value>
  </data>
  <data name="ActionProvider`1_SynchronisationTimeout.Text" xml:space="preserve">
    <value>Synchronization Timeout</value>
  </data>
  <data name="ActionProvider`1_UseSemaphore.Help" xml:space="preserve">
    <value>When you start running agents or actions asynchronously, you may observe that several actions run simultaneously. This might be detrimental in certain cases: for instance you may want to control the rate of concurrent http requests to a particular domain to avoid reaching advertised limits. Using a semaphore ensures that only a certain amount of concurrent threads can enter a named section simulatneously. Use that mechanims together with the addition of sleep time to precisally adjut the running rate. Also, if you run a web farm, you might have to  make sure that your bot is configured to run on a single server. </value>
  </data>
  <data name="ActionProvider`1_UseSemaphore.Text" xml:space="preserve">
    <value>Use Semaphore</value>
  </data>
  <data name="BelowNormal.Text" xml:space="preserve">
    <value>Low</value>
  </data>
  <data name="Highest.Text" xml:space="preserve">
    <value>Highest</value>
  </data>
  <data name="Lowest.Text" xml:space="preserve">
    <value>Lowest</value>
  </data>
  <data name="ModuleConfig`2_RestoreBackup.Text" xml:space="preserve">
    <value>Restore Selected Backup</value>
  </data>
  <data name="TaskQueueInfo_EnablePerformanceCounters.Help" xml:space="preserve">
    <value>If checked, this enable collecting Smart Thread Pool performances to a dedicated Windows Performance Counter</value>
  </data>
  <data name="TaskQueueInfo_EnablePerformanceCounters.Text" xml:space="preserve">
    <value>Enable Performance Counters</value>
  </data>
  <data name="TaskQueueInfo_PerformanceCounterInstanceName.Help" xml:space="preserve">
    <value>The Name of your custom Data collector. Since all asynchronous queues will log the same metrics, choose a name to identify this particular queue.</value>
  </data>
  <data name="TaskQueueInfo_PerformanceCounterInstanceName.Text" xml:space="preserve">
    <value>Collector Instance Name</value>
  </data>
  <data name="TaskQueueInfo_ThreadPriority.Text" xml:space="preserve">
    <value>Thread Priority</value>
  </data>
  <data name="UserBotInfo_IsAuthenticated.Help" xml:space="preserve">
    <value>That indicator determines whether the user can save edits of the user bot parameters</value>
  </data>
  <data name="UserBotInfo_IsAuthenticated.Text" xml:space="preserve">
    <value>Is Authenticated</value>
  </data>
  <data name="UserVariableInfo_UseSubStorage.Help" xml:space="preserve">
    <value>If checked, saves that parameter to a distinct store from the other user bots parameters, for performances fine-tuning</value>
  </data>
  <data name="UserVariableInfo_UseSubStorage.Text" xml:space="preserve">
    <value>Use Dedicated Storage</value>
  </data>
  <data name="AdditionalFilters_Copy.Text" xml:space="preserve">
    <value>Copy Filters</value>
  </data>
  <data name="RequestsCapInfo_MaxTotalKBs.Help" xml:space="preserve">
    <value>This sets a limit in the max total size of requests for the selected source and the selected period of time. Note that only request size is included by default.</value>
  </data>
  <data name="RequestsCapInfo_MaxTotalKBs.Text" xml:space="preserve">
    <value>Max Total KBs</value>
  </data>
  <data name="TransformList_Copy.Text" xml:space="preserve">
    <value>Copy Transforms</value>
  </data>
  <data name="CustomCondition.Text" xml:space="preserve">
    <value>Custom Condition</value>
  </data>
  <data name="RequestsCapInfo_Decription.Help" xml:space="preserve">
    <value>Enter optional comments to describe what the current request limit is trying to achieve.</value>
  </data>
  <data name="RequestsCapInfo_Decription.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="BotInfo`1_InstanceNumber.Help" xml:space="preserve">
    <value>If </value>
  </data>
  <data name="BotInfo`1_InstanceNumber.Text" xml:space="preserve">
    <value>Instance Number</value>
  </data>
  <data name="ActionProvider`1_DisablePerformanceLogger.Help" xml:space="preserve">
    <value>If the action is repeated a lot of times per run, it might be more convenient to silent the performance logger over that specific action to keep the total number of steps recorded tractable.</value>
  </data>
  <data name="ActionProvider`1_DisablePerformanceLogger.Text" xml:space="preserve">
    <value>Disable Performance Logger</value>
  </data>
  <data name="LoopActionProvider`1_LogParticularSteps.Help" xml:space="preserve">
    <value>If you enable the performance logger, you might want to restrict the recording of specific loop instances, e.g. by default only the first one</value>
  </data>
  <data name="LoopActionProvider`1_LogParticularSteps.Text" xml:space="preserve">
    <value>Log Specific Steps</value>
  </data>
  <data name="LoopActionProvider`1_StepsToLogAsString.Help" xml:space="preserve">
    <value>Enter a semi-colon separated list of Integer indexes for the loop instances to log.</value>
  </data>
  <data name="LoopActionProvider`1_StepsToLogAsString.Text" xml:space="preserve">
    <value>Steps to Log</value>
  </data>
  <data name="ObjectAction_LockTarget.Help" xml:space="preserve">
    <value>In case of concurrent runs through the use of task queues, it is advised to lock objects in case the subsequent calls are not thread safe.</value>
  </data>
  <data name="ObjectAction_LockTarget.Text" xml:space="preserve">
    <value>Lock Target</value>
  </data>
  <data name="LoopActionProvider`1_AgregateLogSteps.Help" xml:space="preserve">
    <value>If performance logger is activated, will individual loop instance logs into agregated steps</value>
  </data>
  <data name="LoopActionProvider`1_AgregateLogSteps.Text" xml:space="preserve">
    <value>Agregate Log Steps</value>
  </data>
  <data name="BotInfo`1_NoSave.Help" xml:space="preserve">
    <value>This cancels the history and parameters saving at the end of a bot run (~10-50ms overhead)</value>
  </data>
  <data name="BotInfo`1_NoSave.Text" xml:space="preserve">
    <value>No Save</value>
  </data>
  <data name="BotInfo`1_RunSeveralInstances.Help" xml:space="preserve">
    <value>You can optionnally start several instances of the bot. This might be useful when running bots asynchronously.</value>
  </data>
  <data name="BotInfo`1_RunSeveralInstances.Text" xml:space="preserve">
    <value>Run Several Instances</value>
  </data>
  <data name="BotInfo`1_SharedContext.Help" xml:space="preserve">
    <value>When several instances are started, the initial bot context is cloned for a fresh start on each run. Sharing the context saves some time, but it will certainly bring erroneous results, although Monitors are generally used to prevent cross thread locks.</value>
  </data>
  <data name="BotInfo`1_SharedContext.Text" xml:space="preserve">
    <value>Shared Context</value>
  </data>
  <data name="TaskQueueInfo_IdleTimeout.Help" xml:space="preserve">
    <value>The Task Queue engine uses the smartthreadpool component, which is capable of adjusting the number of active threads up to the specified thread number. When a thread is idle, it is stopped after the given timeout to free resources.</value>
  </data>
  <data name="TaskQueueInfo_IdleTimeout.Text" xml:space="preserve">
    <value>Idle Timeout</value>
  </data>
  <data name="TaskQueueInfo_MainSettings.Header" xml:space="preserve">
    <value>Main Settings</value>
  </data>
  <data name="RuleEngineSettings`1_ExceptionDumpAllVars.Help" xml:space="preserve">
    <value>In case of Exception during a run, you have the possibility to dump all current variables or alternatively to selectively dump a subset of variable expressions.</value>
  </data>
  <data name="RuleEngineSettings`1_ExceptionDumpAllVars.Text" xml:space="preserve">
    <value>Dump All Vars On Exception</value>
  </data>
  <data name="Base64String.Text" xml:space="preserve">
    <value>Base 64</value>
  </data>
  <data name="Bytes.Text" xml:space="preserve">
    <value>Bytes</value>
  </data>
  <data name="SignatureFailedToVerify.Message" xml:space="preserve">
    <value>Signature failed to verify with the encryption available</value>
  </data>
  <data name="SignatureRemoved.Message" xml:space="preserve">
    <value>Signature succesfully removed</value>
  </data>
  <data name="SmartFileDecrypted.Message" xml:space="preserve">
    <value>Smart File sucessfuly decrypted</value>
  </data>
  <data name="SmartFileSigned.Message" xml:space="preserve">
    <value>Smart File successfully signed using available encryption</value>
  </data>
  <data name="SmartFile_EditPayLoadFormat.Help" xml:space="preserve">
    <value>You can choose to visualize and edit the content of the SmartFile in various formats</value>
  </data>
  <data name="SmartFile_EditPayLoadFormat.Text" xml:space="preserve">
    <value>PayLoad Format</value>
  </data>
  <data name="SmartFile_RemoveSignature.Text" xml:space="preserve">
    <value>Remove Signature</value>
  </data>
  <data name="SmartFile_Sign.Text" xml:space="preserve">
    <value>Sign</value>
  </data>
  <data name="SmartFile_FormattedSize.Help" xml:space="preserve">
    <value>This is the size of the payload in bytes using utf-8 encoding</value>
  </data>
  <data name="SmartFile_FormattedSize.Text" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="SmartFile_Verify.Text" xml:space="preserve">
    <value>Verify</value>
  </data>
  <data name="SmartFolder`1_NoCache.Help" xml:space="preserve">
    <value>Smart File documents are normally kept in cache for better performances. Uncheck for a DB call on each call back.</value>
  </data>
  <data name="SmartFolder`1_NoCache.Text" xml:space="preserve">
    <value>No Cache</value>
  </data>
  <data name="BotFarmInfo`1_Enabled.Help" xml:space="preserve">
    <value>This is a central switch for scheduled bots. You can still run specific bots manually when the sheduled farm is off.</value>
  </data>
  <data name="BotFarmInfo`1_Enabled.Text" xml:space="preserve">
    <value>Enable Scheduler</value>
  </data>
  <data name="SignatureVerified.Message" xml:space="preserve">
    <value>The signature was checked and matches the available encryption</value>
  </data>
  <data name="ActionCommands_Copy.Text" xml:space="preserve">
    <value>Copy Action Commands</value>
  </data>
  <data name="SmartFileEncrypted.Message" xml:space="preserve">
    <value>Smart File content successfully encrypted</value>
  </data>
  <data name="SmartFileInfo_EnforceEncryption.Help" xml:space="preserve">
    <value>If checked, the engine will refuse to serve unencrypted files and throw exceptions instead </value>
  </data>
  <data name="SmartFileInfo_EnforceEncryption.Text" xml:space="preserve">
    <value>Mandatory Encryption</value>
  </data>
  <data name="SmartFileInfo_EnforceSignature.Help" xml:space="preserve">
    <value>If checked, the engine will refuse to serve unsigned files and throw exceptions instead</value>
  </data>
  <data name="SmartFileInfo_EnforceSignature.Text" xml:space="preserve">
    <value>Mandatory Signature</value>
  </data>
  <data name="SmartFile_CustomEncryption.Help" xml:space="preserve">
    <value>Enter here the custom encryption key to encrypt / decrypt the file content</value>
  </data>
  <data name="SmartFile_CustomEncryption.Text" xml:space="preserve">
    <value>Custom Encryption</value>
  </data>
  <data name="Adapters_AddNew.Text" xml:space="preserve">
    <value>Add New Control Adapter</value>
  </data>
  <data name="Adapters_Copy.Text" xml:space="preserve">
    <value>Copy Control Adapters</value>
  </data>
  <data name="Adapters_Export.Text" xml:space="preserve">
    <value>Export Control Adapters</value>
  </data>
  <data name="Adapters_Import.Text" xml:space="preserve">
    <value>Import Control Adapters</value>
  </data>
  <data name="Adapters_Paste.Text" xml:space="preserve">
    <value>Paste Control Adapters</value>
  </data>
  <data name="After.Text" xml:space="preserve">
    <value>After</value>
  </data>
  <data name="Before.Text" xml:space="preserve">
    <value>Before</value>
  </data>
  <data name="ChildControlEvent.Text" xml:space="preserve">
    <value>Child Control Event</value>
  </data>
  <data name="ControlAdaptersConfig_Adapters.Help" xml:space="preserve">
    <value>You can add, edit, export or import a collection of control adapters settings. </value>
  </data>
  <data name="ControlAdaptersConfig_Adapters.Text" xml:space="preserve">
    <value>Adapters</value>
  </data>
  <data name="ControlAdaptersConfig_Enabled.Help" xml:space="preserve">
    <value>This is a central switch to activate or deactivate all control adapters defined here.</value>
  </data>
  <data name="ControlAdaptersConfig_Enabled.Text" xml:space="preserve">
    <value>Enable</value>
  </data>
  <data name="ControlAdapterSettings_AdaptedControlPath.Help" xml:space="preserve">
    <value>Enter the path of an aspx page or an ascx user control to be adapted. The corresponding control will be loaded once at runtime to figure out its generated type.</value>
  </data>
  <data name="ControlAdapterSettings_AdaptedControlPath.Text" xml:space="preserve">
    <value>Adapted Control Path</value>
  </data>
  <data name="ControlAdapterSettings_AdaptedControlType.Help" xml:space="preserve">
    <value>The is the qualified .Net type of the control to be adapted. </value>
  </data>
  <data name="ControlAdapterSettings_AdaptedControlType.Text" xml:space="preserve">
    <value>Adapted Control Type</value>
  </data>
  <data name="ControlAdapterSettings_AdaptedMode.Help" xml:space="preserve">
    <value>You can either designate a control to be adapted by its .Net type name, or by its path for a Page or a User Control. The latter is paticularly userful with codefile user control, the  assembly of which might be unknown at runtime. The underlying .Net type is obtained by instanciating the control once. </value>
  </data>
  <data name="ControlAdapterSettings_AdaptedMode.Text" xml:space="preserve">
    <value>Adapted Control Mode</value>
  </data>
  <data name="ControlAdapterSettings_AdapterControlType.Help" xml:space="preserve">
    <value>The is the qualified .Net type of the adapter control class; it should inherit directly or indirectly from the ControlAdapter base class.</value>
  </data>
  <data name="ControlAdapterSettings_AdapterControlType.Text" xml:space="preserve">
    <value>Adapter Control Type</value>
  </data>
  <data name="ControlAdapterSettings_AdapterMode.Help" xml:space="preserve">
    <value>There are 2 Control Adapter modes: Type, where you enter the .Net type name of a class, that inherits the base ControlAdapter or WebControlAdapter classes, or Dynamic Adapters, which are handlers built with the same engine as the firewall or scheduled bots.</value>
  </data>
  <data name="ControlAdapterSettings_AdapterMode.Text" xml:space="preserve">
    <value>Control Adapter Mode</value>
  </data>
  <data name="ControlAdapterSettings_DynamicHandlers.Help" xml:space="preserve">
    <value>Dynamic Handlers are individual actions to be attached to a life cycle event of a control or a child control .</value>
  </data>
  <data name="ControlAdapterSettings_DynamicHandlers.Text" xml:space="preserve">
    <value>Dynamic Handlers</value>
  </data>
  <data name="DynamicHandlerSettings_HandlerRegistrationStep.Help" xml:space="preserve">
    <value>If some your dynamic handlers are hooked to control or child controls events, you need to specify when to register those event handlers, depending on when the controls are available for hooking.</value>
  </data>
  <data name="DynamicHandlerSettings_HandlerRegistrationStep.Text" xml:space="preserve">
    <value>Event Handler Registration Step</value>
  </data>
  <data name="ControlEvent.Text" xml:space="preserve">
    <value>Control Event</value>
  </data>
  <data name="CreateChildControls.Text" xml:space="preserve">
    <value>CreateChildControls</value>
  </data>
  <data name="DynamicAdapter.Text" xml:space="preserve">
    <value>Dynamic Adapter</value>
  </data>
  <data name="DynamicHandlerSettings_BaseHandlerMode.Help" xml:space="preserve">
    <value>This indicates when the native handler should run before, after, the dynamic handler, or if the original handler must be removed (only available for overrides atm, but events shouldn't be too hard to support).</value>
  </data>
  <data name="DynamicHandlerSettings_BaseHandlerMode.Text" xml:space="preserve">
    <value>Base Handler Mode</value>
  </data>
  <data name="DynamicHandlerSettings_ChildControlId.Help" xml:space="preserve">
    <value>If the dynamic handler is configured to handle a child control event, the child control to be hooked is found by its id.</value>
  </data>
  <data name="DynamicHandlerSettings_ChildControlId.Text" xml:space="preserve">
    <value>Child Control Id</value>
  </data>
  <data name="DynamicHandlerSettings_ControlEventName.Help" xml:space="preserve">
    <value>In order to hook the dynamic handler up to the adapted control or one of its child controls event, you must provide the event name.</value>
  </data>
  <data name="DynamicHandlerSettings_ControlEventName.Text" xml:space="preserve">
    <value>Control Event</value>
  </data>
  <data name="DynamicHandlerSettings_MainControlStep.Help" xml:space="preserve">
    <value>Defines when to run the configured handler. It can be associated to one of the available overrides, a control's event or a child control's event.</value>
  </data>
  <data name="DynamicHandlerSettings_MainControlStep.Text" xml:space="preserve">
    <value>Handler Step</value>
  </data>
  <data name="DynamicHandlers_AddNew.Text" xml:space="preserve">
    <value>Add New Handler</value>
  </data>
  <data name="DynamicHandlers_Copy.Text" xml:space="preserve">
    <value>Copy Handlers</value>
  </data>
  <data name="DynamicHandlers_Export.Text" xml:space="preserve">
    <value>Export Handlers</value>
  </data>
  <data name="DynamicHandlers_Import.Text" xml:space="preserve">
    <value>Import Handlers</value>
  </data>
  <data name="DynamicHandlers_Paste.Text" xml:space="preserve">
    <value>Paste Handlers</value>
  </data>
  <data name="OnInit.Text" xml:space="preserve">
    <value>OnInit</value>
  </data>
  <data name="OnLoad.Text" xml:space="preserve">
    <value>OnLoad</value>
  </data>
  <data name="OnPreRender.Text" xml:space="preserve">
    <value>OnPreRender</value>
  </data>
  <data name="OnUnload.Text" xml:space="preserve">
    <value>OnUnload</value>
  </data>
  <data name="Path.Text" xml:space="preserve">
    <value>Path</value>
  </data>
  <data name="PortalKeeperConfig_ControlAdapters.Header" xml:space="preserve">
    <value>Control Adapters</value>
  </data>
  <data name="PortalKeeperConfig_ControlAdapters.Help" xml:space="preserve">
    <value>In this section, you manage a collection of control adapters, to be dynamically registered during asp.net lifecycle. They can be traditional strongly typed Control adapters, or dynamical adapters leveraging the same engine as the firewall and schedule bots.</value>
  </data>
  <data name="PortalKeeperConfig_ControlAdapters.Text" xml:space="preserve">
    <value>Attach Adapters to compiled or user controls </value>
  </data>
  <data name="Removed.Text" xml:space="preserve">
    <value>Removed</value>
  </data>
  <data name="Render.Text" xml:space="preserve">
    <value>Render</value>
  </data>
  <data name="RenderChildren.Text" xml:space="preserve">
    <value>RenderChildren</value>
  </data>
  <data name="RuleEngineSettings`1_Actions.Header" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="RuleEngineSettings`1_Actions.Help" xml:space="preserve">
    <value>Here is a sequential list of actions to be executed. Don't forget to update the providers section for portability.</value>
  </data>
  <data name="RuleEngineSettings`1_Actions.Text" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="Type.Text" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="ActionProviders_Copy.Text" xml:space="preserve">
    <value>Copy Action Providers</value>
  </data>
  <data name="ActionProviders_Paste.Text" xml:space="preserve">
    <value>Paste Action Providers</value>
  </data>
  <data name="ConditionProviders_Copy.Text" xml:space="preserve">
    <value>Copy Condition Providers</value>
  </data>
  <data name="ConditionProviders_Paste.Text" xml:space="preserve">
    <value>Paste Condition Providers</value>
  </data>
  <data name="RuleEngineSettings`1_ImportAvailableProviders.Text" xml:space="preserve">
    <value>Import Available Providers</value>
  </data>
  <data name="ActionProvider`1_TechnicalSettings.Header" xml:space="preserve">
    <value>Technical Settings</value>
  </data>
  <data name="Random.Text" xml:space="preserve">
    <value>Random</value>
  </data>
  <data name="Sequential.Text" xml:space="preserve">
    <value>Sequential</value>
  </data>
  <data name="WebProxyPool_PickMethod.Help" xml:space="preserve">
    <value>Amongst the available proxies from the pool, you can choose to process them sequentially or in random order.</value>
  </data>
  <data name="WebProxyPool_PickMethod.Text" xml:space="preserve">
    <value>Selection Method</value>
  </data>
  <data name="DynamicHandlerSettings`1_EditChildControl.Help" xml:space="preserve">
    <value>A typed control handler will let you select from control ids declared as fields in the adapted control type. You can altenatively manually enter the control ID, as with untyped dynamic handlers.</value>
  </data>
  <data name="DynamicHandlerSettings`1_EditChildControl.Text" xml:space="preserve">
    <value>Edit Child Control ID</value>
  </data>
  <data name="DynamicHandlerSettings`1_EditEventName.Help" xml:space="preserve">
    <value>A typed control handler will let you select from control events obtained by Reflection over the adapted control type or its child control when applicable. You can altenatively manually enter the event name.</value>
  </data>
  <data name="DynamicHandlerSettings`1_EditEventName.Text" xml:space="preserve">
    <value>Edit Event Name</value>
  </data>
  <data name="DynamicHandlerSettings`1_SelectedChildControlId.Help" xml:space="preserve">
    <value>The list is built by reflection on the adapted control type with control fields</value>
  </data>
  <data name="DynamicHandlerSettings`1_SelectedChildControlId.Text" xml:space="preserve">
    <value>Select Child Control ID</value>
  </data>
  <data name="DynamicHandlerSettings`1_SelectedControlEventName.Help" xml:space="preserve">
    <value>The list is built by reflection on the adapted control type or its child control when applicable.</value>
  </data>
  <data name="DynamicHandlerSettings`1_SelectedControlEventName.Text" xml:space="preserve">
    <value>Select Control Event</value>
  </data>
  <data name="Actions.Text" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="ByUserId.Text" xml:space="preserve">
    <value>By UserId</value>
  </data>
  <data name="ByUserinfo.Text" xml:space="preserve">
    <value>By Userinfo</value>
  </data>
  <data name="ByUsername.Text" xml:space="preserve">
    <value>By Username</value>
  </data>
  <data name="CurrentUser.Text" xml:space="preserve">
    <value>Current User</value>
  </data>
  <data name="DynamicHandlerSettings`1_AvailableParameters.Help" xml:space="preserve">
    <value>This is a list of additional parameters available during the action sequence as obtained from the adapter overriden method or event signatures.</value>
  </data>
  <data name="DynamicHandlerSettings`1_AvailableParameters.Text" xml:space="preserve">
    <value>Additional Parameters</value>
  </data>
  <data name="DynamicHandlerSettings`1_ChildControlDeclaringType.Help" xml:space="preserve">
    <value>The following type is obtained by Reflection by looking up the adapted control type and its base types' private fields. If the targeted child control does not correspond to a field, yet is still available through a FindControl(id) call, you can safely ignore it.</value>
  </data>
  <data name="DynamicHandlerSettings`1_ChildControlDeclaringType.Text" xml:space="preserve">
    <value>Child Control Declaring Type</value>
  </data>
  <data name="DynamicHandlerSettings`1_EventControlTypeAsString.Help" xml:space="preserve">
    <value>When targetting a child control, the following type is obtained by Reflection by looking up the adapted control type and its base types' private fields. If the targeted child control does not correspond to a field, yet is still available through a FindControl(id) call, you can safely ignore it. </value>
  </data>
  <data name="DynamicHandlerSettings`1_EventControlTypeAsString.Text" xml:space="preserve">
    <value>Event Control Type</value>
  </data>
  <data name="Identity.Text" xml:space="preserve">
    <value>Identity</value>
  </data>
  <data name="Personalization.Text" xml:space="preserve">
    <value>Personalization</value>
  </data>
  <data name="ProfileActionProviderBase`1_AsString.Help" xml:space="preserve">
    <value>When using the Identity Profile, you can choose to manipulate values as string or as their strongly typed definition</value>
  </data>
  <data name="ProfileActionProviderBase`1_AsString.Text" xml:space="preserve">
    <value>As String</value>
  </data>
  <data name="ProfileActionProviderBase`1_PortalId.Help" xml:space="preserve">
    <value>This is the target user's portal</value>
  </data>
  <data name="ProfileActionProviderBase`1_PortalId.Text" xml:space="preserve">
    <value>User Portal</value>
  </data>
  <data name="ProfileActionProviderBase`1_ProfileType.Help" xml:space="preserve">
    <value>There are 2 user profile which you can access: &lt;ul&gt;&lt;li&gt;the identity user profile (with a dedicated form, which the user can edit).&lt;/li&gt;, &lt;li&gt;the personalization user profile (that one is rarely used and does not have an edit form associated, it is intended to customize user experience).&lt;/li&gt;&lt;/ul&gt; </value>
  </data>
  <data name="ProfileActionProviderBase`1_ProfileType.Text" xml:space="preserve">
    <value>Profile Type</value>
  </data>
  <data name="ProfileActionProviderBase`1_PropertyName.Help" xml:space="preserve">
    <value>This is the name of the profile property to access</value>
  </data>
  <data name="ProfileActionProviderBase`1_PropertyName.Required" xml:space="preserve">
    <value>Profile Property Name is required</value>
  </data>
  <data name="ProfileActionProviderBase`1_PropertyName.Text" xml:space="preserve">
    <value>Property Name</value>
  </data>
  <data name="ProfileActionProviderBase`1_UserMode.Help" xml:space="preserve">
    <value>There are several ways to select the user, the profile of which to be accessed: &lt;ul&gt;&lt;li&gt;Current user: implies that the action is run in an authenticated context, the authenticated user is choosen &lt;/li&gt;&lt;li&gt;By User Id: you have to explicitally indicate the portal and the user id or an integer expression that resolves into the user id &lt;/li&gt;&lt;li&gt;By Username : you have to explicitally indicate the portal and the target user's Username or a string expression that resolves into the username&lt;/li&gt;&lt;li&gt;By Userinfo: You have to supply a UserInfo expression that resolves into the targetted user entity&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
  <data name="ProfileActionProviderBase`1_UserMode.Text" xml:space="preserve">
    <value>User Mode</value>
  </data>
  <data name="ProfileSaveActionProvider`1_Value.Help" xml:space="preserve">
    <value>This is the value to update the profile property to. The expected type depends on the above configuration.</value>
  </data>
  <data name="ProfileSaveActionProvider`1_Value.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="RuleEngineSettings`1_Mode.Help" xml:space="preserve">
    <value>There are 2 engine modes: Rules where the entry points are Condition based rules, and Actions, where the entry a point is a simpler single Action sequence.</value>
  </data>
  <data name="RuleEngineSettings`1_Mode.Text" xml:space="preserve">
    <value>Engine Mode</value>
  </data>
  <data name="Rules.Text" xml:space="preserve">
    <value>Rules</value>
  </data>
  <data name="SimpleExpression`1_Expression.Required" xml:space="preserve">
    <value>A non empty Expression is required</value>
  </data>
  <data name="ControlAdapterSettings_DowngradeDynamicHandlers.Text" xml:space="preserve">
    <value>Downgrade Dynamic Handlers</value>
  </data>
  <data name="ControlAdapterSettings_UpgradeDynamicHandlers.Text" xml:space="preserve">
    <value>Upgrade to Typed Handlers</value>
  </data>
  <data name="FleeExpressionInfo`1_Evaluation.Header" xml:space="preserve">
    <value>Evaluation</value>
  </data>
  <data name="FleeExpressionInfo`1_NewOwner.Help" xml:space="preserve">
    <value>Enter here a Flee expression that will be evaluated in order to provide a new dedicated &lt;a href="http://flee.codeplex.com/wikipage?title=ExpressionOwner&amp;referringTitle=Examples" &gt; Expression Owner&lt;/a&gt; to the main expression. All members from the new owner (including private fields) are then available in the main expression.</value>
  </data>
  <data name="FleeExpressionInfo`1_NewOwner.Text" xml:space="preserve">
    <value>New Owner Expression</value>
  </data>
  <data name="FleeExpressionInfo`1_OverrideOwner.Help" xml:space="preserve">
    <value>The Flee Compiler used for code expressions has the underlying concept of an &lt;a href="http://flee.codeplex.com/wikipage?title=ExpressionOwner&amp;referringTitle=Examples" &gt; Expression Owner&lt;/a&gt;. By default, the current instance of PortalKeeperContext is passed as an expression owner of all expressions. You can alternatively supply a simple expression that resolves into the desired context owner. One big advantage is the posibility to access private members without relying on time consuming Reflection operations.</value>
  </data>
  <data name="FleeExpressionInfo`1_OverrideOwner.Text" xml:space="preserve">
    <value>Override Expression Owner</value>
  </data>
  <data name="ProfileActionProviderBase`1_NamingContainer.Help" xml:space="preserve">
    <value>This is the name of the entity your profile property belongs to </value>
  </data>
  <data name="ProfileActionProviderBase`1_NamingContainer.Required" xml:space="preserve">
    <value>You must enter a naming container</value>
  </data>
  <data name="ProfileActionProviderBase`1_NamingContainer.Text" xml:space="preserve">
    <value>Naming Container</value>
  </data>
  <data name="ProfileActionProviderBase`1_UserIdExpression.Help" xml:space="preserve">
    <value>You can supply the user id as a static integer constant or as a dynamic expression to be evaluated at runtime.</value>
  </data>
  <data name="ProfileActionProviderBase`1_UserIdExpression.Text" xml:space="preserve">
    <value>User Id</value>
  </data>
  <data name="ProfileActionProviderBase`1_UserInfoExpression.Help" xml:space="preserve">
    <value>Enter a dynamic expression resolving to an instance of type UserInfo to be evaluated at runtime.</value>
  </data>
  <data name="ProfileActionProviderBase`1_UserInfoExpression.Text" xml:space="preserve">
    <value>Userinfo Expression</value>
  </data>
  <data name="ProfileActionProviderBase`1_UsernameExpression.Help" xml:space="preserve">
    <value>You can supply the username as a static string constant or as a dynamic expression to be evaluated at runtime.</value>
  </data>
  <data name="ProfileActionProviderBase`1_UsernameExpression.Text" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="Simple.Text" xml:space="preserve">
    <value>Simple</value>
  </data>
  <data name="SimpleOrExpression`1_EditableExpression.Help" xml:space="preserve">
    <value>Enter below a Flee expression to be evaluated at runtime given a context owner, local and global variables, and static imports. Lookup the &lt;a href="http://flee.codeplex.com/wikipage?title=LanguageReference&amp;referringTitle=Home"&gt; language reference &lt;/a&gt; for more information.</value>
  </data>
  <data name="SimpleOrExpression`1_EditableExpression.Text" xml:space="preserve">
    <value>Dynamic Expression</value>
  </data>
  <data name="SimpleOrExpressionBase`2_Simple.Required" xml:space="preserve">
    <value>Simple value is required</value>
  </data>
  <data name="Variables_AddDelegates.Help" xml:space="preserve">
    <value>You can create Delegate variables by selecting a method name from the given type. The variable can then be used in Expressions with  "Var.invoke(...)"</value>
  </data>
  <data name="Variables_AddDelegates.Text" xml:space="preserve">
    <value>Include Delegates</value>
  </data>
  <data name="WebProxyInfo_VirtualProxy.Help" xml:space="preserve">
    <value>When checked, ServicePoint.m_ProxyServicePoint is set to false by reflection, and the host header is kept as if no proxy were used.</value>
  </data>
  <data name="WebProxyInfo_VirtualProxy.Text" xml:space="preserve">
    <value>Virtual Proxy</value>
  </data>
  <data name="BotInfo`1_HistoryDumpAllVars.Help" xml:space="preserve">
    <value>When checked, all the variables computed during the bot's execution are dumped.</value>
  </data>
  <data name="BotInfo`1_HistoryDumpAllVars.Text" xml:space="preserve">
    <value>Dump all variables</value>
  </data>
  <data name="BotInfo`1_HistoryDumpVariables.Help" xml:space="preserve">
    <value>Enter here a comma separated list of variable names or Flee expressions, to be included in the run dumps</value>
  </data>
  <data name="BotInfo`1_HistoryDumpVariables.Text" xml:space="preserve">
    <value>Dump Variables</value>
  </data>
  <data name="DynamicHandlerSettings_NotOnFirstLoad.Help" xml:space="preserve">
    <value>Check to prevent the dynamic handler to be executed on first page load</value>
  </data>
  <data name="DynamicHandlerSettings_NotOnFirstLoad.Text" xml:space="preserve">
    <value>Disable On First Load</value>
  </data>
  <data name="DynamicHandlerSettings_NotOnPostBacks.Help" xml:space="preserve">
    <value>Check to prevent the dynamic handler to be executed on subsequent postbacks</value>
  </data>
  <data name="DynamicHandlerSettings_NotOnPostBacks.Text" xml:space="preserve">
    <value>Disable On Postbacks</value>
  </data>
  <data name="WebProxyInfo_Address.Required" xml:space="preserve">
    <value>Proxy Address is required</value>
  </data>
  <data name="BrowseHierarchy.Text" xml:space="preserve">
    <value>Browse Available Types</value>
  </data>
  <data name="DotNetType_AssemblyNameSelect.Help" xml:space="preserve">
    <value>Here is a filtered list of assemblies loaded in the AppDomain. Select an assembly to browse the namespace and types it contains.</value>
  </data>
  <data name="DotNetType_AssemblyNameSelect.Text" xml:space="preserve">
    <value>Assembly</value>
  </data>
  <data name="DotNetType_NamespaceSelect.Help" xml:space="preserve">
    <value>This is the sorted list of namespaces contained in the selected assembly. Select a namespace to display matching types.</value>
  </data>
  <data name="DotNetType_NamespaceSelect.Text" xml:space="preserve">
    <value>Namespace</value>
  </data>
  <data name="DotNetType_TypeNameSelect.Help" xml:space="preserve">
    <value>This is a list of types contained in the selected assembly and namespace. Change those values to search for a specific type. </value>
  </data>
  <data name="DotNetType_TypeNameSelect.Text" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="DotNetType_FullName.Help" xml:space="preserve">
    <value>This is the selected type accounting for open or closed generic parameters </value>
  </data>
  <data name="DotNetType_FullName.Text" xml:space="preserve">
    <value>Currently Selected Type</value>
  </data>
  <data name="DotNetType_GenericTypes.Help" xml:space="preserve">
    <value>Those are the generic argument to close the open generic type definition selected above. You can leave the type empty for open / semi-open definition</value>
  </data>
  <data name="DotNetType_GenericTypes.Text" xml:space="preserve">
    <value>Generic Parameter Types</value>
  </data>
  <data name="DotNetType_Refresh.Text" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="AssemblyNameSelect.NullSelect" xml:space="preserve">
    <value>No Assembly Selected</value>
  </data>
  <data name="CommonType.NullSelect" xml:space="preserve">
    <value>No Type Selected</value>
  </data>
  <data name="TypeNameSelect.NullSelect" xml:space="preserve">
    <value>&lt;Select a Type Name&gt;</value>
  </data>
  <data name="ControlAdapterSettings_AdatedPathMode.Help" xml:space="preserve">
    <value>You can choose to manually enter a relative path to a control to be adapted, or to select amongst a selection of files</value>
  </data>
  <data name="ControlAdapterSettings_AdatedPathMode.Text" xml:space="preserve">
    <value>Path Mode</value>
  </data>
  <data name="ControlAdapterSettings_ResolvedAdaptedControlTypeName.Help" xml:space="preserve">
    <value>This is the dot net type for the adapted control resolved from the configuration above. Note that if you use a user control path, the adapted control is the server generated class inheriting the codebehind class rather than the codebehind itself.</value>
  </data>
  <data name="ControlAdapterSettings_ResolvedAdaptedControlTypeName.Text" xml:space="preserve">
    <value>Resolved Adapted Control Type</value>
  </data>
  <data name="ControlAdapterSettings_ResolvedAdapterControlTypeName.Help" xml:space="preserve">
    <value>This is the dot net type for the adapter control resolved from the configuration above. It can be a typed adapter or a dynamic adapter.</value>
  </data>
  <data name="ControlAdapterSettings_ResolvedAdapterControlTypeName.Text" xml:space="preserve">
    <value>Resolved Adapter Control Type</value>
  </data>
  <data name="EnterPath.Text" xml:space="preserve">
    <value>Enter Path</value>
  </data>
  <data name="SelectedFile.NullSelect" xml:space="preserve">
    <value>No File Selected</value>
  </data>
  <data name="SelectPath.Text" xml:space="preserve">
    <value>Select Path</value>
  </data>
  <data name="AdaptedSelectedPath.NullSelect" xml:space="preserve">
    <value>No Path Selected</value>
  </data>
  <data name="ControlAdapterSettings_AdaptedControlPath.Required" xml:space="preserve">
    <value>You must enter a control path to be adapted</value>
  </data>
  <data name="ControlAdapterSettings_AdaptedSelectedPath.Help" xml:space="preserve">
    <value>This is a selection of all ascx user control and aspx pages found in the Application </value>
  </data>
  <data name="ControlAdapterSettings_AdaptedSelectedPath.Required" xml:space="preserve">
    <value>You must select a control path to be adapted</value>
  </data>
  <data name="ControlAdapterSettings_AdaptedSelectedPath.Text" xml:space="preserve">
    <value>Select Path</value>
  </data>
  <data name="AddEventHandler.Text" xml:space="preserve">
    <value>Add Event Handler</value>
  </data>
  <data name="CallMethod.Text" xml:space="preserve">
    <value>Call Method</value>
  </data>
  <data name="GeneralObjectAction_ActionMode.Help" xml:space="preserve">
    <value>There are 3 types of object action you can perform on an object: Set a property, call a method or add an event handler. Corresponding controls should appear according to you selection.</value>
  </data>
  <data name="GeneralObjectAction_ActionMode.Text" xml:space="preserve">
    <value>Action Mode</value>
  </data>
  <data name="GeneralObjectAction_DelegateExpression.Help" xml:space="preserve">
    <value>This is an expression that resolved into an object of type Delegate. You can create Delegates when defining variables. For now, you should make sure the target delegate and even handler's signatures do match.</value>
  </data>
  <data name="GeneralObjectAction_DelegateExpression.Text" xml:space="preserve">
    <value>Delegate</value>
  </data>
  <data name="GeneralObjectAction_DotNetType.Help" xml:space="preserve">
    <value>Select a type of object, on which you want to perform an action</value>
  </data>
  <data name="GeneralObjectAction_DotNetType.Text" xml:space="preserve">
    <value>Object Type</value>
  </data>
  <data name="GeneralObjectAction_EventName.Help" xml:space="preserve">
    <value>Select an event amongst those declared on the target object type</value>
  </data>
  <data name="GeneralObjectAction_EventName.Text" xml:space="preserve">
    <value>Event Name</value>
  </data>
  <data name="GeneralObjectAction_Instance.Help" xml:space="preserve">
    <value>This is an expression for the object on which you wish to perform an action. Typically a local variable, leave empty if you want to access a static member</value>
  </data>
  <data name="GeneralObjectAction_Instance.Text" xml:space="preserve">
    <value>Target Object</value>
  </data>
  <data name="GeneralObjectAction_Parameters.Help" xml:space="preserve">
    <value>Add the .Net types corresponding to the choosen constructor parameters first.</value>
  </data>
  <data name="GeneralObjectAction_Parameters.Text" xml:space="preserve">
    <value>Enter the parameters to pass to your method or in case of an indexed property</value>
  </data>
  <data name="GeneralObjectAction_PropertyName.Help" xml:space="preserve">
    <value>This is the name of the property to be set (readonly properties are filtered out)</value>
  </data>
  <data name="GeneralObjectAction_PropertyName.Text" xml:space="preserve">
    <value>Property Name</value>
  </data>
  <data name="GeneralObjectAction_PropertyValue.Help" xml:space="preserve">
    <value>Enter an object expression for the value to set. As it is passed as an object by reflection, you must ensure type safety by yourself</value>
  </data>
  <data name="GeneralObjectAction_PropertyValue.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="SetProperty.Text" xml:space="preserve">
    <value>Set Property</value>
  </data>
  <data name="Asymmetric.Text" xml:space="preserve">
    <value>Asymmetric</value>
  </data>
  <data name="CallObjectMethod`1_MethodIndex.Help" xml:space="preserve">
    <value>When several signatures exist for the method you selected, enter the base-1 index for the target method</value>
  </data>
  <data name="CallObjectMethod`1_MethodIndex.Text" xml:space="preserve">
    <value>Method Index</value>
  </data>
  <data name="CSPBlob.Text" xml:space="preserve">
    <value>CSP Blob</value>
  </data>
  <data name="EncryptionInfo_EditInitVector.Help" xml:space="preserve">
    <value>This an auto generated Init Vector Bytes for symmetrical encryption and addtional entropy, base64 encoded. </value>
  </data>
  <data name="EncryptionInfo_EditInitVector.Text" xml:space="preserve">
    <value>Init Vector</value>
  </data>
  <data name="EncryptionInfo_SealType.Text" xml:space="preserve">
    <value>Encryption Seals</value>
  </data>
  <data name="Application.Text" xml:space="preserve">
    <value>Application (Rijndael Managed)</value>
  </data>
  <data name="EncryptionInfo_SealType.Help" xml:space="preserve">
    <value>The encryption keys are initially kept visible and editable. You can hide them by sealing them in 3 optional passes:
&lt;ul&gt;&lt;li&gt;An Application level seal encrypts the private key with the main application decryption key. Only the same DNN application will be able to recover the key at runtime.&lt;/li&gt;
&lt;li&gt;A Key Container seal creates a dedicated OS Level CSPContainer Key to encrypt the private key. Only the same system will be able to recover the key at runtime.&lt;/li&gt;
&lt;li&gt;A Protected Data seal  encrypts the private key using the native ProtectedData methods from win32 DAPI.Only the same system and application pool identity  user will be able to recover the key at runtime.&lt;/li&gt;
&lt;/ul&gt;
In order to seal your keys, click one of the corresponding button at the bottom of this form, after having saved the original values. Note that if you need to move the application to a new environment, you won't be able to recover the keys unless you do a reset and manually enter the original values.</value>
  </data>
  <data name="ProtectData.Text" xml:space="preserve">
    <value>Protected Data (DAPI)</value>
  </data>
  <data name="KeyContainer.Text" xml:space="preserve">
    <value>Key Container (CSP - RSA)</value>
  </data>
  <data name="EncryptionInfo_ProtectInMemory.Help" xml:space="preserve">
    <value>Checking that option ofuscate the symmetric key in memory to avoid recollection from a dump.</value>
  </data>
  <data name="EncryptionInfo_ProtectInMemory.Text" xml:space="preserve">
    <value>Protect In Memory (DAPI)</value>
  </data>
  <data name="EncryptionInfo_PublicKeyAsCSPBlob.Help" xml:space="preserve">
    <value>This is the base64 representation of a CSP Blob export for the public key derived from the asymmetrical private key.</value>
  </data>
  <data name="EncryptionInfo_PublicKeyAsCSPBlob.Text" xml:space="preserve">
    <value>Public Key as CSP Blob</value>
  </data>
  <data name="EncryptionInfo_PublicKeyAsRSAParameters.Help" xml:space="preserve">
    <value>This is the base64 representation of an instance of the RSAParameters structure, from an export from the public key derived from the asymmetrical private key.</value>
  </data>
  <data name="EncryptionInfo_PublicKeyAsRSAParameters.Text" xml:space="preserve">
    <value>Public Key as RSA Parameters</value>
  </data>
  <data name="EncryptionInfo_PublicKeyAsXml.Help" xml:space="preserve">
    <value>This is the Xml string format of the public key derived from the asymmetrical private key as returned by AsymmetricalAlgorithm.ExportXml(false)</value>
  </data>
  <data name="EncryptionInfo_PublicKeyAsXml.Text" xml:space="preserve">
    <value>Public Key as Xml</value>
  </data>
  <data name="EncryptionInfo_PublicKeyDisplay.Help" xml:space="preserve">
    <value>You can choose to display the public key in various format: Xml parameters, CspBlob or RSAParameters</value>
  </data>
  <data name="EncryptionInfo_PublicKeyDisplay.Text" xml:space="preserve">
    <value>Public Key Format</value>
  </data>
  <data name="EncryptionInfo_SealInApplication.Text" xml:space="preserve">
    <value>Seal in Application</value>
  </data>
  <data name="EncryptionInfo_SealInCSP.Text" xml:space="preserve">
    <value>Seal in Key Container</value>
  </data>
  <data name="EncryptionInfo_SealProtectData.Text" xml:space="preserve">
    <value>Seal with Protected Data</value>
  </data>
  <data name="EncryptionInfo_SelectedEncryptionType.Help" xml:space="preserve">
    <value>Your encryption manger can perform symmetric encryption, asymmetric encryption or both. symmetric encryption uses salted RijndaelManaged, Asymmetric Encryption uses a RsaCryptoProvider</value>
  </data>
  <data name="EncryptionInfo_SelectedEncryptionType.Text" xml:space="preserve">
    <value>Encryption Type</value>
  </data>
  <data name="GeneralObjectAction_MethodIndex.Help" xml:space="preserve">
    <value>When several signatures exist for the method you selected, enter the base-1 index for the target method</value>
  </data>
  <data name="GeneralObjectAction_MethodIndex.Text" xml:space="preserve">
    <value>Member Index</value>
  </data>
  <data name="GeneralObjectAction_MethodName.Help" xml:space="preserve">
    <value>Select the name of the method you want to call on the target object</value>
  </data>
  <data name="GeneralObjectAction_MethodName.Text" xml:space="preserve">
    <value>Member Name</value>
  </data>
  <data name="NamespaceSelect.NullSelect" xml:space="preserve">
    <value>&lt;Select a Namespace&gt;</value>
  </data>
  <data name="RSAParameters.Text" xml:space="preserve">
    <value>RSA Parameters</value>
  </data>
  <data name="RSAParametersInfo_D.Help" xml:space="preserve">
    <value>Represents the D parameter for the RSA algorithm.</value>
  </data>
  <data name="RSAParametersInfo_D.Text" xml:space="preserve">
    <value>D</value>
  </data>
  <data name="RSAParametersInfo_DP.Help" xml:space="preserve">
    <value>Represents the DP parameter for the RSA algorithm.</value>
  </data>
  <data name="RSAParametersInfo_DP.Text" xml:space="preserve">
    <value>DP</value>
  </data>
  <data name="RSAParametersInfo_DQ.Help" xml:space="preserve">
    <value>Represents the DQ parameter for the RSA algorithm.</value>
  </data>
  <data name="RSAParametersInfo_DQ.Text" xml:space="preserve">
    <value>DQ</value>
  </data>
  <data name="RSAParametersInfo_Exponent.Help" xml:space="preserve">
    <value>Represents the Exponent parameter for the RSA algorithm.</value>
  </data>
  <data name="RSAParametersInfo_Exponent.Text" xml:space="preserve">
    <value>Exponent</value>
  </data>
  <data name="RSAParametersInfo_InverseQ.Help" xml:space="preserve">
    <value>Represents the InverseQ parameter for the RSA algorithm.</value>
  </data>
  <data name="RSAParametersInfo_InverseQ.Text" xml:space="preserve">
    <value>InverseQ</value>
  </data>
  <data name="RSAParametersInfo_Modulus.Help" xml:space="preserve">
    <value>Represents the Modulus parameter for the RSA algorithm.</value>
  </data>
  <data name="RSAParametersInfo_Modulus.Text" xml:space="preserve">
    <value>Modulus</value>
  </data>
  <data name="RSAParametersInfo_P.Help" xml:space="preserve">
    <value>Represents the P parameter for the RSA algorithm.</value>
  </data>
  <data name="RSAParametersInfo_P.Text" xml:space="preserve">
    <value>P</value>
  </data>
  <data name="RSAParametersInfo_Q.Help" xml:space="preserve">
    <value>Represents the Q parameter for the RSA algorithm.</value>
  </data>
  <data name="RSAParametersInfo_Q.Text" xml:space="preserve">
    <value>Q</value>
  </data>
  <data name="Symmetric.Text" xml:space="preserve">
    <value>Symmetric</value>
  </data>
  <data name="SymmetricAndAsymmetric.Text" xml:space="preserve">
    <value>Symmetric and Asymmetric</value>
  </data>
  <data name="TaskQueueInfo_ThreadPriority.Help" xml:space="preserve">
    <value>This is the priority that will be assigned to the threads processing the queue. The wait time can also help defining priority hierarchies between concurrent operations </value>
  </data>
  <data name="UTF8String.Text" xml:space="preserve">
    <value>UTF8 String</value>
  </data>
  <data name="AddNew.Command" xml:space="preserve">
    <value>Add New</value>
  </data>
  <data name="AsymmetricByBlock.Text" xml:space="preserve">
    <value>Asymmetric by Block</value>
  </data>
  <data name="AsymmetricKeyExchange.Text" xml:space="preserve">
    <value>Key Exchange</value>
  </data>
  <data name="Copy.Command" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="EncryptionInfo_AsymmetricKeySize.Help" xml:space="preserve">
    <value>This is the size of the RSACryptoServiceProvider's key used for asymmetric encryption</value>
  </data>
  <data name="EncryptionInfo_AsymmetricKeySize.Text" xml:space="preserve">
    <value>Asymmetric Key Size</value>
  </data>
  <data name="EncryptionInfo_DNNSalt.Help" xml:space="preserve">
    <value>This is the salt that was generated upon application level sealing</value>
  </data>
  <data name="EncryptionInfo_DNNSalt.Text" xml:space="preserve">
    <value>DNN Salt</value>
  </data>
  <data name="EncryptionInfo_EncryptionTypes.Help" xml:space="preserve">
    <value>You can perform several round of encryption using your asymmetric and symmetric keys. Beware of size limitation and performance costs of asymmetric encryption</value>
  </data>
  <data name="EncryptionInfo_EncryptionTypes.Text" xml:space="preserve">
    <value>Encryption Sequence</value>
  </data>
  <data name="EncryptionInfo_SymmetricKeySize.Help" xml:space="preserve">
    <value>This is the size of the RijndelManaged's key used for symmetric encryption</value>
  </data>
  <data name="EncryptionInfo_SymmetricKeySize.Text" xml:space="preserve">
    <value>Symmetric Key Size</value>
  </data>
  <data name="Export.Command" xml:space="preserve">
    <value>Export File</value>
  </data>
  <data name="Import.Command" xml:space="preserve">
    <value>Import File</value>
  </data>
  <data name="Key1024.Text" xml:space="preserve">
    <value>1024 bits</value>
  </data>
  <data name="Key128.Text" xml:space="preserve">
    <value>128 bits</value>
  </data>
  <data name="Key16384.Text" xml:space="preserve">
    <value>16384 bits</value>
  </data>
  <data name="Key2048.Text" xml:space="preserve">
    <value>2048 bits</value>
  </data>
  <data name="Key256.Text" xml:space="preserve">
    <value>256 bits</value>
  </data>
  <data name="Key384.Text" xml:space="preserve">
    <value>384 bits</value>
  </data>
  <data name="Key4096.Text" xml:space="preserve">
    <value>4096 bits</value>
  </data>
  <data name="Key512.Text" xml:space="preserve">
    <value>512 bits</value>
  </data>
  <data name="Key8192.Text" xml:space="preserve">
    <value>8192 bits</value>
  </data>
  <data name="Paste.Command" xml:space="preserve">
    <value>Paste</value>
  </data>
  <data name="SealInKeyContainer.Alert" xml:space="preserve">
    <value>Warning: You are about to seal your encryption keys. Make sure you have a copy of them, since they won't be available through the UI nor the API anymore. </value>
  </data>
  <data name="SealInKeyContainer.Completed" xml:space="preserve">
    <value>Your keys were sealed in a local key container. Don't forget to save your new configuration. If you want to move your data to a new DotNetNuke instance, you will need to reset and manually restore the previous keys in order for the existing data to be properly processed.</value>
  </data>
  <data name="SealProtectData.Alert" xml:space="preserve">
    <value>Warning: You are about to seal your encryption keys. Make sure you have a copy of them, since they won't be available through the UI nor the API anymore.</value>
  </data>
  <data name="SealProtectData.Completed" xml:space="preserve">
    <value>Your keys were sealed with local cryptoapis through ProtectedData methods. Don't forget to save your new configuration. If you want to move your data to a new DotNetNuke instance, you will need to reset and manually restore the previous keys in order for the existing data to be properly processed.</value>
  </data>
  <data name="EncryptionInfo_EditProtectedDataEntropy.Help" xml:space="preserve">
    <value>A data protection seal relies on a call to Micrososft's DAPI attached to the impersonated user. That encrypted blob adds additional entropy for offuscation from distinct apps.</value>
  </data>
  <data name="EncryptionInfo_EditProtectedDataEntropy.Text" xml:space="preserve">
    <value>DAPI Entropy</value>
  </data>
  <data name="GeneralVariableInfo_DotNetType.Help" xml:space="preserve">
    <value>Select a .Net type for your variable.</value>
  </data>
  <data name="GeneralVariableInfo_DotNetType.Text" xml:space="preserve">
    <value>Variable Type</value>
  </data>
  <data name="Constructor.Text" xml:space="preserve">
    <value>Constructor</value>
  </data>
  <data name="Delegate.Text" xml:space="preserve">
    <value>Delegate</value>
  </data>
  <data name="GeneralVariableInfo_AdvancedExpression.Help" xml:space="preserve">
    <value>Check to display advanced parameters</value>
  </data>
  <data name="GeneralVariableInfo_AdvancedExpression.Text" xml:space="preserve">
    <value>Advanced Expression</value>
  </data>
  <data name="GeneralVariableInfo_AsCompiledExpression.Help" xml:space="preserve">
    <value>If your variable is only to be used in subsequent Flee Expression, you can choose to postpone its evaluation and pass the compiled expression for direct integration in a wrapping expression, in order to optimize the resulting performances</value>
  </data>
  <data name="GeneralVariableInfo_AsCompiledExpression.Text" xml:space="preserve">
    <value>As Compiled Expression</value>
  </data>
  <data name="GeneralVariableInfo_Evaluation.Header" xml:space="preserve">
    <value>Evaluation Parameters</value>
  </data>
  <data name="GeneralVariableInfo_FleeExpression.Help" xml:space="preserve">
    <value>The expression should account for the delcared variable type. You may use in turn sub-variables, to be evaluated once as constants or to be chained to the current expression. In such a case, sub-expressions are cloned for better performances.</value>
  </data>
  <data name="GeneralVariableInfo_FleeExpression.Text" xml:space="preserve">
    <value>Enter here the Flee Expression to initiate the variable</value>
  </data>
  <data name="GeneralVariableInfo_Instance.Help" xml:space="preserve">
    <value>Edit the entity's properties directly below</value>
  </data>
  <data name="GeneralVariableInfo_Instance.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="GeneralVariableInfo_InstanceMode.Help" xml:space="preserve">
    <value>Instance mode lets your save and edit a version of the expression result obtained by evaluating the expression once. You can either choose to immediately evaluate the current variable with a default context, or to leave to evaluate in context, refresh the form to display the saved entity and save the form together with the new entity.</value>
  </data>
  <data name="GeneralVariableInfo_InstanceMode.Text" xml:space="preserve">
    <value>Instance Mode</value>
  </data>
  <data name="GeneralVariableInfo_Parameters.Help" xml:space="preserve">
    <value>Define here the parameters to be passed to the constructor. Static evaluation is forced. </value>
  </data>
  <data name="GeneralVariableInfo_Parameters.Text" xml:space="preserve">
    <value>Invocation Parameters</value>
  </data>
  <data name="GeneralVariableInfo_SimpleExpression.Help" xml:space="preserve">
    <value>The simple display lets you edit the expression text only</value>
  </data>
  <data name="GeneralVariableInfo_SimpleExpression.Text" xml:space="preserve">
    <value>Simple Display</value>
  </data>
  <data name="GeneralVariableInfo_UseClone.Help" xml:space="preserve">
    <value>If checked, a clone of the variable is returned instead of the variable itself. This allows for subsequent modifications without the original variable being affected.</value>
  </data>
  <data name="GeneralVariableInfo_UseClone.Text" xml:space="preserve">
    <value>Use Clone</value>
  </data>
  <data name="GeneralVariableInfo_VariableMode.Help" xml:space="preserve">
    <value>There are 4 ways to define your variable:</value>
  </data>
  <data name="GeneralVariableInfo_VariableMode.Text" xml:space="preserve">
    <value>Variable Mode</value>
  </data>
  <data name="Instance.Text" xml:space="preserve">
    <value>Instance</value>
  </data>
  <data name="LoginInfo_Password.Help" xml:space="preserve">
    <value>This is the unofuscate password. You should avoid to display it after it has been set.</value>
  </data>
  <data name="LoginInfo_Password.Required" xml:space="preserve">
    <value>Password is required</value>
  </data>
  <data name="LoginInfo_Password.Text" xml:space="preserve">
    <value>Clear Password</value>
  </data>
  <data name="WebRequestInfo`1_LogRequest.Help" xml:space="preserve">
    <value>You can choose to add a DNN event log for each call with the target url and response content</value>
  </data>
  <data name="WebRequestInfo`1_LogRequest.Text" xml:space="preserve">
    <value>Log Request</value>
  </data>
  <data name="DefineVariableActionProvider`1_GetFromHistory.Help" xml:space="preserve">
    <value>If Enabled, and if the variable is configured for history dump inclusion, any previous instance is restored.</value>
  </data>
  <data name="DefineVariableActionProvider`1_GetFromHistory.Text" xml:space="preserve">
    <value>Get From History</value>
  </data>
  <data name="DefineVariableActionProvider`1_Variable.Help" xml:space="preserve">
    <value>Enter the name (use single well formatted word for use in expressions) and other characteristics of your Variable</value>
  </data>
  <data name="DefineVariableActionProvider`1_Variable.Text" xml:space="preserve">
    <value>Variable Definition</value>
  </data>
  <data name="DelegateExpression.Text" xml:space="preserve">
    <value>Delegate Expression</value>
  </data>
  <data name="GeneralObjectActionProvider`1_Action.Header" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="GeneralObjectActionProvider`1_ObjectAction.Help" xml:space="preserve">
    <value>This Action Provider lets you define a memory operation to an object in the form of setting one of its property, calling one its method or hooking a delegate to one of its events. </value>
  </data>
  <data name="GeneralObjectActionProvider`1_ObjectAction.Text" xml:space="preserve">
    <value>Action Details</value>
  </data>
  <data name="GeneralObjectAction_MemberIndex.Help" xml:space="preserve">
    <value>It might be that the target object type has several members with the same name. Choose from the available signatures.</value>
  </data>
  <data name="GeneralObjectAction_MemberIndex.Text" xml:space="preserve">
    <value>Member Candidates</value>
  </data>
  <data name="GeneralObjectAction_MemberName.Help" xml:space="preserve">
    <value>According to your action mode, choose the name of the property, method or event you want to access</value>
  </data>
  <data name="GeneralObjectAction_MemberName.Text" xml:space="preserve">
    <value>Member Name</value>
  </data>
  <data name="GeneralObjectAction_SetParameters.Text" xml:space="preserve">
    <value>Prepare Parameters</value>
  </data>
  <data name="GeneralVariableInfo_MethodIndex.Help" xml:space="preserve">
    <value>It might be that the target object type has several constructors or methods with the same name. Choose from the available signatures.</value>
  </data>
  <data name="GeneralVariableInfo_MethodIndex.Text" xml:space="preserve">
    <value>Method Candidates</value>
  </data>
  <data name="GeneralVariableInfo_MethodName.Help" xml:space="preserve">
    <value>Select the method for which you wish to create a delegate from the variable instance</value>
  </data>
  <data name="GeneralVariableInfo_MethodName.Text" xml:space="preserve">
    <value>Method Name</value>
  </data>
  <data name="GeneralVariableInfo_SetParameters.Text" xml:space="preserve">
    <value>Init Parameters</value>
  </data>
  <data name="KeeperAction.Text" xml:space="preserve">
    <value>Dynamic Action Sequence</value>
  </data>
  <data name="KeeperObjectAction`1_EventHandlerType.Help" xml:space="preserve">
    <value>You can either provide an Expression which resolves into a delegate with the apropriate signature, or attach a custom series of actions.</value>
  </data>
  <data name="KeeperObjectAction`1_EventHandlerType.Text" xml:space="preserve">
    <value>Event Handler Type</value>
  </data>
  <data name="KeeperObjectAction`1_KeeperAction.Help" xml:space="preserve">
    <value>Enter a sequence of actions to be run when the event is fired.</value>
  </data>
  <data name="KeeperObjectAction`1_KeeperAction.Text" xml:space="preserve">
    <value>Handler Actions</value>
  </data>
  <data name="MemberName.NullSelect" xml:space="preserve">
    <value>&lt;Select a Member&gt;</value>
  </data>
  <data name="ObjectAction_Enabled.Help" xml:space="preserve">
    <value>Uncheck to disable the action.</value>
  </data>
  <data name="ObjectAction_Enabled.Text" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="RedditCommand_Actions.Header" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="RedditCommand_AlternateAnwsers.Help" xml:space="preserve">
    <value>Define several alternate answer messages here, and they will get picked at random.</value>
  </data>
  <data name="RedditCommand_AlternateAnwsers.Text" xml:space="preserve">
    <value>Alternate Answers</value>
  </data>
  <data name="RedditCommand_Answers.Header" xml:space="preserve">
    <value>Answers</value>
  </data>
  <data name="RedditCommand_CommandActions.Help" xml:space="preserve">
    <value>Those are the actions performed when one of the regexes matches the input message. Any captured named group can be accessed through a variable of the same name.</value>
  </data>
  <data name="RedditCommand_CommandActions.Text" xml:space="preserve">
    <value>Command Actions</value>
  </data>
  <data name="RedditCommand_CommandUsers.Help" xml:space="preserve">
    <value>Those are the users to accept commands from and/or to check comments from.</value>
  </data>
  <data name="RedditCommand_CommandUsers.Text" xml:space="preserve">
    <value>Reddit Usernames</value>
  </data>
  <data name="RedditCommand_EnableAllUsers.Help" xml:space="preserve">
    <value>You can enable your command to all users (be careful money wise). Note that only specific users will be searched for comments.</value>
  </data>
  <data name="RedditCommand_EnableAllUsers.Text" xml:space="preserve">
    <value>Enable All Users</value>
  </data>
  <data name="RedditCommand_EnableComments.Help" xml:space="preserve">
    <value>Check to enable running commands from comments.</value>
  </data>
  <data name="RedditCommand_EnableComments.Text" xml:space="preserve">
    <value>Enable Comments</value>
  </data>
  <data name="RedditCommand_EnablePrivateMessages.Help" xml:space="preserve">
    <value>Check to enable running commands from direct messaging</value>
  </data>
  <data name="RedditCommand_EnablePrivateMessages.Text" xml:space="preserve">
    <value>Enable Private Messages</value>
  </data>
  <data name="RedditCommand_EnableSubRedditPosts.Help" xml:space="preserve">
    <value>Check to enable running commands from subreddit posts</value>
  </data>
  <data name="RedditCommand_EnableSubRedditPosts.Text" xml:space="preserve">
    <value>Enable Subreddit Posts</value>
  </data>
  <data name="RedditCommand_MainAnswer.Help" xml:space="preserve">
    <value>This is the main message the bot will answer. You can use Token Replaces as in other parts of the engine. You can also define alternate messages that will get picked at random. It is mandatory that each command has at least one answer as it is the way the bots keeps track of the conversations.</value>
  </data>
  <data name="RedditCommand_MainAnswer.Required" xml:space="preserve">
    <value>It is mandatory that each command has at least one answer associated to it, as it is the way the bots keeps track of the conversations.</value>
  </data>
  <data name="RedditCommand_MainAnswer.Text" xml:space="preserve">
    <value>Main Answer</value>
  </data>
  <data name="RedditCommand_Next.Header" xml:space="preserve">
    <value>Following Commands</value>
  </data>
  <data name="RedditCommand_NextCommands.Help" xml:space="preserve">
    <value>If the command requires several message exchange, you can enter here the following commands to act upon</value>
  </data>
  <data name="RedditCommand_NextCommands.Text" xml:space="preserve">
    <value>Next Commands</value>
  </data>
  <data name="RedditCommand_Parsing.Header" xml:space="preserve">
    <value>Parsing</value>
  </data>
  <data name="RedditCommand_Regexes.Help" xml:space="preserve">
    <value>Enter a series of regular expressions with named captured groups. Captured groups will be available as String variables for subsequent actions.</value>
  </data>
  <data name="RedditCommand_Regexes.Text" xml:space="preserve">
    <value>Regular Expressions</value>
  </data>
  <data name="RedditCommand_Scope.Header" xml:space="preserve">
    <value>Scope</value>
  </data>
  <data name="UserBotName.NullSelect" xml:space="preserve">
    <value>&lt;Select a User Bot&gt;</value>
  </data>
  <data name="UserParameterWrapper_Description.Help" xml:space="preserve">
    <value>This is a description of what that parameter mean.</value>
  </data>
  <data name="UserParameterWrapper_Description.Text" xml:space="preserve">
    <value>Parameter Description</value>
  </data>
  <data name="UserParameterWrapper_Instance.Help" xml:space="preserve">
    <value>This is the value for your parameter. It is saved encrypted and can be read and updated by the bot engine.</value>
  </data>
  <data name="UserParameterWrapper_Instance.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="UserParameterWrapper_Title.Help" xml:space="preserve">
    <value>This is a friendly name for your parameter. The bot has a variable name associated.</value>
  </data>
  <data name="UserParameterWrapper_Title.Text" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="UserVariableInfo_Title.Help" xml:space="preserve">
    <value>This is the title displayed to the user</value>
  </data>
  <data name="UserVariableInfo_Title.Text" xml:space="preserve">
    <value>Parameter Title</value>
  </data>
  <data name="Comment.Text" xml:space="preserve">
    <value>Comments</value>
  </data>
  <data name="PrivateMessage.Text" xml:space="preserve">
    <value>Private Messages</value>
  </data>
  <data name="RedditCommand_CommandSource.Help" xml:space="preserve">
    <value>Check the kind of message sources authorized for this command.</value>
  </data>
  <data name="RedditCommand_CommandSource.Text" xml:space="preserve">
    <value>Command Sources</value>
  </data>
  <data name="SmartFile_State.Help" xml:space="preserve">
    <value>A smart file can be signed, compressed and encrypted (in that order and reverse), manually or automatically according to the configuration. In order to decrypt a smart file on a distinct system, you need to enter the orginal key used for encryption.</value>
  </data>
  <data name="SmartFile_State.Text" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="SubRedditPost.Text" xml:space="preserve">
    <value>Posts</value>
  </data>
  <data name="GeneralObjectAction_Action.Header" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="ObjectAction_Instance.Header" xml:space="preserve">
    <value>Object</value>
  </data>
  <data name="CreateInstance.Text" xml:space="preserve">
    <value>Create Instance</value>
  </data>
  <data name="DeclaredOnly.Text" xml:space="preserve">
    <value>Declared Only</value>
  </data>
  <data name="ExactBinding.Text" xml:space="preserve">
    <value>Exact Binding</value>
  </data>
  <data name="MemberDrillDown_SelectedMember.Help" xml:space="preserve">
    <value>This is a list of the members available for the variable you selected. Select a Member and click the insert button or simply type the variable name and member into the expression Text Area. You can also optionally select a submember from the corresponding drop down list.</value>
  </data>
  <data name="MemberDrillDown_SelectedMember.Text" xml:space="preserve">
    <value>Selected Member</value>
  </data>
  <data name="MemberDrillDown_SelectedMemberSignature.Help" xml:space="preserve">
    <value>The following may help you choose the apropriate variable and members according to the expected types</value>
  </data>
  <data name="MemberDrillDown_SelectedMemberSignature.Text" xml:space="preserve">
    <value>Selected Member Signature</value>
  </data>
  <data name="MemberDrillDown_SelectedSubMember.Help" xml:space="preserve">
    <value>This is a list of the sub members available for the variable and variable member you selected. Select a submember and click the insert button or simply type the variable name together with member and sub members.</value>
  </data>
  <data name="MemberDrillDown_SelectedSubMember.Text" xml:space="preserve">
    <value>Selected Sub-Members</value>
  </data>
  <data name="FleeExpressionBuilder_SelectedVariable.Help" xml:space="preserve">
    <value>This is a list of the variables available for use in your expression. Select a variable and click the Insert button or simply type the variable name into the expression Text Area. You can also optionally select a member and a submember from the corresponding drop down lists.</value>
  </data>
  <data name="FleeExpressionBuilder_SelectedVariable.Text" xml:space="preserve">
    <value>Available Variables</value>
  </data>
  <data name="ExpressionHelper.Message" xml:space="preserve">
    <value>Choose one of the available variables and click the insert button.</value>
  </data>
  <data name="FlattenHierarchy.Text" xml:space="preserve">
    <value>Flatten Hierarchy</value>
  </data>
  <data name="FleeExpressionInfo`1_OwnerMemberAccess.Help" xml:space="preserve">
    <value>By default, an expression will only allow access to the public members of its owner. You can use that property to grant/deny access to the public and non-public members of the owner. See &lt;a href="https://flee.codeplex.com/wikipage?title=ExpressionOwner&amp;referringTitle=Examples"&gt; the official documentation&lt;/a&gt; for more information.</value>
  </data>
  <data name="FleeExpressionInfo`1_OwnerMemberAccess.Text" xml:space="preserve">
    <value>Owner Member Access</value>
  </data>
  <data name="GetField.Text" xml:space="preserve">
    <value>Get Field</value>
  </data>
  <data name="GetProperty.Text" xml:space="preserve">
    <value>Get Property</value>
  </data>
  <data name="IgnoreCase.Text" xml:space="preserve">
    <value>Ignore Case</value>
  </data>
  <data name="IgnoreReturn.Text" xml:space="preserve">
    <value>Ignore Return</value>
  </data>
  <data name="InvokeMethod.Text" xml:space="preserve">
    <value>Invoke Method</value>
  </data>
  <data name="NamedEntity_Name.Validation" xml:space="preserve">
    <value>The name must be a valid &lt;a href="http://msdn.microsoft.com/en-us/library/aa664670%28VS.71%29.aspx"&gt;Identifier &lt;/a&gt; (no space, start with a letter etc.)</value>
  </data>
  <data name="NonPublic.Text" xml:space="preserve">
    <value>Non Public</value>
  </data>
  <data name="OptionalParamBinding.Text" xml:space="preserve">
    <value>Optional Param Binding</value>
  </data>
  <data name="OutputAction`1_OutputTypeName.Help" xml:space="preserve">
    <value>This is the expected .Net type for the corresponding output variable.</value>
  </data>
  <data name="OutputAction`1_OutputTypeName.Text" xml:space="preserve">
    <value>Output Type</value>
  </data>
  <data name="PutDispProperty.Text" xml:space="preserve">
    <value>Put Disp Property</value>
  </data>
  <data name="PutRefDispProperty.Text" xml:space="preserve">
    <value>Put Ref Disp Property</value>
  </data>
  <data name="SelectedMember.NullSelect" xml:space="preserve">
    <value>&lt;-- Select a Member --&gt;</value>
  </data>
  <data name="SelectedSubMember.NullSelect" xml:space="preserve">
    <value>&lt;-- Select a Sub Member --&gt;</value>
  </data>
  <data name="SelectedVariable.NullSelect" xml:space="preserve">
    <value>&lt;-- Select a Variable --&gt;</value>
  </data>
  <data name="SetField.Text" xml:space="preserve">
    <value>Set Field</value>
  </data>
  <data name="SimpleExpression`1_DisplayAvailableVars.Text" xml:space="preserve">
    <value>Setup Expression Builder</value>
  </data>
  <data name="SimpleExpression`1_ExpressionBuilder.Help" xml:space="preserve">
    <value>Use the following drop down lists to build your expression from the available variables, operators, and methods, then click the insert button to update your expression text area.</value>
  </data>
  <data name="SimpleExpression`1_ExpressionBuilder.Text" xml:space="preserve">
    <value>Build your Expression step by step and insert the corresponding string</value>
  </data>
  <data name="SimpleExpression`1_Help.Header" xml:space="preserve">
    <value>Expression Builder</value>
  </data>
  <data name="SimpleExpression`1_InsertSelectedVar.Text" xml:space="preserve">
    <value>Insert Built Expression</value>
  </data>
  <data name="Static.Text" xml:space="preserve">
    <value>Static</value>
  </data>
  <data name="SuppressChangeType.Text" xml:space="preserve">
    <value>Suppress Change Type</value>
  </data>
  <data name="FleeExpressionBuilderBase_InsertString.Help" xml:space="preserve">
    <value>This is the resulting expression string to be inserted</value>
  </data>
  <data name="FleeExpressionBuilderBase_InsertString.Text" xml:space="preserve">
    <value>Expression String</value>
  </data>
  <data name="FleeExpressionBuilder_EncloseInParenthesis.Help" xml:space="preserve">
    <value>This will add parenthesis to the left and to the right of your expression.</value>
  </data>
  <data name="FleeExpressionBuilder_EncloseInParenthesis.Text" xml:space="preserve">
    <value>Enclose with Parenthesis</value>
  </data>
  <data name="FleeExpressionBuilder_Negate.Help" xml:space="preserve">
    <value>This will add the keyword "Not", which is to be interpreted as a boolean negation (should only be used on Boolean variable or members)</value>
  </data>
  <data name="FleeExpressionBuilder_Negate.Text" xml:space="preserve">
    <value>Negate</value>
  </data>
  <data name="FleeExpressionBuilder_OperatorExpression.Help" xml:space="preserve">
    <value>You can use available binary operators to build a compound expression</value>
  </data>
  <data name="FleeExpressionBuilder_OperatorExpression.Text" xml:space="preserve">
    <value>Operator And Right</value>
  </data>
  <data name="FleeExpressionBuilder_OperatorExpressions.Help" xml:space="preserve">
    <value>You can use available binary operators to build a compound expression</value>
  </data>
  <data name="FleeExpressionBuilder_OperatorExpressions.Text" xml:space="preserve">
    <value>Operator Expressions</value>
  </data>
  <data name="FleeExpressionBuilder_ResultingTypeName.Help" xml:space="preserve">
    <value>This is the .Net type of the resulting member and submember selection.</value>
  </data>
  <data name="FleeExpressionBuilder_ResultingTypeName.Text" xml:space="preserve">
    <value>Resulting Type Name</value>
  </data>
  <data name="FleeExpressionBuilder_SelectedVariableTypeName.Help" xml:space="preserve">
    <value>This is expected .Net type of the selected Variable.</value>
  </data>
  <data name="FleeExpressionBuilder_SelectedVariableTypeName.Text" xml:space="preserve">
    <value>Selected Variable Type</value>
  </data>
  <data name="FleeExpressionBuilder_SelectMember.Help" xml:space="preserve">
    <value>Check to select a member of the selected variable </value>
  </data>
  <data name="FleeExpressionBuilder_SelectMember.Text" xml:space="preserve">
    <value>Select Member</value>
  </data>
  <data name="FleeExpressionBuilder_UseOperator.Help" xml:space="preserve">
    <value>You can use available binary operators to build a compound expression</value>
  </data>
  <data name="FleeExpressionBuilder_UseOperator.Text" xml:space="preserve">
    <value>Binary Expression</value>
  </data>
  <data name="FleeExpressionBuilder_VariableMember.Help" xml:space="preserve">
    <value>You can optionally drill down the selected variable public properties fiels and functions to call that member.</value>
  </data>
  <data name="FleeExpressionBuilder_VariableMember.Text" xml:space="preserve">
    <value>Variable Member (optional)</value>
  </data>
  <data name="MemberDrillDown_SelectSubMember.Help" xml:space="preserve">
    <value>Check to drill down to a sub member of the selected member</value>
  </data>
  <data name="MemberDrillDown_SelectSubMember.Text" xml:space="preserve">
    <value>Select Sub member</value>
  </data>
  <data name="FleeExpressionBuilder_SelectedOperator.Help" xml:space="preserve">
    <value>Here is a list of binary operators available to build compound expressions. Check the &lt;a href="https://flee.codeplex.com/wikipage?title=LanguageReference"&gt; documentation &lt;/a&gt; for more details on how to use them.</value>
  </data>
  <data name="FleeExpressionBuilder_SelectedOperator.Text" xml:space="preserve">
    <value>Binary Operator</value>
  </data>
  <data name="FleeExpressionBuilder_SubExpression.Help" xml:space="preserve">
    <value>This is the sub expression to be inserted on the right of the selected binary operator. You should make sure that the resulting type is compatible with the operator used.</value>
  </data>
  <data name="FleeExpressionBuilder_SubExpression.Text" xml:space="preserve">
    <value>Right Expression</value>
  </data>
  <data name="FleeExpressionBuilder_Features.Help" xml:space="preserve">
    <value>Check here the desired expression features. The insert string will get updated accordingly</value>
  </data>
  <data name="FleeExpressionBuilder_Features.Text" xml:space="preserve">
    <value>Features</value>
  </data>
  <data name="Cast.Text" xml:space="preserve">
    <value>Cast</value>
  </data>
  <data name="FleeExpressionInfo`1_Title.Text" xml:space="preserve">
    <value>test 2</value>
  </data>
  <data name="Negate.Text" xml:space="preserve">
    <value>Negate</value>
  </data>
  <data name="Parenthesis.Text" xml:space="preserve">
    <value>Parenthesis</value>
  </data>
  <data name="SubMember.Text" xml:space="preserve">
    <value>Sub Member</value>
  </data>
  <data name="WebAction`1_WebRequest.Help" xml:space="preserve">
    <value>You can specify various parameters defining how to build your web request, include parameters and/or use a web proxy.</value>
  </data>
  <data name="DefaultProvidersImported.Message" xml:space="preserve">
    <value>{0} providers were imported. Don't forget to save your configuration before leaving the page.</value>
  </data>
  <data name="ConfigElementInstalled.Message" xml:space="preserve">
    <value>Configuration node succesfully added in web.config file</value>
  </data>
  <data name="ConfigElementUninstalled.Message" xml:space="preserve">
    <value>Configuration node succesfully removed from web.config file</value>
  </data>
  <data name="ConfigElementUpdated.Message" xml:space="preserve">
    <value>Configuration element updated</value>
  </data>
  <data name="HttpHandlerInfo_HttpVerb.Help" xml:space="preserve">
    <value>Check all Http Request verbs the handler should respond to.</value>
  </data>
  <data name="HttpHandlerInfo_HttpVerb.Text" xml:space="preserve">
    <value>Accepted Verbs</value>
  </data>
  <data name="HttpHandlerInfo_Path.Help" xml:space="preserve">
    <value>This is the path for your handler as a pattern to be registered in the web.config file (wildcards are available)</value>
  </data>
  <data name="HttpHandlerInfo_Path.Required" xml:space="preserve">
    <value>a valid HttpHandler path is required</value>
  </data>
  <data name="HttpHandlerInfo_Path.Text" xml:space="preserve">
    <value>Path</value>
  </data>
  <data name="HttpHandlersConfig_Enabled.Help" xml:space="preserve">
    <value>This is a global switch to enable or disable all dynamic handlers. Note that strongly typed handlers updated in web.config are not concerned by this switch and need to be uninstalled instead.</value>
  </data>
  <data name="HttpHandlersConfig_Enabled.Text" xml:space="preserve">
    <value>Enable Dynamic Handlers</value>
  </data>
  <data name="HttpHandlersConfig_Handlers.Help" xml:space="preserve">
    <value>You can start adding new handlers here and configure their various settings. A handler needs to be installed in web.config before it is available. Remembre to uninstall your handler before you delete it from the configuration.</value>
  </data>
  <data name="HttpHandlersConfig_Handlers.Text" xml:space="preserve">
    <value>Add Handlers and Install/Uninstall them</value>
  </data>
  <data name="HttpHandlerSettings_DynamicHandler.Help" xml:space="preserve">
    <value>Customize that dynamic rules engine to build your handler.</value>
  </data>
  <data name="HttpHandlerSettings_DynamicHandler.Text" xml:space="preserve">
    <value>Dynamic Handler</value>
  </data>
  <data name="HttpHandlerSettings_HttpHandlerMode.Help" xml:space="preserve">
    <value>There are 2 modes available: &lt;ul&gt;&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt; where you specify the usual  .Net type implementing IHttpHandler to be registered in web.config file&lt;/li&gt;&lt;li&gt; &lt;strong&gt;Dynamic Http handler&lt;/strong&gt;, where a specific configurable type is registered instead and executes a dedicated rule engine that you can configure here.&lt;/lil&gt;&lt;/ul&gt;</value>
  </data>
  <data name="HttpHandlerSettings_HttpHandlerMode.Text" xml:space="preserve">
    <value>Http Handler Mode</value>
  </data>
  <data name="HttpHandlerSettings_HttpHandlerType.Help" xml:space="preserve">
    <value>Select a .Net type for your handler to register in web.config file (your type must implement IHttpHandler)</value>
  </data>
  <data name="HttpHandlerSettings_HttpHandlerType.Text" xml:space="preserve">
    <value>Handler .Net Type </value>
  </data>
  <data name="PathInfo_CurrentMapPath.Help" xml:space="preserve">
    <value>This is the resulting path from the parameters and relative path.</value>
  </data>
  <data name="PathInfo_CurrentMapPath.Text" xml:space="preserve">
    <value>Computed Local Path</value>
  </data>
  <data name="PortalKeeperConfig_HttpHandlers.Header" xml:space="preserve">
    <value>Http Handlers </value>
  </data>
  <data name="PortalKeeperConfig_HttpHandlers.Help" xml:space="preserve">
    <value>You can choose to declare strongly typed handler or dynamic handlers with the help of a rule engine.</value>
  </data>
  <data name="PortalKeeperConfig_HttpHandlers.Text" xml:space="preserve">
    <value>In this section, you can configure Http Handlers and update the web.config file to declare them.</value>
  </data>
  <data name="Trace.Text" xml:space="preserve">
    <value>Trace</value>
  </data>
  <data name="XmlConfigElementInfo_Install.Text" xml:space="preserve">
    <value>Register Component in web.config File</value>
  </data>
  <data name="XmlConfigElementInfo_Installed.Help" xml:space="preserve">
    <value>This indicates if the Component was registered in web.config. </value>
  </data>
  <data name="XmlConfigElementInfo_Installed.Text" xml:space="preserve">
    <value>Installed</value>
  </data>
  <data name="XmlConfigElementInfo_Uninstall.Text" xml:space="preserve">
    <value>Uninstall Component from web.config</value>
  </data>
  <data name="XmlConfigElementInfo_Update.Text" xml:space="preserve">
    <value>Update web.config component with new values</value>
  </data>
  <data name="XmlNamedConfigElementInfo_Name.Help" xml:space="preserve">
    <value>Enter a valid web.config name for your HttpHandler.</value>
  </data>
  <data name="XmlNamedConfigElementInfo_Name.Required" xml:space="preserve">
    <value>a valid Name is required</value>
  </data>
  <data name="XmlNamedConfigElementInfo_Name.Text" xml:space="preserve">
    <value>HttpHandler Name</value>
  </data>
  <data name="HttpHandlersConfig_DefaultFiddle.Help" xml:space="preserve">
    <value>A fiddle is a test environment for a handler. Dynamic Http Handlers support sub-handlers which can be of any kind such as an Html Page. When configuring a new handler, the use for a test page is not uncommon and provided by a command button available in the sub handlers menu. This is the template sub-handlers that the dedicated fiddle will be cloned from, and further customized.</value>
  </data>
  <data name="HttpHandlersConfig_DefaultFiddle.Text" xml:space="preserve">
    <value>Default Fiddle</value>
  </data>
  <data name="HttpHandlerSettings_AddTestFiddle.Text" xml:space="preserve">
    <value>Create a Test Fiddle</value>
  </data>
  <data name="HttpHandlerSettings_MainHandler.Header" xml:space="preserve">
    <value>Main Handler</value>
  </data>
  <data name="HttpHandlerSettings_SubHandlers.Header" xml:space="preserve">
    <value>Sub Handlers</value>
  </data>
  <data name="HttpHandlerSettings_SubHandlers.Help" xml:space="preserve">
    <value>You can build compound handlers by refining verb and path selection, while setting intermediate parameters within the resulting decision tree. the "Create a Test Fiddle" button leverages that feature to create a test Html page to your handler with associated resources.</value>
  </data>
  <data name="HttpHandlerSettings_SubHandlers.Text" xml:space="preserve">
    <value>Sub Handlers</value>
  </data>
  <data name="HttpSubHandlerSettings_InitParamsToSubHandler.Help" xml:space="preserve">
    <value>By default, the params of the main dynamic handler engine are added to a sub handler params before it is run. Uncheck to remove the main handler parameters from the sub handler.</value>
  </data>
  <data name="HttpSubHandlerSettings_InitParamsToSubHandler.Text" xml:space="preserve">
    <value>Include Main Handler Params</value>
  </data>
  <data name="HttpSubHandlerSettings_RunMainHandler.Help" xml:space="preserve">
    <value>By default, if a sub handler matches the inbound request, the main handler is not run. Check if you want the main handler to run beforehand.</value>
  </data>
  <data name="HttpSubHandlerSettings_RunMainHandler.Text" xml:space="preserve">
    <value>Run Main Handler</value>
  </data>
  <data name="Node.Text" xml:space="preserve">
    <value>Node</value>
  </data>
  <data name="TokenizedTextInfo_AddNewTokenSources.Help" xml:space="preserve">
    <value>You can add several kinds of token sources, generally associated to prefixes. Static Tokens are native to DNN and must be upper case underscore and digits only (no prefixing). Token Providers are self contained classes, the public members of which will be exposed. Conditional Tokens let you define token sources according to other tokens value. Tokens Variables are custom variables as instances or dynamic expressions, fed to the token replace component as with token providers.</value>
  </data>
  <data name="TokenizedTextInfo_AddNewTokenSources.Text" xml:space="preserve">
    <value>Add Token Sources</value>
  </data>
  <data name="CacheableAction`1_SemaphoreAppliesToCache.Help" xml:space="preserve">
    <value>By default, your semaphore only encompasses the non cached action, to control resource access. Check if it is intended to encompass the cached action as well, for instance to control the inner flow. </value>
  </data>
  <data name="CacheableAction`1_SemaphoreAppliesToCache.Text" xml:space="preserve">
    <value>Semaphore includes Cache retrieval</value>
  </data>
  <data name="TestFiddleAdded.Message" xml:space="preserve">
    <value>A test fiddle was added as a sub-handler to your handler, with a dedicated path. To test your sub-handler, look-up the corresponding sub-path to build the resulting url.</value>
  </data>
  <data name="ActionProvider`1_DebuggerBreak.Help" xml:space="preserve">
    <value>Check to attach a debugger and break at the start of the action. This is useful if dnn event log does help with an issue.</value>
  </data>
  <data name="ActionProvider`1_DebuggerBreak.Text" xml:space="preserve">
    <value>Break Debugger</value>
  </data>
  <data name="CacheableAction`1_PreCacheInsertActions.Help" xml:space="preserve">
    <value>Enter a sequence of actions to be run before the result is inserted into the cache.</value>
  </data>
  <data name="CacheableAction`1_PreCacheInsertActions.Text" xml:space="preserve">
    <value>Pre Insert Actions</value>
  </data>
  <data name="HttpHandlerInfo_AlternateRegistrations.Help" xml:space="preserve">
    <value>You might want to declare several paths / verbs per handler. Add alternates here. Note that web.config file mandates that the name is unique.</value>
  </data>
  <data name="HttpHandlerInfo_AlternateRegistrations.Text" xml:space="preserve">
    <value>Alternate Registrations</value>
  </data>
  <data name="RuleEngineSettings`1_InitialCondition.Help" xml:space="preserve">
    <value>This is an optional initially condition to set the engine to run only in certain cases.</value>
  </data>
  <data name="RuleEngineSettings`1_InitialCondition.Text" xml:space="preserve">
    <value>Initial Condition</value>
  </data>
  <data name="SimpleExpression`1_RemoveExpressionBuilder.Text" xml:space="preserve">
    <value>Remove Expression Builder</value>
  </data>
  <data name="ActionProvider`1_DebuggerBreakEarly.Help" xml:space="preserve">
    <value>By default, the debugger will break at the beginning of the specific provider code, at the discretion of the provider's developper. You can additionally choose to break earlier in the call to the base class Run.</value>
  </data>
  <data name="ActionProvider`1_DebuggerBreakEarly.Text" xml:space="preserve">
    <value>Break Early</value>
  </data>
  <data name="ConditionProviderSettings`1_DebuggerBreak.Help" xml:space="preserve">
    <value>Check to attach a debugger and break at the start of the condition. This is useful if dnn event log does help with an issue.</value>
  </data>
  <data name="ConditionProviderSettings`1_DebuggerBreak.Text" xml:space="preserve">
    <value>Break Debugger</value>
  </data>
  <data name="FleeExpressionInfo`1_NewOwnerType.Help" xml:space="preserve">
    <value>In order to use an expression builder with the new expression owner, you must indicate what the expression owner's type is. The expression will work without that information though.</value>
  </data>
  <data name="FleeExpressionInfo`1_NewOwnerType.Text" xml:space="preserve">
    <value>New Owner Type (optional)</value>
  </data>
  <data name="SelectedOperator.NullSelect" xml:space="preserve">
    <value>&lt;-- Select a binary operator --&gt;</value>
  </data>
  <data name="April.Text" xml:space="preserve">
    <value>April</value>
  </data>
  <data name="August.Text" xml:space="preserve">
    <value>August</value>
  </data>
  <data name="Combined.Text" xml:space="preserve">
    <value>Period + Fixed times</value>
  </data>
  <data name="December.Text" xml:space="preserve">
    <value>December</value>
  </data>
  <data name="EightAM.Text" xml:space="preserve">
    <value>8 am</value>
  </data>
  <data name="EightPM.Text" xml:space="preserve">
    <value>8 pm</value>
  </data>
  <data name="ElevenAM.Text" xml:space="preserve">
    <value>11 am</value>
  </data>
  <data name="ElevenPM.Text" xml:space="preserve">
    <value>11 pm</value>
  </data>
  <data name="Every.Text" xml:space="preserve">
    <value>Every</value>
  </data>
  <data name="February.Text" xml:space="preserve">
    <value>February</value>
  </data>
  <data name="Fifth.Text" xml:space="preserve">
    <value>Fifth</value>
  </data>
  <data name="FiveAM.Text" xml:space="preserve">
    <value>5 am</value>
  </data>
  <data name="FivePM.Text" xml:space="preserve">
    <value>5 pm</value>
  </data>
  <data name="FixedTimes.Text" xml:space="preserve">
    <value>Fixed Times</value>
  </data>
  <data name="FourAM.Text" xml:space="preserve">
    <value>4 am</value>
  </data>
  <data name="FourPM.Text" xml:space="preserve">
    <value>4 pm</value>
  </data>
  <data name="Fourth.Text" xml:space="preserve">
    <value>Fourth</value>
  </data>
  <data name="Friday.Text" xml:space="preserve">
    <value>Friday</value>
  </data>
  <data name="January.Text" xml:space="preserve">
    <value>January</value>
  </data>
  <data name="July.Text" xml:space="preserve">
    <value>July</value>
  </data>
  <data name="June.Text" xml:space="preserve">
    <value>June</value>
  </data>
  <data name="March.Text" xml:space="preserve">
    <value>March</value>
  </data>
  <data name="May.Text" xml:space="preserve">
    <value>May</value>
  </data>
  <data name="Midday.Text" xml:space="preserve">
    <value>Midday</value>
  </data>
  <data name="Midnight.Text" xml:space="preserve">
    <value>Midnight</value>
  </data>
  <data name="Monday.Text" xml:space="preserve">
    <value>Monday</value>
  </data>
  <data name="NineAM.Text" xml:space="preserve">
    <value>9 am</value>
  </data>
  <data name="NinePM.Text" xml:space="preserve">
    <value>9 pm</value>
  </data>
  <data name="November.Text" xml:space="preserve">
    <value>November</value>
  </data>
  <data name="October.Text" xml:space="preserve">
    <value>October</value>
  </data>
  <data name="Once.Text" xml:space="preserve">
    <value>Once</value>
  </data>
  <data name="OneAM.Text" xml:space="preserve">
    <value>1 am</value>
  </data>
  <data name="OnePM.Text" xml:space="preserve">
    <value>1 pm</value>
  </data>
  <data name="Period.Text" xml:space="preserve">
    <value>Period</value>
  </data>
  <data name="Saturday.Text" xml:space="preserve">
    <value>Saturday</value>
  </data>
  <data name="ScheduleInfo_DayMode.Help" xml:space="preserve">
    <value>There are 3 day modes available:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Every&lt;/strong&gt; means the bot will run every day &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Once&lt;/strong&gt; means the bot will run one one day of a week at the first opportunity, without any retargeting &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Specifics&lt;/strong&gt;means you get to choose the scheduled week days&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
  <data name="ScheduleInfo_DayMode.Text" xml:space="preserve">
    <value>Day Mode</value>
  </data>
  <data name="ScheduleInfo_FormattedValue.Help" xml:space="preserve">
    <value>This is a summary of your current schedule. Note that you can see it abreviated in the Bot header link for concision.</value>
  </data>
  <data name="ScheduleInfo_FormattedValue.Text" xml:space="preserve">
    <value>Formatted Value</value>
  </data>
  <data name="ScheduleInfo_FormattedValueShort.Help" xml:space="preserve">
    <value>This is the short version that will be used as a shortcut in other place.</value>
  </data>
  <data name="ScheduleInfo_FormattedValueShort.Text" xml:space="preserve">
    <value>Formatted Value (Short)</value>
  </data>
  <data name="ScheduleInfo_HourMode.Help" xml:space="preserve">
    <value>There are 3 hours modes available:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Every&lt;/strong&gt; means the bot will run every hour &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Once&lt;/strong&gt; means the bot will run once a day at the first opportunity, and retarget to the next day midnight. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Specifics&lt;/strong&gt;means you get to choose the scheduled hours&lt;/li&gt;&lt;/ul&gt; </value>
  </data>
  <data name="ScheduleInfo_HourMode.Text" xml:space="preserve">
    <value>Hour Mode</value>
  </data>
  <data name="ScheduleInfo_MonthMode.Help" xml:space="preserve">
    <value>There are 3 Month modes available:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Every&lt;/strong&gt; means the bot will run every month&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Once&lt;/strong&gt; means the bot will run on one month of the year at the first opportunity,  retargeting to next years's january.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Specifics&lt;/strong&gt;means you get to choose the scheduled month&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
  <data name="ScheduleInfo_MonthMode.Text" xml:space="preserve">
    <value>Month Mode</value>
  </data>
  <data name="ScheduleInfo_Period.Help" xml:space="preserve">
    <value>This is the target period between 2 runs of your bot.</value>
  </data>
  <data name="ScheduleInfo_Period.Text" xml:space="preserve">
    <value>Period</value>
  </data>
  <data name="ScheduleInfo_ScheduleType.Help" xml:space="preserve">
    <value>There are 2 modes. &lt;ul&gt;&lt;li&gt;&lt;strong&gt;Period&lt;/strong&gt; will let you enter a time span.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Fixed times&lt;/strong&gt; will let you choose fixed hours and date events&lt;/li&gt;&lt;strong&gt;Combined&lt;/strong&gt;&lt;/li&gt; will run the bot on the periodic schedule within the fixed slots configured. This is meaningful with quite short periods&lt;/ul&gt;</value>
  </data>
  <data name="ScheduleInfo_ScheduleType.Text" xml:space="preserve">
    <value>Schedule Type</value>
  </data>
  <data name="ScheduleInfo_SpecificDays.Help" xml:space="preserve">
    <value>Choose here the specific hours when you want your bot to run.</value>
  </data>
  <data name="ScheduleInfo_SpecificDays.Text" xml:space="preserve">
    <value>Specific Days</value>
  </data>
  <data name="ScheduleInfo_SpecificHours.Help" xml:space="preserve">
    <value>Choose here the specific hours when you want your bot to run.</value>
  </data>
  <data name="ScheduleInfo_SpecificHours.Text" xml:space="preserve">
    <value>Specific Hours</value>
  </data>
  <data name="ScheduleInfo_SpecificMonths.Help" xml:space="preserve">
    <value>Choose here the specific months when you want your bot to run.</value>
  </data>
  <data name="ScheduleInfo_SpecificMonths.Text" xml:space="preserve">
    <value>Specific Months</value>
  </data>
  <data name="ScheduleInfo_SpecificWeeks.Help" xml:space="preserve">
    <value>Choose here the specific weeks of the month when you want your bot to run.</value>
  </data>
  <data name="ScheduleInfo_SpecificWeeks.Text" xml:space="preserve">
    <value>Specific Weeks</value>
  </data>
  <data name="ScheduleInfo_SpecificYears.Help" xml:space="preserve">
    <value>Manage here the specific years when you want your bot to run.</value>
  </data>
  <data name="ScheduleInfo_SpecificYears.Text" xml:space="preserve">
    <value>Specific Years</value>
  </data>
  <data name="ScheduleInfo_WeekMode.Help" xml:space="preserve">
    <value>There are 3 week modes available:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Every&lt;/strong&gt; means the bot will run every week &lt;/li&gt;&lt;li&gt;&lt;strong&gt;Once&lt;/strong&gt; means the bot will run on one week of the month at the first opportunity,  retargeting to the next month's first week.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Specifics&lt;/strong&gt;means you get to choose the scheduled month weeks&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
  <data name="ScheduleInfo_WeekMode.Text" xml:space="preserve">
    <value>Week Mode</value>
  </data>
  <data name="ScheduleInfo_YearMode.Help" xml:space="preserve">
    <value>There are 3 year modes available:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Every&lt;/strong&gt; means the bot will run every year&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Once&lt;/strong&gt; means the bot will run only once. Any existing history will cause the bot  to stop running&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Specifics&lt;/strong&gt;means you get to choose the years by managing a list of integers.&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
  <data name="ScheduleInfo_YearMode.Text" xml:space="preserve">
    <value>Year Mode</value>
  </data>
  <data name="September.Text" xml:space="preserve">
    <value>September</value>
  </data>
  <data name="SevenAM.Text" xml:space="preserve">
    <value>7 am</value>
  </data>
  <data name="SevenPM.Text" xml:space="preserve">
    <value>7 pm</value>
  </data>
  <data name="SixAM.Text" xml:space="preserve">
    <value>6 am</value>
  </data>
  <data name="SixPM.Text" xml:space="preserve">
    <value>6 pm</value>
  </data>
  <data name="Specifics.Text" xml:space="preserve">
    <value>Specifics</value>
  </data>
  <data name="Sunday.Text" xml:space="preserve">
    <value>Sunday</value>
  </data>
  <data name="TenAM.Text" xml:space="preserve">
    <value>10 am</value>
  </data>
  <data name="TenPM.Text" xml:space="preserve">
    <value>10 pm</value>
  </data>
  <data name="Third.Text" xml:space="preserve">
    <value>Third</value>
  </data>
  <data name="ThreeAM.Text" xml:space="preserve">
    <value>3 am</value>
  </data>
  <data name="ThreePM.Text" xml:space="preserve">
    <value>3 pm</value>
  </data>
  <data name="Thursday.Text" xml:space="preserve">
    <value>Thursday</value>
  </data>
  <data name="Tuesday.Text" xml:space="preserve">
    <value>Tuesday</value>
  </data>
  <data name="TwoAM.Text" xml:space="preserve">
    <value>2 am</value>
  </data>
  <data name="TwoPM.Text" xml:space="preserve">
    <value>2 pm</value>
  </data>
  <data name="Wednesday.Text" xml:space="preserve">
    <value>Wednesday</value>
  </data>
  <data name="Cache.Text" xml:space="preserve">
    <value>Cache</value>
  </data>
  <data name="UserVariableInfo_Title.Required" xml:space="preserve">
    <value>Variable Name required</value>
  </data>
  <data name="Variable.Text" xml:space="preserve">
    <value>Variable</value>
  </data>
  <data name="WebRequestInfo`1_ClientLocation.Help" xml:space="preserve">
    <value>Define here where the shared web client should be stored and looked for. </value>
  </data>
  <data name="WebRequestInfo`1_ClientLocation.Text" xml:space="preserve">
    <value>Client Location</value>
  </data>
  <data name="WebRequestInfo`1_WebClientVarName.Help" xml:space="preserve">
    <value>Choose a name for shared web client if applicable.</value>
  </data>
  <data name="WebRequestInfo`1_WebClientVarName.Text" xml:space="preserve">
    <value>Web Client Variable Name</value>
  </data>
  <data name="WebRequestInfo`1_CloseClient.Help" xml:space="preserve">
    <value>Check if this is the last request and the resources can be freed</value>
  </data>
  <data name="WebRequestInfo`1_CloseClient.Text" xml:space="preserve">
    <value>Dispose Client (last use)</value>
  </data>
  <data name="WebRequestInfo`1_EnableReferer.Help" xml:space="preserve">
    <value>Check to keep track of the last request address and include it as a referrer to the following.</value>
  </data>
  <data name="WebRequestInfo`1_EnableReferer.Text" xml:space="preserve">
    <value>Enable Referer</value>
  </data>
  <data name="WebRequestInfo`1_ReUseClient.Help" xml:space="preserve">
    <value>Use that option to share you web client for several requests, for instance in order to keep session cookies.</value>
  </data>
  <data name="WebRequestInfo`1_ReUseClient.Text" xml:space="preserve">
    <value>Share Web Client</value>
  </data>
  <data name="AccessCodeValidated.Message" xml:space="preserve">
    <value>your access code was validated, and a long lived access token was obtained in exchange. You may save your configuration.</value>
  </data>
  <data name="AuthenticateUrl_Navigate.Text" xml:space="preserve">
    <value>Click to Authorize</value>
  </data>
  <data name="DeleteCell.Text" xml:space="preserve">
    <value>Delete Cell</value>
  </data>
  <data name="GDataServiceInfo`2_AuthenticationSettings.Help" xml:space="preserve">
    <value>This is the application settings as obtained from your Console. To obtain those settings, navigate to &lt;a href="https://console.developers.google.com"&gt;your developer console&lt;/a&gt;, create a project if needed, and in Credentials, create a new client id of type "Installed Application"</value>
  </data>
  <data name="GDataServiceInfo`2_AuthenticationSettings.Text" xml:space="preserve">
    <value>OAuth2 Settings</value>
  </data>
  <data name="GDataServiceInfo`2_AuthorizationToken.Help" xml:space="preserve">
    <value>The service must be authorized by a google account. You can have the corresponding link generated once the OAuth settings are correct. Then you'll be provided a Token to validate here.</value>
  </data>
  <data name="GDataServiceInfo`2_AuthorizationToken.Text" xml:space="preserve">
    <value>Authorization Token</value>
  </data>
  <data name="GDataServiceInfo`2_InitializeToken.Text" xml:space="preserve">
    <value>Initialize Access Token</value>
  </data>
  <data name="GoogleOAuth2Info_ApplicationName.Help" xml:space="preserve">
    <value>Enter your application name or your Google Project ID</value>
  </data>
  <data name="GoogleOAuth2Info_ApplicationName.Required" xml:space="preserve">
    <value>An Application name is required. Enter your Google Project ID</value>
  </data>
  <data name="GoogleOAuth2Info_ApplicationName.Text" xml:space="preserve">
    <value>Application Name</value>
  </data>
  <data name="GoogleOAuth2Info_Scope.Help" xml:space="preserve">
    <value>This is a list of API authorization that your application asks for.</value>
  </data>
  <data name="GoogleOAuth2Info_Scope.Text" xml:space="preserve">
    <value>Scope</value>
  </data>
  <data name="CellFeedInfo`1_CaptureCellFeed.Help" xml:space="preserve">
    <value>You can choose to save the Cell Feed to a local variable for later use in expressions. Its type is Google.GData.Spreadsheets.CellFeed</value>
  </data>
  <data name="CellFeedInfo`1_CaptureCellFeed.Text" xml:space="preserve">
    <value>Capture Cell Feed</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_CaptureSpreadsheetFeed.Help" xml:space="preserve">
    <value>You can choose to save the spreadsheet to a local variable for later use in expressions. Its type is Google.GData.Spreadsheets.SpreadsheetFeed</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_CaptureSpreadsheetFeed.Text" xml:space="preserve">
    <value>Capture Spreadsheet Feed</value>
  </data>
  <data name="WorksheetEntryInfo`1_CaptureWorksheetEntry.Help" xml:space="preserve">
    <value>You can choose to save the worksheet entry to a local variable for later use in expressions. Its type is Google.GData.Spreadsheets.WorksheetEntry</value>
  </data>
  <data name="WorksheetEntryInfo`1_CaptureWorksheetEntry.Text" xml:space="preserve">
    <value>Capture Worksheet Entry</value>
  </data>
  <data name="WorksheetEntryInfo`1_CaptureWorksheetFeed.Help" xml:space="preserve">
    <value>You can choose to save the worksheet feed to a local variable for later use in expressions. Its type is Google.GData.Spreadsheets.WorksheetFeed</value>
  </data>
  <data name="WorksheetEntryInfo`1_CaptureWorksheetFeed.Text" xml:space="preserve">
    <value>Capture Worksheet Feed</value>
  </data>
  <data name="CellFeedInfo`1_CellFeedName.Help" xml:space="preserve">
    <value>This is the name of the local variable created in the context to store the Cell feed.</value>
  </data>
  <data name="CellFeedInfo`1_CellFeedName.Text" xml:space="preserve">
    <value>Cell Feed Variable Name</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_Commands.Help" xml:space="preserve">
    <value>Define here a sequential series of individual cell read or write commands. read cell values are agregated into a dictionary, wich is the output of the action provider.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_Commands.Text" xml:space="preserve">
    <value>Commands</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_Initialize.Text" xml:space="preserve">
    <value>Initialize Spreadsheet service</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_Service.Help" xml:space="preserve">
    <value>In order to connect to a spreadsheet service, you must provide an OAuth2 configuration and an OAuth2 token. You can enter the informations manually or provide an expression for them.</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_Service.Text" xml:space="preserve">
    <value>Service Settings</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_SpreadSheetFeedName.Help" xml:space="preserve">
    <value>This is the name of the local variable created in the context to store the spreadsheet feed.</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_SpreadSheetFeedName.Text" xml:space="preserve">
    <value>Spreadsheet Feed Variable Name</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_SpreadSheetName.Help" xml:space="preserve">
    <value>This is the name of the spread sheet to access, as provided in your Google document / Google drive account. Note that, you can connect to the service to obtain a list of spreadsheets and worksheets to select from, if your configuration allows it.</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_SpreadSheetName.Text" xml:space="preserve">
    <value>Spreadsheet Name</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_SpreadSheetNameSelection.Help" xml:space="preserve">
    <value>This is the list of Google Spreadsheets retrieved from your Google account.</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_SpreadSheetNameSelection.Text" xml:space="preserve">
    <value>Select Spreadsheet</value>
  </data>
  <data name="WorksheetEntryInfo`1_WorksheetEntryName.Help" xml:space="preserve">
    <value>This is the name of the local variable created in the context to store the worksheet entry.</value>
  </data>
  <data name="WorksheetEntryInfo`1_WorksheetEntryName.Text" xml:space="preserve">
    <value>Worksheet Entry Variable Name</value>
  </data>
  <data name="WorksheetEntryInfo`1_WorksheetFeedName.Help" xml:space="preserve">
    <value>This is the name of the local variable created in the context to store the worksheet feed.</value>
  </data>
  <data name="WorksheetEntryInfo`1_WorksheetFeedName.Text" xml:space="preserve">
    <value>Worksheet Feed Variable Name</value>
  </data>
  <data name="WorksheetEntryInfo`1_WorkSheetName.Help" xml:space="preserve">
    <value>Within the above spreadsheet, this is the name of the worksheet to access. Note that, you can connect to the service to obtain a list of spreadsheets and worksheets to select from, if your configuration allows it.</value>
  </data>
  <data name="WorksheetEntryInfo`1_WorkSheetName.Text" xml:space="preserve">
    <value>Worksheet Name</value>
  </data>
  <data name="WorksheetEntryInfo`1_WorkSheetNameSelection.Help" xml:space="preserve">
    <value>This is the list of Worksheets for the select spreadsheet</value>
  </data>
  <data name="WorksheetEntryInfo`1_WorkSheetNameSelection.Text" xml:space="preserve">
    <value>Select Worksheet</value>
  </data>
  <data name="InsertCell.Text" xml:space="preserve">
    <value>Insert Cell</value>
  </data>
  <data name="OAuth2AccessToken_AccessCode.Help" xml:space="preserve">
    <value>This is the code provided by Google at the above page, to confirm authorization.</value>
  </data>
  <data name="OAuth2AccessToken_AccessCode.Required" xml:space="preserve">
    <value>Access Code is required, navigate to the above link to authorize the service and obtain an access code.</value>
  </data>
  <data name="OAuth2AccessToken_AccessCode.Text" xml:space="preserve">
    <value>Google Access Code</value>
  </data>
  <data name="OAuth2AccessToken_AccessToken.Help" xml:space="preserve">
    <value>This is the long lived access token obtained from the access code. A refresh token is also saved.</value>
  </data>
  <data name="OAuth2AccessToken_AccessToken.Text" xml:space="preserve">
    <value>Access Token</value>
  </data>
  <data name="OAuth2AccessToken_AuthenticateUrl.Help" xml:space="preserve">
    <value>This is a one-time link to the authorization page. Once authorized, you will be given a token to enter validate here.</value>
  </data>
  <data name="OAuth2AccessToken_AuthenticateUrl.Text" xml:space="preserve">
    <value>Authorization Url</value>
  </data>
  <data name="OAuth2AccessToken_Status.Help" xml:space="preserve">
    <value>States if the token is empty, pending authorization or authorized. </value>
  </data>
  <data name="OAuth2AccessToken_Status.Text" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="OAuth2AccessToken_ValidateAccessCode.Text" xml:space="preserve">
    <value>Validate Access Code</value>
  </data>
  <data name="OAuth2TokenInitialized.Message" xml:space="preserve">
    <value>Authorization Link initialized. Navigate to the supplied link to authorize your Google Account.</value>
  </data>
  <data name="ReadCell.Text" xml:space="preserve">
    <value>Read Cell</value>
  </data>
  <data name="SpreadSheetCommand`1_Column.Help" xml:space="preserve">
    <value>This is a static integer value or dynamic expression for the column's index of the target cell.</value>
  </data>
  <data name="SpreadSheetCommand`1_Column.Text" xml:space="preserve">
    <value>Column</value>
  </data>
  <data name="SpreadSheetCommand`1_Key.Help" xml:space="preserve">
    <value>This is the key to store the read value in the output dictionary</value>
  </data>
  <data name="SpreadSheetCommand`1_Key.Text" xml:space="preserve">
    <value>Output Key</value>
  </data>
  <data name="SpreadSheetCommand`1_Operation.Help" xml:space="preserve">
    <value>Operation. A range of individual cell operations are available, to update the worksheet or to read values into the output dictionary variable</value>
  </data>
  <data name="SpreadSheetCommand`1_Operation.Text" xml:space="preserve">
    <value>Operation</value>
  </data>
  <data name="SpreadSheetCommand`1_Row.Help" xml:space="preserve">
    <value>This is a static integer value or dynamic expression for the row's index of the target cell.</value>
  </data>
  <data name="SpreadSheetCommand`1_Row.Text" xml:space="preserve">
    <value>Row</value>
  </data>
  <data name="SpreadSheetNameSelection.NullSelect" xml:space="preserve">
    <value>&lt;-- No Spreadsheet Selected --&gt;</value>
  </data>
  <data name="UpdateCell.Text" xml:space="preserve">
    <value>Update Cell</value>
  </data>
  <data name="WorkSheetNameSelection.NullSelect" xml:space="preserve">
    <value>&lt;-- No Worksheet Selected --&gt;</value>
  </data>
  <data name="ActionProvider`1_RandomizeSleepTime.Help" xml:space="preserve">
    <value>You can choose to make the sleep duration random, with a uniform distribution between 0 and twice the target duration</value>
  </data>
  <data name="ActionProvider`1_RandomizeSleepTime.Text" xml:space="preserve">
    <value>Randomize Sleep Duration</value>
  </data>
  <data name="ActionProvider`1_RandomizeSleepTimeOverOnly.Help" xml:space="preserve">
    <value>Check to turn to a uniform distribution between the target duration and twice its value.</value>
  </data>
  <data name="ActionProvider`1_RandomizeSleepTimeOverOnly.Text" xml:space="preserve">
    <value>Randomize Striclty Above</value>
  </data>
  <data name="CellFeedInfo`1_CreateIf.Help" xml:space="preserve">
    <value>You can choose to enter init settings to build the worksheet entry if the following condition matches</value>
  </data>
  <data name="CellFeedInfo`1_CreateIf.Text" xml:space="preserve">
    <value>Create if Expression</value>
  </data>
  <data name="CellFeedInfo`1_CreateIfNull.Help" xml:space="preserve">
    <value>You can choose to enter init settings to build the worksheet entry if the expression yields nothing</value>
  </data>
  <data name="CellFeedInfo`1_CreateIfNull.Text" xml:space="preserve">
    <value>Create if Null</value>
  </data>
  <data name="CellFeedInfo`1_UseExistingWorksheetEntry.Help" xml:space="preserve">
    <value>You can use a worksheet feed previously captured into a context variable, by entering the corresponding typed expression.</value>
  </data>
  <data name="CellFeedInfo`1_UseExistingWorksheetEntry.Text" xml:space="preserve">
    <value>Use Existing Worksheet Entry</value>
  </data>
  <data name="CellFeedInfo`1_WorksheetEntryExpression.Help" xml:space="preserve">
    <value>Enter an Expression for an existing worksheet entry previously captured as a contextual variable.</value>
  </data>
  <data name="CellFeedInfo`1_WorksheetEntryExpression.Text" xml:space="preserve">
    <value>Worksheet Entry Expression</value>
  </data>
  <data name="CellFeedInfo`1_WorksheetInfo.Help" xml:space="preserve">
    <value>Enter the parameters needed to access your worksheet</value>
  </data>
  <data name="CellFeedInfo`1_WorksheetInfo.Text" xml:space="preserve">
    <value>Worksheet Entry Info</value>
  </data>
  <data name="FleeExpressionInfo`1_BreakAtCompileTime.Help" xml:space="preserve">
    <value>When running with the module's source code, check to launch a debugger if needed, and break before the expression is compiled to examine the environment.</value>
  </data>
  <data name="FleeExpressionInfo`1_BreakAtCompileTime.Text" xml:space="preserve">
    <value>Break at Compile Time</value>
  </data>
  <data name="FleeExpressionInfo`1_BreakAtEvaluateTime.Help" xml:space="preserve">
    <value>When running with the module's source code, check to launch a debugger if needed, and break before the expression is evaluated to examine the environment.</value>
  </data>
  <data name="FleeExpressionInfo`1_BreakAtEvaluateTime.Text" xml:space="preserve">
    <value>Break at Evaluate Time</value>
  </data>
  <data name="FleeExpressionInfo`1_BreakOnException.Help" xml:space="preserve">
    <value>When running with the module's source code, check to launch a debugger if needed, and break when an exception occurs at compile time or at evaluation time.</value>
  </data>
  <data name="FleeExpressionInfo`1_BreakOnException.Text" xml:space="preserve">
    <value>Break On Exception</value>
  </data>
  <data name="FleeExpressionInfo`1_Debug.Header" xml:space="preserve">
    <value>Debug</value>
  </data>
  <data name="FleeExpressionInfo`1_LogCompileExceptions.Help" xml:space="preserve">
    <value>Check to store a dnn event log for each exception thrown at compile time.</value>
  </data>
  <data name="FleeExpressionInfo`1_LogCompileExceptions.Text" xml:space="preserve">
    <value>Log Compile Exceptions</value>
  </data>
  <data name="FleeExpressionInfo`1_LogEvaluateExceptions.Help" xml:space="preserve">
    <value>Check to store a dnn event log for each exception thrown at evaluate time.</value>
  </data>
  <data name="FleeExpressionInfo`1_LogEvaluateExceptions.Text" xml:space="preserve">
    <value>Log Evaluate Exceptions</value>
  </data>
  <data name="FleeExpressionInfo`1_ThrowCompileExceptions.Help" xml:space="preserve">
    <value>Check to throw any exception caught at compile time.</value>
  </data>
  <data name="FleeExpressionInfo`1_ThrowCompileExceptions.Text" xml:space="preserve">
    <value>Throw Compile Exceptions</value>
  </data>
  <data name="FleeExpressionInfo`1_ThrowEvaluateExceptions.Help" xml:space="preserve">
    <value>Check to throw any exception caught at Evaluate time.</value>
  </data>
  <data name="FleeExpressionInfo`1_ThrowEvaluateExceptions.Text" xml:space="preserve">
    <value>Throw Evaluate Exceptions</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_CaptureWorksheetEntry.Help" xml:space="preserve">
    <value>You can choose to capture the target worksheetentry to a local contextual variable.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_CaptureWorksheetEntry.Text" xml:space="preserve">
    <value>Capture WorksheetEntry</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_CellFeed.Header" xml:space="preserve">
    <value>Cell Feed</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_CellFeedExpression.Help" xml:space="preserve">
    <value>Enter an Expression for an existing cell feed previously captured as a contextual variable.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_CellFeedExpression.Text" xml:space="preserve">
    <value>Cell Feed Expression</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_CellFeedInfo.Help" xml:space="preserve">
    <value>Enter the parameters needed to build you cell feed.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_CellFeedInfo.Text" xml:space="preserve">
    <value>Cell Feed Info</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_Commands.Header" xml:space="preserve">
    <value>Commands</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_CreateIf.Help" xml:space="preserve">
    <value>You can choose to enter init settings to build the cell feed if the following condition matches</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_CreateIf.Text" xml:space="preserve">
    <value>Create if Expression</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_CreateIfNull.Help" xml:space="preserve">
    <value>You can choose to enter init settings to build the cell feed if the expression yields nothing</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_CreateIfNull.Text" xml:space="preserve">
    <value>Create if Null</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_Pace.Help" xml:space="preserve">
    <value>This is the time to wait between 2 commands.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_Pace.Text" xml:space="preserve">
    <value>Command Pace</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_Spreadsheet.Header" xml:space="preserve">
    <value>Spreadsheet</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_UseExistingFeed.Help" xml:space="preserve">
    <value>You can use a feed previously captured into a context variable, by entering the corresponding typed expression.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_UseExistingFeed.Text" xml:space="preserve">
    <value>Use Existing Feed</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_WorksheetEntryExpression.Help" xml:space="preserve">
    <value>Enter an Expression for an existing worksheet entry previously captured as a contextual variable.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_WorksheetEntryExpression.Text" xml:space="preserve">
    <value>Worksheet Entry Expression</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_WorksheetEntryName.Help" xml:space="preserve">
    <value>Enter a name to capture the current worksheet entry to a context variable for reuse.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_WorksheetEntryName.Text" xml:space="preserve">
    <value>Worksheet Entry Name</value>
  </data>
  <data name="LoopActionProvider`1_CaptureCounter.Help" xml:space="preserve">
    <value>You can capture the current iteration of the loop into a variable to be used in later expressions</value>
  </data>
  <data name="LoopActionProvider`1_CaptureCounter.Text" xml:space="preserve">
    <value>Capture Counter</value>
  </data>
  <data name="LoopActionProvider`1_CounterStartsAt1.Help" xml:space="preserve">
    <value>Traditionally, .Net indices start at 0, but as it isn't the case for real world problems, you may find convenient to switch to a 1 based index.</value>
  </data>
  <data name="LoopActionProvider`1_CounterStartsAt1.Text" xml:space="preserve">
    <value>Counter starts at 1</value>
  </data>
  <data name="LoopActionProvider`1_CounterVarName.Help" xml:space="preserve">
    <value>Enter a name for your counter variable</value>
  </data>
  <data name="LoopActionProvider`1_CounterVarName.Text" xml:space="preserve">
    <value>Counter Variable Name</value>
  </data>
  <data name="LoopActionProvider`1_Reverse.Help" xml:space="preserve">
    <value>Check to enumerate the list clone of the target collection in the reverse order.</value>
  </data>
  <data name="LoopActionProvider`1_Reverse.Text" xml:space="preserve">
    <value>Reverse</value>
  </data>
  <data name="LoopActionProvider`1_UseCloneList.Help" xml:space="preserve">
    <value>Use that option if you want to reverse or to change the collection being enumerated during the loop. Otherwise, an exception wil be thrown.</value>
  </data>
  <data name="LoopActionProvider`1_UseCloneList.Text" xml:space="preserve">
    <value>Use Clone List</value>
  </data>
  <data name="SimpleOrExpressionBase`2_CreateIfNull.Help" xml:space="preserve">
    <value>You can choose to enter a default value if the expression yields nothing</value>
  </data>
  <data name="SimpleOrExpressionBase`2_CreateIfNull.Text" xml:space="preserve">
    <value>Create if Null</value>
  </data>
  <data name="SpreadSheetCommand`1_Condition.Help" xml:space="preserve">
    <value>Optionally enter a condition to be matched for the command to be executed.</value>
  </data>
  <data name="SpreadSheetCommand`1_Condition.Text" xml:space="preserve">
    <value>Condition</value>
  </data>
  <data name="SpreadSheetCommand`1_ReadInput.Help" xml:space="preserve">
    <value>By default, the displayed value will be read. In case of a formula, you may occasionally want to read the formula instead. Check here to read the input value rather than the display value.</value>
  </data>
  <data name="SpreadSheetCommand`1_ReadInput.Text" xml:space="preserve">
    <value>Read Input Value</value>
  </data>
  <data name="SpreadSheetCommand`1_Value.Help" xml:space="preserve">
    <value>Enter a value or an expression. The expected expression type, CData can be implicitely converted from a string expression.</value>
  </data>
  <data name="SpreadSheetCommand`1_Value.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_CaptureSpreadsheetEntry.Help" xml:space="preserve">
    <value>You can choose to save the spreadsheet entry to a local variable for later use in expressions. Its type is Google.GData.Spreadsheets.SpreadsheetEntry</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_CaptureSpreadsheetEntry.Text" xml:space="preserve">
    <value>Capture Spreadsheet Entry</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_Service.Header" xml:space="preserve">
    <value>Service</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_ServiceReady.Help" xml:space="preserve">
    <value>Indicates if the service can be initialized to retrive the list of spreadsheets. </value>
  </data>
  <data name="SpreadSheetEntryInfo`1_ServiceReady.Text" xml:space="preserve">
    <value>Service Ready</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_SpreadSheet.Header" xml:space="preserve">
    <value>Selection</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_SpreadsheetEntryName.Help" xml:space="preserve">
    <value>Enter a name to store the resulting spreadsheet entry as a contextual variable.</value>
  </data>
  <data name="SpreadSheetEntryInfo`1_SpreadsheetEntryName.Text" xml:space="preserve">
    <value>Spreadsheet Entry Name</value>
  </data>
  <data name="SubPathContainer_BottomPath.Header" xml:space="preserve">
    <value>Path</value>
  </data>
  <data name="SubPathContainer_BottomPath.Help" xml:space="preserve">
    <value>This is the current selected sub path for the child entity. Click on a node to navigate upward or downward the objects hierarchy.</value>
  </data>
  <data name="SubPathContainer_BottomPath.Text" xml:space="preserve">
    <value>Current Path</value>
  </data>
  <data name="WorksheetEntryInfo`1_CreateIf.Help" xml:space="preserve">
    <value>You can choose to enter init settings to build the spreadsheet entry if the following condition matches</value>
  </data>
  <data name="WorksheetEntryInfo`1_CreateIf.Text" xml:space="preserve">
    <value>Create if Expression</value>
  </data>
  <data name="WorksheetEntryInfo`1_CreateIfNull.Help" xml:space="preserve">
    <value>You can choose to enter init settings to build the spreadsheet entry if the expression yields nothing</value>
  </data>
  <data name="WorksheetEntryInfo`1_CreateIfNull.Text" xml:space="preserve">
    <value>Create if Null</value>
  </data>
  <data name="WorksheetEntryInfo`1_Spreadsheet.Help" xml:space="preserve">
    <value>Enter the parameters needed to access your spreadsheet</value>
  </data>
  <data name="WorksheetEntryInfo`1_Spreadsheet.Text" xml:space="preserve">
    <value>Spreadsheet</value>
  </data>
  <data name="WorksheetEntryInfo`1_SpreadSheetEntryExpression.Help" xml:space="preserve">
    <value>Enter an Expression for an existing spreadsheet entry previously captured as a contextual variable.</value>
  </data>
  <data name="WorksheetEntryInfo`1_SpreadSheetEntryExpression.Text" xml:space="preserve">
    <value>Spreadsheet Entry Epxression</value>
  </data>
  <data name="WorksheetEntryInfo`1_UseExistingSpreadSheetEntry.Help" xml:space="preserve">
    <value>You can use a spreadsheed entry previously captured into a context variable, by entering the corresponding typed expression.</value>
  </data>
  <data name="WorksheetEntryInfo`1_UseExistingSpreadSheetEntry.Text" xml:space="preserve">
    <value>Use Existing Spreadsheet Entry</value>
  </data>
  <data name="WorksheetEntryInfo`1_WorkSheetInfo.Help" xml:space="preserve">
    <value>Those are a few characteristics from the selected worksheet</value>
  </data>
  <data name="WorksheetEntryInfo`1_WorkSheetInfo.Text" xml:space="preserve">
    <value>Selected Worksheet Info</value>
  </data>
  <data name="CaptureStream.Text" xml:space="preserve">
    <value>Capture Stream</value>
  </data>
  <data name="CaptureString.Text" xml:space="preserve">
    <value>Capture String</value>
  </data>
  <data name="Detailed.Text" xml:space="preserve">
    <value>Detailed</value>
  </data>
  <data name="DnnPageCondition`1_MatchAnyDNNPageRequest.Help" xml:space="preserve">
    <value>Check to match any DNN page request of the instance.</value>
  </data>
  <data name="DnnPageCondition`1_MatchAnyDNNPageRequest.Text" xml:space="preserve">
    <value>Match Any DNN Page</value>
  </data>
  <data name="GeneralObjectAction_StaticCall.Help" xml:space="preserve">
    <value>Check to enforce a static property or method call and remove the object validator</value>
  </data>
  <data name="GeneralObjectAction_StaticCall.Text" xml:space="preserve">
    <value>Static Call</value>
  </data>
  <data name="KeeperObjectAction`1_AvailableParameters.Help" xml:space="preserve">
    <value>The following arguments are passed from the event into context variables you can access in expressions.</value>
  </data>
  <data name="KeeperObjectAction`1_AvailableParameters.Text" xml:space="preserve">
    <value>Available Parameters</value>
  </data>
  <data name="KeeperObjectAction`1_PassArguments.Help" xml:space="preserve">
    <value>Check to store the event arguments as context variables. Note that because generally default imports are activated in expressions, thus "e" is understood as the mathematical constant, the name for event args is changed from "e" to Eargs when applicable.</value>
  </data>
  <data name="KeeperObjectAction`1_PassArguments.Text" xml:space="preserve">
    <value>Pass Arguments</value>
  </data>
  <data name="MembershipCondition`1_MatchAllAuthenticated.Help" xml:space="preserve">
    <value>Check to match all authenticated requests regardless of specific membership</value>
  </data>
  <data name="MembershipCondition`1_MatchAllAuthenticated.Text" xml:space="preserve">
    <value>Match Any Authenticated</value>
  </data>
  <data name="MembershipCondition`1_MatchUnauthenticated.Help" xml:space="preserve">
    <value>Matched anonymous http requests.</value>
  </data>
  <data name="MembershipCondition`1_MatchUnauthenticated.Text" xml:space="preserve">
    <value>Match Unauthenticated</value>
  </data>
  <data name="OutputCachingStrategy_Cacheability.Help" xml:space="preserve">
    <value>Enter the desired level of cacheability, according to &lt;a href="http://msdn.microsoft.com/en-us/library/system.web.httpcacheability%28v=vs.110%29.aspx"&gt;Ms documentation&lt;/a&gt;</value>
  </data>
  <data name="OutputCachingStrategy_Cacheability.Text" xml:space="preserve">
    <value>Cacheability</value>
  </data>
  <data name="OutputCachingStrategy_ClearCookies.Help" xml:space="preserve">
    <value>Clears the output cookies before caching is set (recommanded)</value>
  </data>
  <data name="OutputCachingStrategy_ClearCookies.Text" xml:space="preserve">
    <value>Clear Cookies</value>
  </data>
  <data name="OutputCachingStrategy_Duration.Help" xml:space="preserve">
    <value>Enter a duration, from which the expiry date is computed when caching is triggered.</value>
  </data>
  <data name="OutputCachingStrategy_Duration.Text" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="OutputCachingStrategy_EmptyPathInfoOnly.Help" xml:space="preserve">
    <value>Only Cache Requests with empty paths, relative to the application root.</value>
  </data>
  <data name="OutputCachingStrategy_EmptyPathInfoOnly.Text" xml:space="preserve">
    <value>Empty Path Only</value>
  </data>
  <data name="OutputCachingStrategy_EmptyQueryStringOnly.Help" xml:space="preserve">
    <value>Only Cache Requests with no query string.</value>
  </data>
  <data name="OutputCachingStrategy_EmptyQueryStringOnly.Text" xml:space="preserve">
    <value>Empty Query String only</value>
  </data>
  <data name="OutputCachingStrategy_Enabled.Help" xml:space="preserve">
    <value>If unchecked, the caching strategy is bypassed.</value>
  </data>
  <data name="OutputCachingStrategy_Enabled.Text" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="OutputCachingStrategy_Policy.Header" xml:space="preserve">
    <value>Policy</value>
  </data>
  <data name="OutputCachingStrategy_Scope.Header" xml:space="preserve">
    <value>Scope</value>
  </data>
  <data name="OutputCachingStrategy_VaryBy.Help" xml:space="preserve">
    <value>Enter a comma separated list of query string or forms params to vary the cached versions by.</value>
  </data>
  <data name="OutputCachingStrategy_VaryBy.Text" xml:space="preserve">
    <value>Vary By Params</value>
  </data>
  <data name="OutputCachingStrategy_VaryByBrowser.Help" xml:space="preserve">
    <value>Activates the VaryByCustom("browser") feature, which yields distinct browser cached version </value>
  </data>
  <data name="OutputCachingStrategy_VaryByBrowser.Text" xml:space="preserve">
    <value>Vary by Browser</value>
  </data>
  <data name="OutputCachingStrategy_VaryByHeaders.Help" xml:space="preserve">
    <value>Enter a list of comma separated headers to vary cached version by.</value>
  </data>
  <data name="OutputCachingStrategy_VaryByHeaders.Text" xml:space="preserve">
    <value>Custom Vary By Headers</value>
  </data>
  <data name="OutputCachingStrategy_VaryByStar.Help" xml:space="preserve">
    <value>Activates the "*" VaryByParam wildcard, which accounts for all parameters. </value>
  </data>
  <data name="OutputCachingStrategy_VaryByStar.Text" xml:space="preserve">
    <value>Vary by All Params</value>
  </data>
  <data name="OutputCachingStrategy_VaryByUserAgent.Help" xml:space="preserve">
    <value>Cached versions Vary By the corresponding "User-Agent" Header</value>
  </data>
  <data name="OutputCachingStrategy_VaryByUserAgent.Text" xml:space="preserve">
    <value>Vary By User Agent</value>
  </data>
  <data name="OutputCachingStrategy_VaryByUserCharSet.Help" xml:space="preserve">
    <value>Cached versions Vary By the corresponding "Accept-Charset" Header</value>
  </data>
  <data name="OutputCachingStrategy_VaryByUserCharSet.Text" xml:space="preserve">
    <value>Vary by User Char Set</value>
  </data>
  <data name="OutputCachingStrategy_VaryByUserLanguage.Help" xml:space="preserve">
    <value>Vary by the corresponding "Accept-Language" Header</value>
  </data>
  <data name="OutputCachingStrategy_VaryByUserLanguage.Text" xml:space="preserve">
    <value>Vary by User Language</value>
  </data>
  <data name="OutputCachingStrategy_Verbs.Help" xml:space="preserve">
    <value>Enter a comma separated list of http verbs for http requests considered for caching</value>
  </data>
  <data name="OutputCachingStrategy_Verbs.Text" xml:space="preserve">
    <value>Http Verbs</value>
  </data>
  <data name="PagePreInit.Text" xml:space="preserve">
    <value>Page Pre Init</value>
  </data>
  <data name="RuleEngineSettings`1_Action.Header" xml:space="preserve">
    <value>Action Providers</value>
  </data>
  <data name="RuleEngineSettings`1_Condition.Header" xml:space="preserve">
    <value>Condition Providers</value>
  </data>
  <data name="RuleEngineSettings`1_LoggingLevel.Help" xml:space="preserve">
    <value>You can generate DNN event logs of type DebugInfo, which must be activated in the Event Viewer Module settings first. There are 3 levels of logging. &lt;ul&gt;&lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt; means just the start and end events of the agent together with a dump if applicable&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt; means all engine steps or state changes are logged&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Detailed&lt;/strong&gt; means all individual condition and actions are logged.&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
  <data name="RuleEngineSettings`1_LoggingLevel.Text" xml:space="preserve">
    <value>Log Level</value>
  </data>
  <data name="Steps.Text" xml:space="preserve">
    <value>Steps</value>
  </data>
  <data name="StringFilterProvider`1_AdditionalTokens.Help" xml:space="preserve">
    <value>Enter additional static tokens, tokens providers, or conditional tokens.</value>
  </data>
  <data name="StringFilterProvider`1_AdditionalTokens.Text" xml:space="preserve">
    <value>Additionarl Tokens</value>
  </data>
  <data name="StringFilterProvider`1_UseAdditionalTokens.Help" xml:space="preserve">
    <value>By Default, the AdvancedTokenReplace instance is provided by the context object and the context variables are available as dictionary with prefix Item</value>
  </data>
  <data name="StringFilterProvider`1_UseAdditionalTokens.Text" xml:space="preserve">
    <value>Use Additional Tokens</value>
  </data>
  <data name="TokenReplace.Text" xml:space="preserve">
    <value>Token Replace</value>
  </data>
  <data name="TransformStream.Text" xml:space="preserve">
    <value>Transform Stream</value>
  </data>
  <data name="TransformString.Text" xml:space="preserve">
    <value>Transform String</value>
  </data>
  <data name="TransformWrite.Text" xml:space="preserve">
    <value>Transform Write</value>
  </data>
  <data name="TransformWriteString.Text" xml:space="preserve">
    <value>Transform Write String</value>
  </data>
  <data name="Compress.Text" xml:space="preserve">
    <value>Compress</value>
  </data>
  <data name="Compressed.Text" xml:space="preserve">
    <value>Compressed</value>
  </data>
  <data name="ConditionProviderSettings`1_AddPreConditionActions.Help" xml:space="preserve">
    <value>You can add a series of actions to be run before the condition is evaluated. You can also skip the evaluation and return a specific match value when the actions fail.</value>
  </data>
  <data name="ConditionProviderSettings`1_AddPreConditionActions.Text" xml:space="preserve">
    <value>Add Preprocessing actions</value>
  </data>
  <data name="ConditionProviderSettings`1_PreConditionActions.Header" xml:space="preserve">
    <value>Preprocessing </value>
  </data>
  <data name="ConditionProviderSettings`1_PreConditionActions.Help" xml:space="preserve">
    <value>Those actions are to be run before the condition is evaluated (be careful with step event in rule settings). </value>
  </data>
  <data name="ConditionProviderSettings`1_PreConditionActions.Text" xml:space="preserve">
    <value>Preprocessing Actions</value>
  </data>
  <data name="ConditionProviderSettings`1_StopActions.Help" xml:space="preserve">
    <value>Check to prevent the actual condition evaluation when the action returns a failure flag</value>
  </data>
  <data name="ConditionProviderSettings`1_StopActions.Text" xml:space="preserve">
    <value>Skip Match if fails</value>
  </data>
  <data name="ConditionProviderSettings`1_StopMatches.Help" xml:space="preserve">
    <value>By default, if the preprocessing action fails, the condition evaluates to false. Check to have the condition match when the actions fail.</value>
  </data>
  <data name="ConditionProviderSettings`1_StopMatches.Text" xml:space="preserve">
    <value>Stop Matches</value>
  </data>
  <data name="Decompress.Text" xml:space="preserve">
    <value>Decompress</value>
  </data>
  <data name="Decrypt.Text" xml:space="preserve">
    <value>Decrypt</value>
  </data>
  <data name="Deflate.Text" xml:space="preserve">
    <value>Deflate</value>
  </data>
  <data name="DocumentNavigable.Text" xml:space="preserve">
    <value>Document as IXPathNavigable</value>
  </data>
  <data name="DocumentString.Text" xml:space="preserve">
    <value>Document as a String</value>
  </data>
  <data name="Encrypt.Text" xml:space="preserve">
    <value>Encrypt</value>
  </data>
  <data name="Encrypted.Text" xml:space="preserve">
    <value>Encrypted</value>
  </data>
  <data name="EncryptionInfo_PrivateKeys.Header" xml:space="preserve">
    <value>Private Keys</value>
  </data>
  <data name="EncryptionInfo_PublicKeys.Header" xml:space="preserve">
    <value>Public Key</value>
  </data>
  <data name="ExpressionFilterInfo_AdditionalFilters.Header" xml:space="preserve">
    <value>Additional Filters</value>
  </data>
  <data name="ExpressionFilterInfo_Advanced.Header" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="ExpressionFilterInfo_ApplyFormat.Help" xml:space="preserve">
    <value>You can choose to wrap the value in a template pattern as format</value>
  </data>
  <data name="ExpressionFilterInfo_ApplyFormat.Text" xml:space="preserve">
    <value>Apply Format</value>
  </data>
  <data name="ExpressionFilterInfo_Base64Convert.Help" xml:space="preserve">
    <value>You can convert the input string in and from Base 64, givent a target Encoding</value>
  </data>
  <data name="ExpressionFilterInfo_Base64Convert.Text" xml:space="preserve">
    <value>Base 64 conversions</value>
  </data>
  <data name="ExpressionFilterInfo_Base64Salt.Help" xml:space="preserve">
    <value>Note that normally, you should be storing a custom salt for each encryption operation. Here we use a common salt instead.</value>
  </data>
  <data name="ExpressionFilterInfo_Base64Salt.Text" xml:space="preserve">
    <value>Custom Base 64 Salt</value>
  </data>
  <data name="ExpressionFilterInfo_CaseChange.Help" xml:space="preserve">
    <value>Use one of the selceted option to apply a global change to the case</value>
  </data>
  <data name="ExpressionFilterInfo_CaseChange.Text" xml:space="preserve">
    <value>Case Change</value>
  </data>
  <data name="ExpressionFilterInfo_CompressDirection.Help" xml:space="preserve">
    <value>Choose to compress or decompress the input string with the selected compression method. the result byte array is then converted to a base 64 string.</value>
  </data>
  <data name="ExpressionFilterInfo_CompressDirection.Text" xml:space="preserve">
    <value>Compression Direction</value>
  </data>
  <data name="ExpressionFilterInfo_CompressMethod.Help" xml:space="preserve">
    <value>The standard Gzip and Deflate compression streams are available.</value>
  </data>
  <data name="ExpressionFilterInfo_CompressMethod.Text" xml:space="preserve">
    <value>Compression Method</value>
  </data>
  <data name="ExpressionFilterInfo_CryptoDirection.Help" xml:space="preserve">
    <value>Choose to encrypt or decrypt the string content. The result is then converted to base 64. Note that you'll need to copy the keys and salt for both operations to match. </value>
  </data>
  <data name="ExpressionFilterInfo_CryptoDirection.Text" xml:space="preserve">
    <value>Encryption Direction</value>
  </data>
  <data name="ExpressionFilterInfo_Encryption.Help" xml:space="preserve">
    <value>The following settings control the encryption operation. You can choose to seal the keys to prevent their access once the configuration is done. You should do that only after you saved a copy of them.</value>
  </data>
  <data name="ExpressionFilterInfo_Encryption.Text" xml:space="preserve">
    <value>Encryption Settings</value>
  </data>
  <data name="ExpressionFilterInfo_FormatPattern.Help" xml:space="preserve">
    <value>This is the pattern template of the wrapping. The {0} symbol will be replaced by the source string.</value>
  </data>
  <data name="ExpressionFilterInfo_FormatPattern.Text" xml:space="preserve">
    <value>Format Pattern</value>
  </data>
  <data name="ExpressionFilterInfo_GlobalFilter.Header" xml:space="preserve">
    <value>Global Filter</value>
  </data>
  <data name="ExpressionFilterInfo_PostHtmlEncodeMethod.Help" xml:space="preserve">
    <value>There are several ways to html/xml encode a string with different sets of html name or number entities emitted.</value>
  </data>
  <data name="ExpressionFilterInfo_PostHtmlEncodeMethod.Text" xml:space="preserve">
    <value>Post Html Encode Method</value>
  </data>
  <data name="ExpressionFilterInfo_PreHtmlEncodeMethod.Help" xml:space="preserve">
    <value>There are several ways to html/xml encode a string with different sets of html name or number entities emitted.</value>
  </data>
  <data name="ExpressionFilterInfo_PreHtmlEncodeMethod.Text" xml:space="preserve">
    <value>Pre Html Encode Method</value>
  </data>
  <data name="ExpressionFilterInfo_TargetEncoding.Help" xml:space="preserve">
    <value>Select the target encoding to convert the input string from / to base 64 encoding</value>
  </data>
  <data name="ExpressionFilterInfo_TargetEncoding.Text" xml:space="preserve">
    <value>Target Encoding</value>
  </data>
  <data name="ExpressionFilterInfo_Transformations.Header" xml:space="preserve">
    <value>Transformations</value>
  </data>
  <data name="ExpressionFilterInfo_UseCompression.Help" xml:space="preserve">
    <value>You can compress the string using Deflate or GZip. The compressed byte array is then converted to a base64 string</value>
  </data>
  <data name="ExpressionFilterInfo_UseCompression.Text" xml:space="preserve">
    <value>Compress</value>
  </data>
  <data name="ExpressionFilterInfo_UseEncryption.Help" xml:space="preserve">
    <value>You can encrypt or decrypt the input string with a custom crypto transformation. Note that normally, you would want to store a distinct salt as a separate string for each encryption. Here, as single salt is generated and reused. The result is then converted to base 64, and decryption assumes a base 64 string. You'll need to copy the keys and salt for both operations to match.</value>
  </data>
  <data name="ExpressionFilterInfo_UseEncryption.Text" xml:space="preserve">
    <value>Use Encryption</value>
  </data>
  <data name="FromBase64.Text" xml:space="preserve">
    <value>From Base 64</value>
  </data>
  <data name="Gzip.Text" xml:space="preserve">
    <value>Gzip</value>
  </data>
  <data name="NumberEntities.Text" xml:space="preserve">
    <value>Number Entities</value>
  </data>
  <data name="RedirectAction`1_AdditionalQuery.Help" xml:space="preserve">
    <value>Enter a set of instance or dynamic querystring paramters to be evaluated and added to the target url at runtime.</value>
  </data>
  <data name="RedirectAction`1_AdditionalQuery.Text" xml:space="preserve">
    <value>Additional Querystring parameters</value>
  </data>
  <data name="RedirectAction`1_CurrentRequestUrl.Help" xml:space="preserve">
    <value>Check to target the current request url, e.g. with additional paramters.</value>
  </data>
  <data name="RedirectAction`1_CurrentRequestUrl.Text" xml:space="preserve">
    <value>Current Request Url</value>
  </data>
  <data name="RedirectAction`1_EndResponse.Help" xml:space="preserve">
    <value>Check to end the response immediately after the redirection. Note that exceptions might be thrown then.</value>
  </data>
  <data name="RedirectAction`1_EndResponse.Text" xml:space="preserve">
    <value>End Response</value>
  </data>
  <data name="RedirectAction`1_RemovedQuery.Help" xml:space="preserve">
    <value>Enter a set of querystring parameter names, to be removed from the target url.</value>
  </data>
  <data name="RedirectAction`1_RemovedQuery.Text" xml:space="preserve">
    <value>Removed Query</value>
  </data>
  <data name="RedirectAction`1_Specifics.Header" xml:space="preserve">
    <value>Redirect</value>
  </data>
  <data name="RedirectAction`1_TargetUrl.Help" xml:space="preserve">
    <value>Enter or select a target url, or an expression for a url.</value>
  </data>
  <data name="RedirectAction`1_TargetUrl.Text" xml:space="preserve">
    <value>Target Url</value>
  </data>
  <data name="SecurityEscape.Text" xml:space="preserve">
    <value>Security Escape</value>
  </data>
  <data name="Selection.Text" xml:space="preserve">
    <value>Selection</value>
  </data>
  <data name="SelectionNodes.Text" xml:space="preserve">
    <value>Selected xpath results</value>
  </data>
  <data name="SelectionString.Text" xml:space="preserve">
    <value>Selected string values</value>
  </data>
  <data name="Signed.Text" xml:space="preserve">
    <value>Signed</value>
  </data>
  <data name="SimpleExpression`1_Expression.Header" xml:space="preserve">
    <value>Expression</value>
  </data>
  <data name="SimpleOrExpression`2_EditableExpression.Help" xml:space="preserve">
    <value>Enter an expression that evaluates to the desired type</value>
  </data>
  <data name="SimpleOrExpression`2_EditableExpression.Text" xml:space="preserve">
    <value>Expression</value>
  </data>
  <data name="ToBase64.Text" xml:space="preserve">
    <value>To Base 64</value>
  </data>
  <data name="ToLower.Text" xml:space="preserve">
    <value>To Lower</value>
  </data>
  <data name="ToLowerInvariant.Text" xml:space="preserve">
    <value>To Lower Invariant</value>
  </data>
  <data name="ToUpper.Text" xml:space="preserve">
    <value>To Upper</value>
  </data>
  <data name="ToUpperInvariant.Text" xml:space="preserve">
    <value>To Upper Invariant</value>
  </data>
  <data name="Trim.Text" xml:space="preserve">
    <value>Trim</value>
  </data>
  <data name="TrimEnd.Text" xml:space="preserve">
    <value>Trim End</value>
  </data>
  <data name="TrimStart.Text" xml:space="preserve">
    <value>Trim Start</value>
  </data>
  <data name="XPathInfo_ApplyFilter.Help" xml:space="preserve">
    <value>You can apply a string filter on the fly on result node values.</value>
  </data>
  <data name="XPathInfo_ApplyFilter.Text" xml:space="preserve">
    <value>Apply Filter</value>
  </data>
  <data name="XPathInfo_Filter.Header" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="XPathInfo_Filter.Help" xml:space="preserve">
    <value>Enter a string filter to be applied to the xpath results </value>
  </data>
  <data name="XPathInfo_Filter.Text" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="XPathInfo_OutputMode.Help" xml:space="preserve">
    <value>You can choose to return the selection result, or the document as a string or navigable, mostly after direct node updates with a string filter, when applicable.</value>
  </data>
  <data name="XPathInfo_OutputMode.Text" xml:space="preserve">
    <value>Output Mode</value>
  </data>
  <data name="XPathInfo_RunSimulation.Text" xml:space="preserve">
    <value>Run Simulation</value>
  </data>
  <data name="XPathInfo_SelectExpression.Required" xml:space="preserve">
    <value>Select Expression is mandatory ("." references current node)</value>
  </data>
  <data name="XPathInfo_SelectMode.Help" xml:space="preserve">
    <value>When the selection is returned, you can choose to return string values or navigator nodes.</value>
  </data>
  <data name="XPathInfo_SelectMode.Text" xml:space="preserve">
    <value>Select Mode</value>
  </data>
  <data name="XPathInfo_UpdateNodes.Help" xml:space="preserve">
    <value>Check to update selected nodes with values processed by the applied filter.</value>
  </data>
  <data name="XPathInfo_UpdateNodes.Text" xml:space="preserve">
    <value>Updates Nodes</value>
  </data>
  <data name="ControlAdapterSettings_GlobalParameters.Help" xml:space="preserve">
    <value>Global Parameters are available to each dynamic handler and evaluated prior to dedicated handler parameters.</value>
  </data>
  <data name="ControlAdapterSettings_GlobalParameters.Text" xml:space="preserve">
    <value>Global Parameters</value>
  </data>
  <data name="ActionProviderSettings`1_DisableLog.Help" xml:space="preserve">
    <value>If logging is enabled , you can opt that specific action out from the logging sequence by checking that checkbox.</value>
  </data>
  <data name="ActionProviderSettings`1_DisableLog.Text" xml:space="preserve">
    <value>Disable Log</value>
  </data>
  <data name="ActionProviderSettings`1_LogDumpSettings.Help" xml:space="preserve">
    <value>Together with timing and performance properties saved in the event log, you can generate a dump of context variables, or comma separated expressions (e.g. "VarName, VarName.PropName, ExpName =Exp(Vars), etc."). A dictironay of String, Object is generated, and each value is serialized for logging.</value>
  </data>
  <data name="ActionProviderSettings`1_LogDumpSettings.Text" xml:space="preserve">
    <value>Log Dump Settings</value>
  </data>
  <data name="ActionProviderSettings`1_LoggingLevel.Help" xml:space="preserve">
    <value>Enter here the minimum level to include this action, or the level above which this action should be logged. The agent logging level can then be specified globally in its technical settings.</value>
  </data>
  <data name="ActionProviderSettings`1_LoggingLevel.Text" xml:space="preserve">
    <value>Minimum Logging Level</value>
  </data>
  <data name="ConditionProviderSettings`1_Condition.Header" xml:space="preserve">
    <value>Condition</value>
  </data>
  <data name="ConditionProviderSettings`1_LogDumpSettings.Help" xml:space="preserve">
    <value>Together with timing and performance properties saved in the event log, you can generate a dump of context variables, or comma separated expressions (e.g. "VarName, VarName.PropName, ExpName =Exp(Vars), etc."). A dictironay of String, Object is generated, and each value is serialized for logging.</value>
  </data>
  <data name="ConditionProviderSettings`1_LogDumpSettings.Text" xml:space="preserve">
    <value>Log Dump Settings</value>
  </data>
  <data name="ConditionProviderSettings`1_LoggingLevel.Help" xml:space="preserve">
    <value>Enter here the minimum level to include this condition, or the level above which this action should be logged. The agent logging level can then be specified globally in its technical settings.</value>
  </data>
  <data name="ConditionProviderSettings`1_LoggingLevel.Text" xml:space="preserve">
    <value>Minimum Logging Level</value>
  </data>
  <data name="ConditionProviderSettings`1_TechnicalSettings.Header" xml:space="preserve">
    <value>Technical Settings</value>
  </data>
  <data name="DumpSettings_DefaultValue.Help" xml:space="preserve">
    <value>Enter the default value for null entries or exceptions caught during evaluation, as an expression for an Object (default is an empty String)</value>
  </data>
  <data name="DumpSettings_DefaultValue.Text" xml:space="preserve">
    <value>Default Value</value>
  </data>
  <data name="DumpSettings_DisplayAvailableVars.Text" xml:space="preserve">
    <value>Setup Expression Builder</value>
  </data>
  <data name="DumpSettings_DumpAllVars.Help" xml:space="preserve">
    <value>Check to serialize and log all variables stored within the context </value>
  </data>
  <data name="DumpSettings_DumpAllVars.Text" xml:space="preserve">
    <value>Dump All Variables</value>
  </data>
  <data name="DumpSettings_DumpVariables.Help" xml:space="preserve">
    <value>Enter a comma separated list of variables or named expressions (e.g. "VarName, VarName.PropName, ExpName =Exp(Vars), etc."). A dictironay of String, Object is generated, and each value is serialized for logging.</value>
  </data>
  <data name="DumpSettings_DumpVariables.Text" xml:space="preserve">
    <value>Dump Variables</value>
  </data>
  <data name="DumpSettings_EnableDump.Help" xml:space="preserve">
    <value>Check to enable generating dumps on log end.</value>
  </data>
  <data name="DumpSettings_EnableDump.Text" xml:space="preserve">
    <value>Enable Dump</value>
  </data>
  <data name="DumpSettings_ExpressionBuilder.Help" xml:space="preserve">
    <value>Use the following drop down lists to build your expression from the available variables, operators, and methods, then click the insert button to update your expression text area.</value>
  </data>
  <data name="DumpSettings_ExpressionBuilder.Text" xml:space="preserve">
    <value>Build your Expression step by step and insert the corresponding string</value>
  </data>
  <data name="DumpSettings_InsertSelectedVar.Text" xml:space="preserve">
    <value>Insert Built Expression</value>
  </data>
  <data name="DumpSettings_RemoveExpressionBuilder.Text" xml:space="preserve">
    <value>Remove Expression Builder</value>
  </data>
  <data name="DumpSettings_SkipNull.Help" xml:space="preserve">
    <value>Check to skip null entries keys in the result dictionary</value>
  </data>
  <data name="DumpSettings_SkipNull.Text" xml:space="preserve">
    <value>Skip Null</value>
  </data>
  <data name="LoopActionProvider`1_CounterEvalAfter.Help" xml:space="preserve">
    <value>Check to skip the evaluation on the first pass.</value>
  </data>
  <data name="LoopActionProvider`1_CounterEvalAfter.Text" xml:space="preserve">
    <value>Evaluate Second</value>
  </data>
  <data name="OutputAction`1_CaptureCount.Help" xml:space="preserve">
    <value>When adding items to an existing set, you can capture new items count into a named variable.</value>
  </data>
  <data name="OutputAction`1_CaptureCount.Text" xml:space="preserve">
    <value>Capture Count</value>
  </data>
  <data name="OutputAction`1_CountCaptureName.Help" xml:space="preserve">
    <value>This is the name of the variable to be inserted into the context to hold the new items count.</value>
  </data>
  <data name="OutputAction`1_CountCaptureName.Text" xml:space="preserve">
    <value>Count Variable Name</value>
  </data>
  <data name="RuleEngineSettings`1_ExceptionDumpSettings.Help" xml:space="preserve">
    <value>When Exceptions are caught, you can generate a dump of context variables, or comma separated expressions (e.g. "VarName, VarName.PropName, ExpName =Exp(Vars), etc."). A dictironay of String, Object is generated, and each value is serialized for logging.</value>
  </data>
  <data name="RuleEngineSettings`1_ExceptionDumpSettings.Text" xml:space="preserve">
    <value>Exception Dump Settings</value>
  </data>
  <data name="RuleEngineSettings`1_LogEndDumpSettings.Help" xml:space="preserve">
    <value>When logging is enabled, you can generate a dump of context variables, or comma separated expressions (e.g. "VarName, VarName.PropName, ExpName =Exp(Vars), etc."). A dictironay of String, Object is generated, and each value is serialized for logging.</value>
  </data>
  <data name="RuleEngineSettings`1_LogEndDumpSettings.Text" xml:space="preserve">
    <value>Log End Dump Settings</value>
  </data>
  <data name="SpreadSheetCommand`1_CheckForChanges.Help" xml:space="preserve">
    <value>If checked, the cell will be read for actual changes before an update is applied.</value>
  </data>
  <data name="SpreadSheetCommand`1_CheckForChanges.Text" xml:space="preserve">
    <value>Check for changes</value>
  </data>
  <data name="WorksheetEntryInfo`1_Spreadsheet.Header" xml:space="preserve">
    <value>Spreadsheet</value>
  </data>
  <data name="WorksheetEntryInfo`1_Worksheet.Header" xml:space="preserve">
    <value>Worksheet</value>
  </data>
  <data name="BotInfo`1_HistoryDumpSettings.Help" xml:space="preserve">
    <value>Together with timing and performance properties saved in the history, you can generate a dump of context variables, or comma separated expressions (e.g. "VarName, VarName.PropName, ExpName =Exp(Vars), etc."). A dictironay of String, Object is generated, and each value is serialized for saving.</value>
  </data>
  <data name="BotInfo`1_HistoryDumpSettings.Text" xml:space="preserve">
    <value>History Dump Settings</value>
  </data>
  <data name="CellCommands.Text" xml:space="preserve">
    <value>Cell Commands</value>
  </data>
  <data name="CellFeedInfo`1_Feed.Header" xml:space="preserve">
    <value>Feed</value>
  </data>
  <data name="CellFeedInfo`1_Worksheet.Header" xml:space="preserve">
    <value>Worksheet</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_Feed.Header" xml:space="preserve">
    <value>Data Feed</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_IncludeIndex.Help" xml:space="preserve">
    <value>In List mode, each row is turned into an individual dictionary of string, string with key the header name of the column and value the string value of each corresponding cell.  You can also choose the include the Index to this row's dictionary by providing the header name.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_IncludeIndex.Text" xml:space="preserve">
    <value>Include Index</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_IndexKey.Help" xml:space="preserve">
    <value>This is the key to insert the row's index into individual row's dictionary.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_IndexKey.Text" xml:space="preserve">
    <value>Index Key</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_KeyColumnHeaders.Help" xml:space="preserve">
    <value>Enter the headers, as found in the first row of the Google worksheet, of the columns to make up a single or composite key for insertion in the row's output dictionary.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_KeyColumnHeaders.Text" xml:space="preserve">
    <value>Key Columns</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_FeedExpression.Help" xml:space="preserve">
    <value>Enter an expression that resolves into a Google GData ListFeed or CellFeed object, as obtained for instance from a FeedInfo parameter Object.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_FeedExpression.Text" xml:space="preserve">
    <value>Feed Expression</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_FeedInfo.Help" xml:space="preserve">
    <value>Enter here the parameters to build a Google GData ListFeed or CellFeed, from a Worksheet Entry</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_FeedInfo.Text" xml:space="preserve">
    <value>Feed</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_ReturnDictionary.Help" xml:space="preserve">
    <value>By default, the output is a list of the dictionaries generated for each row. You can also choose to generate a dictionary of the same dictionaries instead, by specifying the headers of columns to make up the key for each row, </value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_ReturnDictionary.Text" xml:space="preserve">
    <value>Return Dictionary</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_SpreadSheetMode.Help" xml:space="preserve">
    <value>There are 2 modes, Cell based and List based. The former is more flexible, yet the latter is faster.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_SpreadSheetMode.Text" xml:space="preserve">
    <value>Spreadsheet Mode</value>
  </data>
  <data name="HtmlPageScrapInfo_BaseUrl.Help" xml:space="preserve">
    <value>This is the base part of the url for the pages to scrap, to be completed with pages parameters for paged results</value>
  </data>
  <data name="HtmlPageScrapInfo_BaseUrl.Text" xml:space="preserve">
    <value>Base Url</value>
  </data>
  <data name="HtmlPageScrapInfo_Custom.Header" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="HtmlPageScrapInfo_Custom.Help" xml:space="preserve">
    <value>Add custom named properties, to your scrap.</value>
  </data>
  <data name="HtmlPageScrapInfo_Custom.Text" xml:space="preserve">
    <value>Custom Properties</value>
  </data>
  <data name="HtmlPageScrapInfo_IncludeFirstPage.Help" xml:space="preserve">
    <value>Check to include the parameter on the first page, usually omitted.</value>
  </data>
  <data name="HtmlPageScrapInfo_IncludeFirstPage.Text" xml:space="preserve">
    <value>Include First Page</value>
  </data>
  <data name="HtmlPageScrapInfo_MaxNbPage.Help" xml:space="preserve">
    <value>Enter the maximum number of pages to request. 0 means no limit.</value>
  </data>
  <data name="HtmlPageScrapInfo_MaxNbPage.Text" xml:space="preserve">
    <value>Max Nb of Pages</value>
  </data>
  <data name="HtmlPageScrapInfo_QueryParameter.Help" xml:space="preserve">
    <value>Enter the parameter to add to the base url to request results pages</value>
  </data>
  <data name="HtmlPageScrapInfo_QueryParameter.Text" xml:space="preserve">
    <value>Page query string Parameter</value>
  </data>
  <data name="HtmlPageScrapInfo_Pager.Header" xml:space="preserve">
    <value>Pager</value>
  </data>
  <data name="HtmlPageScrapInfo_Scraping.Header" xml:space="preserve">
    <value>Scraping</value>
  </data>
  <data name="HtmlPageScrapInfo_Url.Header" xml:space="preserve">
    <value>Urls</value>
  </data>
  <data name="HtmlPageScrapInfo_UsePager.Help" xml:space="preserve">
    <value>Check to activate requesting a series of result pages with an http parameter.</value>
  </data>
  <data name="HtmlPageScrapInfo_UsePager.Text" xml:space="preserve">
    <value>Use Pager</value>
  </data>
  <data name="HtmlPageScrapInfo_XPath.Help" xml:space="preserve">
    <value>Scrap named fields from Xpath queries and sub-queries. The type of output depends on the Xpath settings.</value>
  </data>
  <data name="HtmlPageScrapInfo_XPath.Text" xml:space="preserve">
    <value>XPath Scraping</value>
  </data>
  <data name="HtmlPageScrapInfo_ZeroBasedIndex.Help" xml:space="preserve">
    <value>Check for a paging index starting with 0</value>
  </data>
  <data name="HtmlPageScrapInfo_ZeroBasedIndex.Text" xml:space="preserve">
    <value>Zero based Index</value>
  </data>
  <data name="ListCommands.Text" xml:space="preserve">
    <value>List Commands</value>
  </data>
  <data name="SpreadsheetFeedInfo`1_CaptureFeed.Help" xml:space="preserve">
    <value>You can choose to capture the generated list or cell feed to a local variable, to reuse that entity for subsequent queries.</value>
  </data>
  <data name="SpreadsheetFeedInfo`1_CaptureFeed.Text" xml:space="preserve">
    <value>Capture Feed</value>
  </data>
  <data name="SpreadsheetFeedInfo`1_CreateIfNull.Help" xml:space="preserve">
    <value>If the Worksheet expression evaluates to a null entry, you can create an new worhseet by providing creation parameters.</value>
  </data>
  <data name="SpreadsheetFeedInfo`1_CreateIfNull.Text" xml:space="preserve">
    <value>Create if Null</value>
  </data>
  <data name="SpreadsheetFeedInfo`1_Feed.Header" xml:space="preserve">
    <value>Feed</value>
  </data>
  <data name="SpreadsheetFeedInfo`1_FeedName.Help" xml:space="preserve">
    <value>Enter a name for a variable for the feed to be created and inserted into the action context.</value>
  </data>
  <data name="SpreadsheetFeedInfo`1_FeedName.Text" xml:space="preserve">
    <value>Feed Name</value>
  </data>
  <data name="SpreadsheetFeedInfo`1_UseExistingWorksheetEntry.Help" xml:space="preserve">
    <value>You can choose to reuse an Object of type WorksheetEntry that was previously created and captured. </value>
  </data>
  <data name="SpreadsheetFeedInfo`1_UseExistingWorksheetEntry.Text" xml:space="preserve">
    <value>Use Existing Worksheet Entry</value>
  </data>
  <data name="SpreadsheetFeedInfo`1_Worksheet.Header" xml:space="preserve">
    <value>Worksheet</value>
  </data>
  <data name="SpreadsheetFeedInfo`1_WorksheetEntryExpression.Help" xml:space="preserve">
    <value>Enter an expression, which resolves to an Object of type Google.GData.Spreadsheets.WorksheetEntry</value>
  </data>
  <data name="SpreadsheetFeedInfo`1_WorksheetEntryExpression.Text" xml:space="preserve">
    <value>WorksheetEntry Expression</value>
  </data>
  <data name="SpreadsheetFeedInfo`1_WorksheetInfo.Help" xml:space="preserve">
    <value>Enter the information to identify the Google worksheet to generate a feed from. You may have to generate an authentication token to connect to the service.</value>
  </data>
  <data name="SpreadsheetFeedInfo`1_WorksheetInfo.Text" xml:space="preserve">
    <value>Worksheet Settings</value>
  </data>
  <data name="ClearItems.Command" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="DeleteEntry.Text" xml:space="preserve">
    <value>Delete Entry</value>
  </data>
  <data name="ExpressionFilterInfo_RunSimulation.Text" xml:space="preserve">
    <value>Run Simulation</value>
  </data>
  <data name="ExpressionFilterInfo_Simulation.Header" xml:space="preserve">
    <value>Simulation</value>
  </data>
  <data name="ExpressionFilterInfo_Simulation.Help" xml:space="preserve">
    <value>Check to bring a simulator to check your settings.</value>
  </data>
  <data name="ExpressionFilterInfo_Simulation.Text" xml:space="preserve">
    <value>Enable Simulation</value>
  </data>
  <data name="ExpressionFilterInfo_SimulationData.Help" xml:space="preserve">
    <value>Enter an input string to be processed and click the action button</value>
  </data>
  <data name="ExpressionFilterInfo_SimulationData.Text" xml:space="preserve">
    <value>Input String</value>
  </data>
  <data name="ExpressionFilterInfo_SimulationResult.Help" xml:space="preserve">
    <value>This displays the result of the input string processing after the action button is clicked</value>
  </data>
  <data name="ExpressionFilterInfo_SimulationResult.Text" xml:space="preserve">
    <value>Simulation Result</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_CaptureEntries.Help" xml:space="preserve">
    <value>The action returns dictionaries parsed from the ListEntry objects. You can also choose to return the ListEntry objects as a distinct Variable. The collection format follows the same format(list or dictionary according to the following parameter)</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_CaptureEntries.Text" xml:space="preserve">
    <value>Capture Entries</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_EntriesVarName.Help" xml:space="preserve">
    <value>This is the name for the variable that will hold the collection of ListEntries. The following parameter determines if the variable is made of a list of ListEntry Object or a dictionary of string, ListEntry.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_EntriesVarName.Text" xml:space="preserve">
    <value>Entries Variable Name</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_InputDictionaryExpression.Help" xml:space="preserve">
    <value>Enter an expression that resolves to a dictionary of string, string, with values for each column with headers corresponding to the dictionary's keys.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_InputDictionaryExpression.Text" xml:space="preserve">
    <value>Input Dictionary Expression</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_ListEntryExpression.Help" xml:space="preserve">
    <value>Enter an expression that resolves to the list entry to update/delete.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_ListEntryExpression.Text" xml:space="preserve">
    <value>Target ListEntry Expression</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_ListMode.Help" xml:space="preserve">
    <value>Those are the different actions you can perform on a spreadsheet in List mode.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_ListMode.Text" xml:space="preserve">
    <value>List Mode</value>
  </data>
  <data name="HtmlPageScrapInfo_Detail.Header" xml:space="preserve">
    <value>Detail</value>
  </data>
  <data name="HtmlScrapDetailRequestInfo_DetailUrlColumn.Help" xml:space="preserve">
    <value>Enter the key that holds the detail url in the main results scraping xpath settings.</value>
  </data>
  <data name="HtmlScrapDetailRequestInfo_DetailUrlColumn.Text" xml:space="preserve">
    <value>Detail Url Key</value>
  </data>
  <data name="HtmlRequestInfo_XPath.Help" xml:space="preserve">
    <value>Scrap named fields from Xpath queries and sub-queries. The type of output depends on the Xpath settings.</value>
  </data>
  <data name="HtmlRequestInfo_XPath.Text" xml:space="preserve">
    <value>Scraping Xpath</value>
  </data>
  <data name="HtmlPageScrapInfo_PageSize.Help" xml:space="preserve">
    <value>Enter the number of items per page to shift the result index accordingly.</value>
  </data>
  <data name="HtmlPageScrapInfo_PageSize.Text" xml:space="preserve">
    <value>Page Size</value>
  </data>
  <data name="HtmlPageScrapInfo_QueryType.Help" xml:space="preserve">
    <value>Paging can be supported through adding page number or result indexes</value>
  </data>
  <data name="HtmlPageScrapInfo_QueryType.Text" xml:space="preserve">
    <value>Pager Query Type</value>
  </data>
  <data name="HtmlPageScrapInfo_ScrapDetail.Help" xml:space="preserve">
    <value>Check to browse result details from the harvested url</value>
  </data>
  <data name="HtmlPageScrapInfo_ScrapDetail.Text" xml:space="preserve">
    <value>Scrap Detail</value>
  </data>
  <data name="InsertEntry.Text" xml:space="preserve">
    <value>Insert Entry</value>
  </data>
  <data name="LoopActionProvider`1_ConditionalPass.Help" xml:space="preserve">
    <value>Check to evaluate a condition to be matched before each loop pass, or the item is skipped.</value>
  </data>
  <data name="LoopActionProvider`1_ConditionalPass.Text" xml:space="preserve">
    <value>Conditional Pass</value>
  </data>
  <data name="LoopActionProvider`1_PassCondition.Help" xml:space="preserve">
    <value>Define a condition to be matched before each loop pass</value>
  </data>
  <data name="LoopActionProvider`1_PassCondition.Text" xml:space="preserve">
    <value>Pass Condition</value>
  </data>
  <data name="PageNb.Text" xml:space="preserve">
    <value>Page Number</value>
  </data>
  <data name="ReadList.Text" xml:space="preserve">
    <value>Read List</value>
  </data>
  <data name="ResultIndex.Text" xml:space="preserve">
    <value>Result Index</value>
  </data>
  <data name="UpdateEntry.Text" xml:space="preserve">
    <value>Update Entry</value>
  </data>
  <data name="DictionaryEntry_Key.Help" xml:space="preserve">
    <value>Enter a new key value that is not already in use in the dictionary</value>
  </data>
  <data name="DictionaryEntry_Key.Text" xml:space="preserve">
    <value>New Key</value>
  </data>
  <data name="HtmlPageScrapInfo_ClientMode.Help" xml:space="preserve">
    <value>There are 2 modes: a web client will perform an http request and return the html response; a web browser is heavier and will wait for the page to load and run scripts before returning the resulting Dom Html document. Use a web browser only if loading the page is required.</value>
  </data>
  <data name="HtmlPageScrapInfo_ClientMode.Text" xml:space="preserve">
    <value>Client Mode</value>
  </data>
  <data name="HtmlRequestInfo_ClientMode.Help" xml:space="preserve">
    <value>There are 2 modes: a web client will perform an http request and return the html response; a web browser is heavier and will wait for the page to load and run scripts before returning the resulting Dom Html document. Use a web browser only if loading the page is required.</value>
  </data>
  <data name="HtmlRequestInfo_ClientMode.Text" xml:space="preserve">
    <value>Client Mode</value>
  </data>
  <data name="MTA.Text" xml:space="preserve">
    <value>Multithreaded apartment</value>
  </data>
  <data name="STA.Text" xml:space="preserve">
    <value>Single-threaded apartment</value>
  </data>
  <data name="TaskQueueInfo_ApartmentState.Help" xml:space="preserve">
    <value>Select the apartment state queue threads should be started with. Single-threaded Apartment is required for using a web browser.</value>
  </data>
  <data name="TaskQueueInfo_ApartmentState.Text" xml:space="preserve">
    <value>Apartment State</value>
  </data>
  <data name="Browser.Text" xml:space="preserve">
    <value>Web Browser</value>
  </data>
  <data name="WebClient.Text" xml:space="preserve">
    <value>Web Client</value>
  </data>
  <data name="WebRequestInfo`1_ClientMode.Help" xml:space="preserve">
    <value>There are 2 modes: a web client will perform an http request and return the html response; a web browser is heavier and will wait for the page to load and run scripts before returning the resulting Dom Html document. Use a web browser only if loading the page is required. You can also enter an dynamic expression to define the mode from an existing variable.</value>
  </data>
  <data name="WebRequestInfo`1_ClientMode.Text" xml:space="preserve">
    <value>Client Mode</value>
  </data>
  <data name="WebRequestInfo`1_WebBrowserVarName.Help" xml:space="preserve">
    <value>Choose a name for shared web browser if applicable.</value>
  </data>
  <data name="WebRequestInfo`1_WebBrowserVarName.Text" xml:space="preserve">
    <value>Web Browser Variable Name</value>
  </data>
  <data name="WebRequestInfo`1_WebClient.Header" xml:space="preserve">
    <value>Web Client</value>
  </data>
  <data name="XPathInfo_BrowsableSimulationResult.Help" xml:space="preserve">
    <value>This is the structured result from your XPath query and sub queries.</value>
  </data>
  <data name="XPathInfo_BrowsableSimulationResult.Text" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="XPathInfo_ResultAsXml.Help" xml:space="preserve">
    <value>By default the result object is displayed as a structured subform, but you can also serialize the result to Xml for offline exploration.</value>
  </data>
  <data name="XPathInfo_ResultAsXml.Text" xml:space="preserve">
    <value>Display Result as XML</value>
  </data>
  <data name="CloseClient.Text" xml:space="preserve">
    <value>Close Client</value>
  </data>
  <data name="DoRequest.Text" xml:space="preserve">
    <value>Send Request</value>
  </data>
  <data name="HtmlPageScrapInfo_FrameId.Help" xml:space="preserve">
    <value>You can optionally provide the id of an html frame, the tags of which enclose the document to capture.</value>
  </data>
  <data name="HtmlPageScrapInfo_FrameId.Text" xml:space="preserve">
    <value>Frame Id</value>
  </data>
  <data name="HtmlPageScrapInfo_ScrapDetails.Help" xml:space="preserve">
    <value>You can add one or several detail scraping parameters, with additional fields selected from detail pages.</value>
  </data>
  <data name="HtmlPageScrapInfo_ScrapDetails.Text" xml:space="preserve">
    <value>Scrap Details</value>
  </data>
  <data name="HtmlRequestInfo_FrameId.Help" xml:space="preserve">
    <value>You can optionally provide the id of an html frame, the tags of which enclose the document to capture.</value>
  </data>
  <data name="HtmlRequestInfo_FrameId.Text" xml:space="preserve">
    <value>Frame Id</value>
  </data>
  <data name="LoopActionProvider`1_LastFlagName.Help" xml:space="preserve">
    <value>This is the name of the variable that will be inserted to signal the last pass. It will be removed afeter the loop actions are finished.</value>
  </data>
  <data name="LoopActionProvider`1_LastFlagName.Text" xml:space="preserve">
    <value>Last Item Flag Name</value>
  </data>
  <data name="LoopActionProvider`1_SignalLast.Help" xml:space="preserve">
    <value>You can add a flag to the context variables to signal that this is the last pass of the loop. The collection should resolve to a type that implements ICollection to use that feature.</value>
  </data>
  <data name="LoopActionProvider`1_SignalLast.Text" xml:space="preserve">
    <value>Signal Last item</value>
  </data>
  <data name="StringTransformInfo_RegexOptions.Help" xml:space="preserve">
    <value>Define the regex options to be used upon creation by checking the corresponding checkboxes</value>
  </data>
  <data name="StringTransformInfo_RegexOptions.Text" xml:space="preserve">
    <value>Regex Options</value>
  </data>
  <data name="WebRequestInfo`1_CaptureFrame.Help" xml:space="preserve">
    <value>You can optionally provide the id of an html frame, the tags of which enclose the document to capture.</value>
  </data>
  <data name="WebRequestInfo`1_CaptureFrame.Text" xml:space="preserve">
    <value>Capture Frame</value>
  </data>
  <data name="WebRequestInfo`1_Client.Header" xml:space="preserve">
    <value>Client</value>
  </data>
  <data name="WebRequestInfo`1_FrameId.Help" xml:space="preserve">
    <value>This is the id of an html frame, the tags of which enclose the document to capture.</value>
  </data>
  <data name="WebRequestInfo`1_FrameId.Text" xml:space="preserve">
    <value>Frame Id</value>
  </data>
  <data name="WebRequestInfo`1_WebBrowser.Header" xml:space="preserve">
    <value>Web Browser</value>
  </data>
  <data name="WebRequestInfo`1_WebMode.Help" xml:space="preserve">
    <value>There are 2 modes, you can either perform a parametrized http request with a client, or close an existing client.</value>
  </data>
  <data name="WebRequestInfo`1_WebMode.Text" xml:space="preserve">
    <value>Mode</value>
  </data>
  <data name="XPathInfo_EvaluateExpression.Help" xml:space="preserve">
    <value>Check if your Xpath Expression is to be evaluated rather than selected (with functions)</value>
  </data>
  <data name="XPathInfo_EvaluateExpression.Text" xml:space="preserve">
    <value>Evaluate Expression</value>
  </data>
  <data name="ActionProvider`1_WaitSynchronisationHandle.Help" xml:space="preserve">
    <value>You can optionally wait for an existing handle from previous asynchronous actions to be signaled by all threads before the action is run. The action serves as a synchronization rendez-vous for concurrent previous actions. Enter the name of the variable the handle was created to.</value>
  </data>
  <data name="ActionProvider`1_WaitSynchronisationHandle.Text" xml:space="preserve">
    <value>Wait Synchronisation handles</value>
  </data>
  <data name="AsyncEnabledActionProvider`1_SynchronisationHandle.Help" xml:space="preserve">
    <value>You can optionally create a synchronisation handle as a variable added to the action context. Enter the variable name as a string or an expression of a string. Note that the synchronisation handle is a counter that can be incremented several times, and needs all registered asynchronous threads to signal their end before a blocking action is resumed.</value>
  </data>
  <data name="AsyncEnabledActionProvider`1_SynchronisationHandle.Text" xml:space="preserve">
    <value>Add Synchronisation handle</value>
  </data>
  <data name="EnabledFeature`1_Enabled.Help" xml:space="preserve">
    <value>Check to enable that feature and enter the corresponding parameters. </value>
  </data>
  <data name="EnabledFeature`1_Enabled.Text" xml:space="preserve">
    <value>Enable</value>
  </data>
  <data name="EnabledFeature`1_Entity.Help" xml:space="preserve">
    <value>This is the value for the corresponding property. you can enter a simple value or an expression that resolves to the target type.</value>
  </data>
  <data name="EnabledFeature`1_Entity.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_ExcludedColumns.Help" xml:space="preserve">
    <value>Enter columns to exclude from the comparison (e.g. Update Date column)</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_ExcludedColumns.Text" xml:space="preserve">
    <value>Columns Ignored</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_UpdateIfChanged.Help" xml:space="preserve">
    <value>Check to automatically compare the existing value before the update command is issued.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_UpdateIfChanged.Text" xml:space="preserve">
    <value>Update if Changed</value>
  </data>
  <data name="KeeperAction`1_TimeLimit.Help" xml:space="preserve">
    <value>You can introduce a time limit to your sequence of action. When the limit is reached, the remaning actions are skiped</value>
  </data>
  <data name="KeeperAction`1_TimeLimit.Text" xml:space="preserve">
    <value>Time Limit</value>
  </data>
  <data name="ToCamel.Text" xml:space="preserve">
    <value>To Camel Case</value>
  </data>
  <data name="ToPascal.Text" xml:space="preserve">
    <value>To Pascal Case</value>
  </data>
  <data name="ToTitle.Text" xml:space="preserve">
    <value>To Title Case</value>
  </data>
  <data name="UserBotInfo_Advanced.Header" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="WebRequestInfo`1_LogResponse.Help" xml:space="preserve">
    <value>You can include the response of your http request as a additional parameter to the logged event.</value>
  </data>
  <data name="WebRequestInfo`1_LogResponse.Text" xml:space="preserve">
    <value>Log Response</value>
  </data>
  <data name="BotInfoEvent_VariablesDump.Help" xml:space="preserve">
    <value>Here are a set of selected variables dumped after the execution of your bot.</value>
  </data>
  <data name="BotInfoEvent_VariablesDump.Text" xml:space="preserve">
    <value>Variables</value>
  </data>
  <data name="BotInfo`1_AddCustomSchedule.Help" xml:space="preserve">
    <value>You can provide an additional restrictive schedule over the base schedule, though an expression, e.g. a user parameter.</value>
  </data>
  <data name="BotInfo`1_AddCustomSchedule.Text" xml:space="preserve">
    <value>Add Custom Schedule</value>
  </data>
  <data name="BotInfo`1_CustomSchedule.Help" xml:space="preserve">
    <value>Enter an expression that resolves to a schedule to account for.</value>
  </data>
  <data name="BotInfo`1_CustomSchedule.Text" xml:space="preserve">
    <value>Custom Schedule Expression</value>
  </data>
  <data name="Command.Text" xml:space="preserve">
    <value>Command</value>
  </data>
  <data name="HtmlPageScrapInfo_CustomVars.Help" xml:space="preserve">
    <value>Create custom typed variables to be used within the bot logic</value>
  </data>
  <data name="HtmlPageScrapInfo_CustomVars.Text" xml:space="preserve">
    <value>Custom Variables</value>
  </data>
  <data name="RunPython`1_Python.Header" xml:space="preserve">
    <value>Script</value>
  </data>
  <data name="RunPython`1_Python.Help" xml:space="preserve">
    <value>Here you can configure your Python script or define a dynamic expression that resolves to the corresponding type. Your Python script can be a file or a string</value>
  </data>
  <data name="RunPython`1_Python.Text" xml:space="preserve">
    <value>Python script</value>
  </data>
  <data name="ScheduleInfo_Config.Header" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="ScheduleInfo_Test.Text" xml:space="preserve">
    <value>Test</value>
  </data>
  <data name="ScheduleInfo_TestDate.Help" xml:space="preserve">
    <value>Enter a date and time for a fictious previous schedule to test computing the new target schedule.</value>
  </data>
  <data name="ScheduleInfo_TestDate.Text" xml:space="preserve">
    <value>Previous Schedule</value>
  </data>
  <data name="ScheduleInfo_TestResult.Help" xml:space="preserve">
    <value>This is the next computed schedule from now, accounting for the previous schedule entered</value>
  </data>
  <data name="ScheduleInfo_TestResult.Text" xml:space="preserve">
    <value>Computed Next Schedule</value>
  </data>
  <data name="ScheduleInfo_Tests.Header" xml:space="preserve">
    <value>Tests</value>
  </data>
  <data name="Script.Text" xml:space="preserve">
    <value>Script</value>
  </data>
  <data name="ScriptBase_Command.Help" xml:space="preserve">
    <value>Enter a single command to be executed</value>
  </data>
  <data name="ScriptBase_Command.Required" xml:space="preserve">
    <value>A non empty command is required</value>
  </data>
  <data name="ScriptBase_Command.Text" xml:space="preserve">
    <value>Command</value>
  </data>
  <data name="ScriptBase_File.Help" xml:space="preserve">
    <value>Select a file from a directory available to you</value>
  </data>
  <data name="ScriptBase_File.Text" xml:space="preserve">
    <value>Script File</value>
  </data>
  <data name="ScriptBase_Mode.Help" xml:space="preserve">
    <value>There are 3 modes to providing the input string, a online file, a script string or a command script.</value>
  </data>
  <data name="ScriptBase_Mode.Text" xml:space="preserve">
    <value>Input Mode</value>
  </data>
  <data name="ScriptBase_Output.Help" xml:space="preserve">
    <value>This is the output of the scripting engine.</value>
  </data>
  <data name="ScriptBase_Output.Text" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="ScriptBase_Refresh.Text" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="ScriptBase_Run.Text" xml:space="preserve">
    <value>Run</value>
  </data>
  <data name="ScriptBase_Script.Help" xml:space="preserve">
    <value>Copy / paste or type your script here. </value>
  </data>
  <data name="ScriptBase_Script.Required" xml:space="preserve">
    <value>A non empty string is required</value>
  </data>
  <data name="ScriptBase_Script.Text" xml:space="preserve">
    <value>Script</value>
  </data>
  <data name="ScriptFile.Text" xml:space="preserve">
    <value>Script File</value>
  </data>
  <data name="SubPathContainer_ReadOnlySubEntity.Help" xml:space="preserve">
    <value>Here is a subeditor generated for a child entity of the original main one. Use the extra dropdownlist and command button to broader back the scope.</value>
  </data>
  <data name="SubPathContainer_ReadOnlySubEntity.Text" xml:space="preserve">
    <value>Current Node</value>
  </data>
  <data name="UserBotDeleted.Message" xml:space="preserve">
    <value>Your User Bot was successfully deleted</value>
  </data>
  <data name="UserBotInfo_Run.Text" xml:space="preserve">
    <value>Run</value>
  </data>
  <data name="UserBotRunPlanned.Message" xml:space="preserve">
    <value>Your Bot was planned for immediate execution. It will be run as soon as your schedule configuration allows it.</value>
  </data>
  <data name="WebBotHistory_TotalDurationString.Help" xml:space="preserve">
    <value>This is the total time spent by your bot within successful runs.</value>
  </data>
  <data name="WebBotHistory_TotalDurationString.Text" xml:space="preserve">
    <value>Total Duration</value>
  </data>
  <data name="ActionProviderSettings`1_Debug.Header" xml:space="preserve">
    <value>Debug</value>
  </data>
  <data name="ActionProviderSettings`1_ExceptionActions.Help" xml:space="preserve">
    <value>You can define a specific sequence of actions to be run when an exception is caught.</value>
  </data>
  <data name="ActionProviderSettings`1_ExceptionActions.Text" xml:space="preserve">
    <value>Exceptions Triggered Actions</value>
  </data>
  <data name="ActionProviderSettings`1_Exceptions.Header" xml:space="preserve">
    <value>Exceptions</value>
  </data>
  <data name="ActionProvider`1_Synchronization.Header" xml:space="preserve">
    <value>Synchronization</value>
  </data>
  <data name="BotFarmInfo`1_RunningServers.Help" xml:space="preserve">
    <value>In case of a web farm, you can optionnally enter a comma separated list of server names, on which the bot farm will exclusively be run. Each bot can then be individually associated with more specific server selections.</value>
  </data>
  <data name="BotFarmInfo`1_RunningServers.Text" xml:space="preserve">
    <value>Running Servers</value>
  </data>
  <data name="BotInfoEvent_NextSchedule.Help" xml:space="preserve">
    <value>This is the next run schedule as planned at the end of that event run.</value>
  </data>
  <data name="BotInfoEvent_NextSchedule.Text" xml:space="preserve">
    <value>Planned Next Schedule</value>
  </data>
  <data name="Compiled.Text" xml:space="preserve">
    <value>Compiled</value>
  </data>
  <data name="CultureInvariant.Text" xml:space="preserve">
    <value>Culture Invariant</value>
  </data>
  <data name="ECMAScript.Text" xml:space="preserve">
    <value>ECMA Script</value>
  </data>
  <data name="ExplicitCapture.Text" xml:space="preserve">
    <value>Explicit Capture</value>
  </data>
  <data name="IgnorePatternWhitespace.Text" xml:space="preserve">
    <value>Ignore Pattern Whitespace</value>
  </data>
  <data name="Multiline.Text" xml:space="preserve">
    <value>Multiline</value>
  </data>
  <data name="OneTimeLocal.Text" xml:space="preserve">
    <value>Single Use Client</value>
  </data>
  <data name="RightToLeft.Text" xml:space="preserve">
    <value>Right To Left</value>
  </data>
  <data name="ScriptBase_ClearOutput.Text" xml:space="preserve">
    <value>Clear Output</value>
  </data>
  <data name="ScriptBase_Parameters.Header" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="ScriptBase_Parameters.Help" xml:space="preserve">
    <value>Since your script might make use of variables available at runtime during the execution of your agent, you can define test paramters to mock them here for testing purpose.</value>
  </data>
  <data name="ScriptBase_Parameters.Text" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="ScriptBase_Test.Header" xml:space="preserve">
    <value>Tests</value>
  </data>
  <data name="Singleline.Text" xml:space="preserve">
    <value>Single Line</value>
  </data>
  <data name="UserBotSettings`1_CachePlannedSchedule.Help" xml:space="preserve">
    <value>In order to prevent round trips to DB, you can choose to keep the user bots planned schedule in cache. Choose here a value.</value>
  </data>
  <data name="UserBotSettings`1_CachePlannedSchedule.Text" xml:space="preserve">
    <value>Cache Planned Schedule</value>
  </data>
  <data name="WebBotHistory_NextSchedule.Help" xml:space="preserve">
    <value>This is the next run schedule as planned from the last run or set manually. </value>
  </data>
  <data name="WebBotHistory_NextSchedule.Text" xml:space="preserve">
    <value>Next Schedule</value>
  </data>
  <data name="WebRequestInfo`1_MaxConcurrentConnexions.Help" xml:space="preserve">
    <value>You can choose to overwrite the service end point max number of simultanous connexions (default 2). </value>
  </data>
  <data name="WebRequestInfo`1_MaxConcurrentConnexions.Text" xml:space="preserve">
    <value>Define Max Nb of Connexions</value>
  </data>
  <data name="WebRequestInfo`1_SwallowWebExceptions.Help" xml:space="preserve">
    <value>.Net Web client will throw exceptions when the request is not succesful. You may choose to swallow those exceptions as long as content can be read (e.g displaying a 404 pages while sending the 404 not found status.) </value>
  </data>
  <data name="WebRequestInfo`1_SwallowWebExceptions.Text" xml:space="preserve">
    <value>Ignore Web Exceptions</value>
  </data>
  <data name="OutputCachingStrategy_AddArrOptOutHeaders.Help" xml:space="preserve">
    <value>Since IIS standard load-balancer, Application Request Routing (ARR), adds affinity cookies to the http responses to route the clients to a a single server, that would also concern all clients using a single cached version. Fortunately, since ARR version 3.0, Microsoft provides an opt-out mechanism through a dedicated header, which prevents the cookie from being generated. Check here to opt out from ARR affinity by generating such a response header.</value>
  </data>
  <data name="OutputCachingStrategy_AddArrOptOutHeaders.Text" xml:space="preserve">
    <value>Add ARR Opt Out Headers</value>
  </data>
  <data name="OutputCachingStrategy_VaryByContentEncodings.Help" xml:space="preserve">
    <value>Allows to cache both compressed and uncompressed versions of the response content. Enter a semi colon separated list of encoding values, by which to vary the cache</value>
  </data>
  <data name="OutputCachingStrategy_VaryByContentEncodings.Text" xml:space="preserve">
    <value>Vary By Content Encoding</value>
  </data>
  <data name="ActionTree`1_Synonym.Help" xml:space="preserve">
    <value>Map several keys to the same action by using synonyms refering to an existing configuration.</value>
  </data>
  <data name="ActionTree`1_Synonym.Text" xml:space="preserve">
    <value>Synonym</value>
  </data>
  <data name="ExpressionFilterInfo_Categorization.Header" xml:space="preserve">
    <value>Categorization</value>
  </data>
  <data name="ExpressionFilterInfo_Categorization.Help" xml:space="preserve">
    <value>You can define a dictionary of categories with matching words, to transform your input strings into a series of well defined categories, with or without a default value for unrecognised inputs.</value>
  </data>
  <data name="ExpressionFilterInfo_Categorization.Text" xml:space="preserve">
    <value>Categorization Dictionary</value>
  </data>
  <data name="ApplicationSettings_Compression.Header" xml:space="preserve">
    <value>Compression</value>
  </data>
  <data name="ApplicationSettings_UrlCompression.Help" xml:space="preserve">
    <value>Http Compression is a web.config parameter that can be activated in IIS or manually edited with additional parameters available. Use the following form to update the web.config file accordingly.</value>
  </data>
  <data name="ApplicationSettings_UrlCompression.Text" xml:space="preserve">
    <value>Url Compression Configuration</value>
  </data>
  <data name="UrlCompressionInfo_DoDynamicCompression.Help" xml:space="preserve">
    <value>Indicates whether dynamic pages and content should be compressed. Note that in order to define the corresponding web.config file section, it must not be forbiden at the web site level.</value>
  </data>
  <data name="UrlCompressionInfo_DoDynamicCompression.Text" xml:space="preserve">
    <value>Do Dynamic Compression</value>
  </data>
  <data name="UrlCompressionInfo_DoStaticCompression.Help" xml:space="preserve">
    <value>Indicates whether static files should be compressed, as opposed to dynamic pages and content. Note that in order to define the corresponding web.config file section, it must not be forbiden at the web site level.</value>
  </data>
  <data name="UrlCompressionInfo_DoStaticCompression.Text" xml:space="preserve">
    <value>Do Static Compression</value>
  </data>
  <data name="UrlCompressionInfo_DynamicCompressionBeforeCache.Help" xml:space="preserve">
    <value>When using dynamic compression in conjunction with output caching, you may define here that compression should be done before caching. Make sure that you set a VaryByContentEncoding="gzip;deflate" directive to properly support clients with various compression policies, and be aware that this disables kernel caching, thus at a small cost, that might be compensated by the gain in CPU and bandwidth.</value>
  </data>
  <data name="UrlCompressionInfo_DynamicCompressionBeforeCache.Text" xml:space="preserve">
    <value>Compress Before Cache</value>
  </data>
  <data name="CategorizationInfo_Comparer.Text" xml:space="preserve">
    <value>Comparer</value>
  </data>
  <data name="CategorizationInfo_Compariser.Help" xml:space="preserve">
    <value>The following parameters define what comparer is used to build the categories' dictionary.</value>
  </data>
  <data name="CategorizationInfo_Comparison.Header" xml:space="preserve">
    <value>Comparison</value>
  </data>
  <data name="CategorizationInfo_Comparison.Help" xml:space="preserve">
    <value>Choose a method of comparison to search for the category words in the input text.</value>
  </data>
  <data name="CategorizationInfo_Comparison.Text" xml:space="preserve">
    <value>Comparison</value>
  </data>
  <data name="CategorizationInfo_DefaultToUnchanged.Help" xml:space="preserve">
    <value>You can choose to leave the input string unchanged when no category is found, rather than set to a default value</value>
  </data>
  <data name="CategorizationInfo_DefaultToUnchanged.Text" xml:space="preserve">
    <value>Default Unchanged</value>
  </data>
  <data name="CategorizationInfo_DefaultValue.Help" xml:space="preserve">
    <value>This is the value returned when no category is found</value>
  </data>
  <data name="CategorizationInfo_DefaultValue.Text" xml:space="preserve">
    <value>Default Value</value>
  </data>
  <data name="CategorizationInfo_Mode.Help" xml:space="preserve">
    <value>There are 2 modes, "Dictionary contains input", means the dictionary of categorised terms must contains a key matching the input givent the defined comparer (faster). "Input contains key", means the input string must contains one of the defined words (more flexible but slower).</value>
  </data>
  <data name="CategorizationInfo_Mode.Text" xml:space="preserve">
    <value>Comparison Mode</value>
  </data>
  <data name="CategorizationInfo_SubTree.Help" xml:space="preserve">
    <value>Categories are defined as a dictionary binding categories as keys to lists of matching words. Enter a new key to add a category, and start adding new words. </value>
  </data>
  <data name="CategorizationInfo_SubTree.Text" xml:space="preserve">
    <value>Categories</value>
  </data>
  <data name="ComparerInfo_Comparison.Help" xml:space="preserve">
    <value>Choose amongst the available string comparison modes</value>
  </data>
  <data name="ComparerInfo_Comparison.Text" xml:space="preserve">
    <value>Comparison</value>
  </data>
  <data name="ComparerInfo_CultureMode.Help" xml:space="preserve">
    <value>There are several modes to define the cutlture used in the custom culture aware comparer</value>
  </data>
  <data name="ComparerInfo_CultureMode.Text" xml:space="preserve">
    <value>Culture Mode</value>
  </data>
  <data name="ComparerInfo_CustomCultureLocale.Help" xml:space="preserve">
    <value>Enter a culture code to set the comparer's custom culture</value>
  </data>
  <data name="ComparerInfo_CustomCultureLocale.Text" xml:space="preserve">
    <value>Custom Culture Code</value>
  </data>
  <data name="CurrentCulture.Text" xml:space="preserve">
    <value>Specific Culture</value>
  </data>
  <data name="CurrentCultureIgnoreCase.Text" xml:space="preserve">
    <value>Specific Culture - Ignore Case</value>
  </data>
  <data name="DictionaryContainsInput.Text" xml:space="preserve">
    <value>Dictionary contains Input</value>
  </data>
  <data name="InputContainsKey.Text" xml:space="preserve">
    <value>Input contains Key</value>
  </data>
  <data name="InvariantCulture.Text" xml:space="preserve">
    <value>Invariant Culture</value>
  </data>
  <data name="InvariantCultureIgnoreCase.Text" xml:space="preserve">
    <value>Invariant Culture - Ignore Case</value>
  </data>
  <data name="Ordinal.Text" xml:space="preserve">
    <value>Ordinal</value>
  </data>
  <data name="OrdinalIgnoreCase.Text" xml:space="preserve">
    <value>Ordinal - Ignore Case</value>
  </data>
  <data name="CategorizationInfo_Comparizon.Help" xml:space="preserve">
    <value>Select the string comparison to use with the contains search.</value>
  </data>
  <data name="CategorizationInfo_Comparizon.Text" xml:space="preserve">
    <value>String Comparison</value>
  </data>
  <data name="ExtendedHtmlScraps_Python.Help" xml:space="preserve">
    <value>You can optionally add a python script that will be run once all other actions have played, in order to edit the results dictionary of values to be inserted or updated in the target Google spreadsheet.</value>
  </data>
  <data name="ExtendedHtmlScraps_Python.Text" xml:space="preserve">
    <value>Custom Python Script (global)</value>
  </data>
  <data name="ExtendedHtmlScrap_Python.Help" xml:space="preserve">
    <value>You can optionally add a python script that will be run once all other actions have played, in order to edit the results dictionary of values to be inserted or updated in the target Google spreadsheet.</value>
  </data>
  <data name="ExtendedHtmlScrap_Python.Text" xml:space="preserve">
    <value>Custom Python Script</value>
  </data>
  <data name="FilteredString_Filter.Help" xml:space="preserve">
    <value>Define a filter to process your input string</value>
  </data>
  <data name="FilteredString_Filter.Text" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="FilteredString_Source.Help" xml:space="preserve">
    <value>Enter an expression that evaluates to the string to filter</value>
  </data>
  <data name="FilteredString_Source.Text" xml:space="preserve">
    <value>Source Expression</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_PrimaryKey.Help" xml:space="preserve">
    <value>Enter a list of column headers, the columns of which make up the identifier of spreadsheet records.</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_PrimaryKey.Text" xml:space="preserve">
    <value>Primary Key Columns</value>
  </data>
  <data name="HtmlPageScrapInfo_Requests.Help" xml:space="preserve">
    <value>Enter here one or several search urls, specifying whether to use a web client or a web browser.</value>
  </data>
  <data name="HtmlPageScrapInfo_Requests.Text" xml:space="preserve">
    <value>Search Requests</value>
  </data>
  <data name="HtmlPageScrapsInfo`1_AdditionalColumns.Help" xml:space="preserve">
    <value>You can optionally configure additional columns computed and filtered from existing columns.</value>
  </data>
  <data name="HtmlPageScrapsInfo`1_AdditionalColumns.Text" xml:space="preserve">
    <value>Additional Columns</value>
  </data>
  <data name="HtmlPageScrapsInfo`1_Advanced.Header" xml:space="preserve">
    <value>Advanced</value>
  </data>
  <data name="HtmlPageScrapsInfo`1_Custom.Help" xml:space="preserve">
    <value>Enter custom pairs of column names and static values to be added to the result fields.</value>
  </data>
  <data name="HtmlPageScrapsInfo`1_Custom.Text" xml:space="preserve">
    <value>Custom Values</value>
  </data>
  <data name="HtmlPageScrapsInfo`1_Global.Header" xml:space="preserve">
    <value>Global</value>
  </data>
  <data name="HtmlPageScrapsInfo`1_MaxNbPages.Help" xml:space="preserve">
    <value>This is a global limit to the number of pages harvested for each scrap, which overwrites their individual limit configured. 0 means no global limit configured.</value>
  </data>
  <data name="HtmlPageScrapsInfo`1_MaxNbPages.Text" xml:space="preserve">
    <value>Max Nb Pages / Scrap (global)</value>
  </data>
  <data name="HtmlPageScrapsInfo`1_MaxResultsPerPage.Help" xml:space="preserve">
    <value>This is the maximum number of individual result per page processed and saved to the spreadsheet. 0 means no limit configured.</value>
  </data>
  <data name="HtmlPageScrapsInfo`1_MaxResultsPerPage.Text" xml:space="preserve">
    <value>Max Nb Results / Page (global)</value>
  </data>
  <data name="HtmlPageScrapsInfo`1_PageScraps.Header" xml:space="preserve">
    <value>Page Scraps</value>
  </data>
  <data name="HtmlPageScrapsInfo`1_PageScraps.Help" xml:space="preserve">
    <value>Edit existing or create new page scraps, by defining urls and means to extract data from html content.</value>
  </data>
  <data name="HtmlPageScrapsInfo`1_PageScraps.Text" xml:space="preserve">
    <value>Individiual Page Scraps</value>
  </data>
  <data name="HtmlPageScrapsInfo`1_PrimaryKeys.Help" xml:space="preserve">
    <value>Enter the list of column names that identify uniquely a result record in the target spreadsheet.</value>
  </data>
  <data name="HtmlPageScrapsInfo`1_PrimaryKeys.Text" xml:space="preserve">
    <value>Primary Keys</value>
  </data>
  <data name="HtmlRequestInfo_Url.Help" xml:space="preserve">
    <value>Enter a base search Url to retrieve result pages.</value>
  </data>
  <data name="HtmlRequestInfo_Url.Text" xml:space="preserve">
    <value>Url</value>
  </data>
  <data name="OneOrMore`1_More.Help" xml:space="preserve">
    <value>Manage a list of additional items here.</value>
  </data>
  <data name="OneOrMore`1_More.Text" xml:space="preserve">
    <value>Additional Values</value>
  </data>
  <data name="OneOrMore`1_One.Help" xml:space="preserve">
    <value>This is your initial item.</value>
  </data>
  <data name="OneOrMore`1_One.Text" xml:space="preserve">
    <value>Initial Value</value>
  </data>
  <data name="Column.Text" xml:space="preserve">
    <value>Column</value>
  </data>
  <data name="HtmlScrapDetailRequestInfo_UrlMode.Help" xml:space="preserve">
    <value>There are 2 modes to build the detail url, pattern, which let you build the url string with tokens, and column, which lets you enter the name of an existing column.</value>
  </data>
  <data name="HtmlScrapDetailRequestInfo_UrlMode.Text" xml:space="preserve">
    <value>Url Mode</value>
  </data>
  <data name="HtmlScrapRequestInfo_XPath.Help" xml:space="preserve">
    <value>Define a main xpath query and a set of named sub selects to build a dictionary of string values extracted from the target Html content.</value>
  </data>
  <data name="HtmlScrapRequestInfo_XPath.Text" xml:space="preserve">
    <value>XPath Selection</value>
  </data>
  <data name="Pattern.Text" xml:space="preserve">
    <value>Pattern</value>
  </data>
  <data name="NoCache.Text" xml:space="preserve">
    <value>No Cache</value>
  </data>
  <data name="Private.Text" xml:space="preserve">
    <value>Private</value>
  </data>
  <data name="Server.Text" xml:space="preserve">
    <value>Server</value>
  </data>
  <data name="ServerAndPrivate.Text" xml:space="preserve">
    <value>Server And Private</value>
  </data>
  <data name="ControlAdapterSettings_VersionRange.Help" xml:space="preserve">
    <value>You can define the range of DNN versions supported by you control adapter. This is useful if you intend to deploy your configuration to a various set of DNN instances.</value>
  </data>
  <data name="ControlAdapterSettings_VersionRange.Text" xml:space="preserve">
    <value>DNN Versions Range</value>
  </data>
  <data name="Range`1_Maximum.Help" xml:space="preserve">
    <value>Define here the upper bound of your range.</value>
  </data>
  <data name="Range`1_Maximum.Text" xml:space="preserve">
    <value>Maximum</value>
  </data>
  <data name="Range`1_Minimum.Help" xml:space="preserve">
    <value>Define here the lower bound of your range</value>
  </data>
  <data name="Range`1_Minimum.Text" xml:space="preserve">
    <value>Minimum</value>
  </data>
  <data name="Range`1_Mode.Help" xml:space="preserve">
    <value>Choose whether you want to define a lower bound, an upper bound, none or both.</value>
  </data>
  <data name="Range`1_Mode.Text" xml:space="preserve">
    <value>Bounds</value>
  </data>
  <data name="SerializableVersion_Version.Help" xml:space="preserve">
    <value>Use the dropdownlist to define the Major, Minor and Build integer components of your version.</value>
  </data>
  <data name="SerializableVersion_Version.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="SetMaximum.Text" xml:space="preserve">
    <value>Set Maximum</value>
  </data>
  <data name="SetMinimum.Text" xml:space="preserve">
    <value>Set Minimum</value>
  </data>
  <data name="ControlUrlInfo_DefinePortalAlias.Help" xml:space="preserve">
    <value>You can select a particular portal alias to use together with your target path.</value>
  </data>
  <data name="ControlUrlInfo_DefinePortalAlias.Text" xml:space="preserve">
    <value>Specific Portal Alias</value>
  </data>
  <data name="ControlUrlInfo_PortalAlias.Help" xml:space="preserve">
    <value>Select the target portal alias</value>
  </data>
  <data name="ControlUrlInfo_PortalAlias.Text" xml:space="preserve">
    <value>Portal Alias</value>
  </data>
  <data name="FirewallSettings_TechnicalSettings.Header" xml:space="preserve">
    <value>Advanced Settings</value>
  </data>
  <data name="GeneralObjectAction_InitializeSimpleValue.Text" xml:space="preserve">
    <value>Init Value</value>
  </data>
  <data name="GeneralObjectAction_Value.Help" xml:space="preserve">
    <value>Define an instance or an expression for the property's setter value.</value>
  </data>
  <data name="GeneralObjectAction_Value.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="SimpleOrExpressionBase`2_ResetInstance.Text" xml:space="preserve">
    <value>Reset Value</value>
  </data>
  <data name="TaskQueueInfo_Synchronous.Help" xml:space="preserve">
    <value>Check to have the task queue process items synchronously rather than through an asynchronous smart thread pool.</value>
  </data>
  <data name="TaskQueueInfo_Synchronous.Text" xml:space="preserve">
    <value>Synchronous</value>
  </data>
  <data name="CdnStrategy_CachingStrategy.Help" xml:space="preserve">
    <value>This is the caching strategy that will be applied to all resources served through your CDN.</value>
  </data>
  <data name="CdnStrategy_CachingStrategy.Text" xml:space="preserve">
    <value>CDN Caching Strategy</value>
  </data>
  <data name="CdnStrategy_PortalAlias.Help" xml:space="preserve">
    <value>This is the DNN portal alias dedicated to serving your CDN content.</value>
  </data>
  <data name="CdnStrategy_PortalAlias.Text" xml:space="preserve">
    <value>CDN Alias</value>
  </data>
  <data name="DnnPortalAlias_PortalAliasId.Help" xml:space="preserve">
    <value>Select an alias from the available list.</value>
  </data>
  <data name="DnnPortalAlias_PortalAliasId.Text" xml:space="preserve">
    <value>Portal Alias Selection</value>
  </data>
  <data name="FirewallSettings_ScopeCondition.Help" xml:space="preserve">
    <value>Enter a dynamic expression that evaluated to a Boolean to determine if a given request should be processed by the Firewall.</value>
  </data>
  <data name="FirewallSettings_ScopeCondition.Text" xml:space="preserve">
    <value>Scope Condition</value>
  </data>
  <data name="FleeExpressionInfo`1_KeepCloneExpression.Help" xml:space="preserve">
    <value>Compiled Flee Expression are kept and normally have to be clone between each evaluation to account for a change contextual of Expression owner. If your expression is to be evaluated several time with the same owner, you can save the corresponding expression clone within the context lookup attached to that owner, in order to save the cloning phase.</value>
  </data>
  <data name="FleeExpressionInfo`1_KeepCloneExpression.Text" xml:space="preserve">
    <value>Keep Clone Expression</value>
  </data>
  <data name="FleeExpressionInfo`1_MakeConstant.Help" xml:space="preserve">
    <value>When checked, the expression is evaluated only once and the result is then saved and returned on later evaluations.</value>
  </data>
  <data name="FleeExpressionInfo`1_MakeConstant.Text" xml:space="preserve">
    <value>Make Constant</value>
  </data>
  <data name="FleeExpressionInfo`1_NoCloning.Help" xml:space="preserve">
    <value>Compiled Flee Expression are kept and normally have to be cloned between each evaluation to account for a change of contextual Expression owner. If cloning is not necessary with your expression, you can skip that phase entirely.</value>
  </data>
  <data name="FleeExpressionInfo`1_NoCloning.Text" xml:space="preserve">
    <value>No Cloning</value>
  </data>
  <data name="SelectionSetCondition`1_DynamicValues.Help" xml:space="preserve">
    <value>You can also add dynamic values to be matched as dynamic expressions of integer values</value>
  </data>
  <data name="SelectionSetCondition`1_DynamicValues.Text" xml:space="preserve">
    <value>Dynamic Values</value>
  </data>
  <data name="LocationSettings_UseCache.Help" xml:space="preserve">
    <value>If a singleton is not used, you can still use caching although it will take a little longer to retrieve the configuration each time it is accessed.</value>
  </data>
  <data name="LocationSettings_UseCache.Text" xml:space="preserve">
    <value>Use Cache</value>
  </data>
  <data name="LocationSettings_UseSingleton.Help" xml:space="preserve">
    <value>to minimize access time, configuration can be saved to a local singleton. The consequence is that if the corresponding configuration file is changed externally, it won't be automatically refreshed and you'll have to click the refresh command button to clear the local singleton.</value>
  </data>
  <data name="LocationSettings_UseSingleton.Text" xml:space="preserve">
    <value>Use Singleton</value>
  </data>
  <data name="ModuleConfig`2_ClearSingleton.Text" xml:space="preserve">
    <value>Reload Configuration</value>
  </data>
  <data name="Accepted.Text" xml:space="preserve">
    <value>202 - Accepted</value>
  </data>
  <data name="ActionNotFound.Message" xml:space="preserve">
    <value>Action not found at url:{0}  for dynamic controller {1} and action name {2}</value>
  </data>
  <data name="BadGateway.Text" xml:space="preserve">
    <value>502 - Bad Gateway</value>
  </data>
  <data name="BadRequest.Text" xml:space="preserve">
    <value>400 - Bad Request</value>
  </data>
  <data name="Conflict.Text" xml:space="preserve">
    <value>409 - Conflict</value>
  </data>
  <data name="Continue.Text" xml:space="preserve">
    <value>100 - Continue</value>
  </data>
  <data name="Created.Text" xml:space="preserve">
    <value>201 - Created</value>
  </data>
  <data name="CreateHttpResponseInfo_CustomFormatter.Help" xml:space="preserve">
    <value>The formatter is normally automatically negociated according to the request headers and return object type, but you can also specify a formatter here</value>
  </data>
  <data name="CreateHttpResponseInfo_CustomFormatter.Text" xml:space="preserve">
    <value>Define Media Type Formatter</value>
  </data>
  <data name="CreateHttpResponseInfo_CustomMediaType.Help" xml:space="preserve">
    <value>The media type header is normally automatically negociated according to request headers and return object type, but you can also specify a Media type header.</value>
  </data>
  <data name="CreateHttpResponseInfo_CustomMediaType.Text" xml:space="preserve">
    <value>Define Media Type Header</value>
  </data>
  <data name="CreateHttpResponseInfo_CustomObject.Help" xml:space="preserve">
    <value>Define a list of typed properties, to be compiled into a dynamic type and evaluated to the corresponding custom object. A content negociator will then figure out how to serialize and include the object within the Http Response.</value>
  </data>
  <data name="CreateHttpResponseInfo_CustomObject.Text" xml:space="preserve">
    <value>Custom Properties</value>
  </data>
  <data name="CreateHttpResponseInfo_ResponseMode.Help" xml:space="preserve">
    <value>Select whether to return no content object, a single typed object, or a custom anonymous object made from dynamic properties</value>
  </data>
  <data name="CreateHttpResponseInfo_ResponseMode.Text" xml:space="preserve">
    <value>Return Type</value>
  </data>
  <data name="CreateHttpResponseInfo_StatusCode.Help" xml:space="preserve">
    <value>Select the Http Status code to return as part of the Http Response message.</value>
  </data>
  <data name="CreateHttpResponseInfo_StatusCode.Text" xml:space="preserve">
    <value>Http Status Code</value>
  </data>
  <data name="CreateHttpResponseInfo_TypedReturn.Help" xml:space="preserve">
    <value>Define here the default object to be included within your response. A content negociator will be used to determine how to serialize and include the return object.</value>
  </data>
  <data name="CreateHttpResponseInfo_TypedReturn.Text" xml:space="preserve">
    <value>Typed Return</value>
  </data>
  <data name="CustomObject.Text" xml:space="preserve">
    <value>Custom Object</value>
  </data>
  <data name="DNNRouteInfo_FolderName.Help" xml:space="preserve">
    <value>This is the folder name for the real or virtual extension this service is based on.</value>
  </data>
  <data name="DNNRouteInfo_FolderName.Text" xml:space="preserve">
    <value>Folder Name</value>
  </data>
  <data name="DNNRouteInfo_Namespaces.Text" xml:space="preserve">
    <value>Namespaces</value>
  </data>
  <data name="DynamicAction_DefaultResponse.Help" xml:space="preserve">
    <value>Check to define a default response to be returned when no specific response was returned within the action flow.</value>
  </data>
  <data name="DynamicAction_DefaultResponse.Text" xml:space="preserve">
    <value>Default Response</value>
  </data>
  <data name="DynamicAction_EnforceActionName.Help" xml:space="preserve">
    <value>Check if you want your action to be triggered only by providing the corresponding name in a route parameter.</value>
  </data>
  <data name="DynamicAction_EnforceActionName.Text" xml:space="preserve">
    <value>Enforce action name</value>
  </data>
  <data name="DynamicAction_HttpVerbs.Help" xml:space="preserve">
    <value>This is a list of supported Http Verbs</value>
  </data>
  <data name="DynamicAction_HttpVerbs.Text" xml:space="preserve">
    <value>Http Verbs</value>
  </data>
  <data name="DynamicAction_Parameters.Help" xml:space="preserve">
    <value>Enter a list of input parameters to your action. As with regular .Net controller method arguments, the web API pipeline will try to bind those parameters to request data. Those parameters will be included in the agent context, and available for use within your actions to be executed.</value>
  </data>
  <data name="DynamicAction_Parameters.Text" xml:space="preserve">
    <value>Dynamic Parameters</value>
  </data>
  <data name="DynamicAction_WebAction.Header" xml:space="preserve">
    <value>Web Method</value>
  </data>
  <data name="DynamicControllerInfo_DynamicActions.Help" xml:space="preserve">
    <value>Dynamic Actions are online agents replacing traditional controller methods. Declare their parameters according to your routes.</value>
  </data>
  <data name="DynamicControllerInfo_DynamicActions.Text" xml:space="preserve">
    <value>Dynamic Actions</value>
  </data>
  <data name="DynamicParameter_EditableType.Help" xml:space="preserve">
    <value>This is the expected type for your dynamic parameter. Web API will try to bind it to a simple or compound request input.</value>
  </data>
  <data name="DynamicParameter_EditableType.Text" xml:space="preserve">
    <value>.Net Type</value>
  </data>
  <data name="DynamicParameter_IsOptional.Help" xml:space="preserve">
    <value>Check if the parameter is to be declared as optional within the parent Web API action.</value>
  </data>
  <data name="DynamicParameter_IsOptional.Text" xml:space="preserve">
    <value>Optional</value>
  </data>
  <data name="DynamicRoute_DNNRoute.Help" xml:space="preserve">
    <value>You can optionnally declare a route the DNN way by providing a module folder and target namespaces.</value>
  </data>
  <data name="DynamicRoute_DNNRoute.Text" xml:space="preserve">
    <value>Make DNN Route</value>
  </data>
  <data name="DynamicRoute_Template.Help" xml:space="preserve">
    <value>This is the url pattern your service will respond to. For more information on how to build Web API routes, refer to the &lt;a href="http://www.asp.net/web-api/overview/web-api-routing-and-actions/routing-in-aspnet-web-api"&gt;following documentation&lt;/a&gt;.</value>
  </data>
  <data name="DynamicRoute_Template.Text" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="ExpectationFailed.Text" xml:space="preserve">
    <value>417 - Expectation Failed</value>
  </data>
  <data name="Forbidden.Text" xml:space="preserve">
    <value>403 - Forbidden</value>
  </data>
  <data name="GatewayTimeout.Text" xml:space="preserve">
    <value>504 - Gateway Timeout</value>
  </data>
  <data name="Gone.Text" xml:space="preserve">
    <value>410 - Gone</value>
  </data>
  <data name="HttpVersionNotSupported.Text" xml:space="preserve">
    <value>505 - Http Version Not Supported</value>
  </data>
  <data name="InternalServerError.Text" xml:space="preserve">
    <value>500 - Internal Server Error</value>
  </data>
  <data name="KnownFormatter.NullSelect" xml:space="preserve">
    <value>Custom Formatter Expression</value>
  </data>
  <data name="KnownHeader.NullSelect" xml:space="preserve">
    <value>Custom Media Type Header</value>
  </data>
  <data name="LengthRequired.Text" xml:space="preserve">
    <value>411 - Length Required</value>
  </data>
  <data name="MediaTypeFormatterInfo_FormatterExpression.Help" xml:space="preserve">
    <value>Enter an expression that resolves to a MediaTypeFormatter object.</value>
  </data>
  <data name="MediaTypeFormatterInfo_FormatterExpression.Text" xml:space="preserve">
    <value>Formatter Expression</value>
  </data>
  <data name="MediaTypeFormatterInfo_KnownFormatter.Help" xml:space="preserve">
    <value>Select a formatter from those available in the configuration or specify a custom formatter through a dedicated dynamic expression.</value>
  </data>
  <data name="MediaTypeFormatterInfo_KnownFormatter.Text" xml:space="preserve">
    <value>Media Type Formatter</value>
  </data>
  <data name="MediaTypeHeaderInfo_CustomHeader.Help" xml:space="preserve">
    <value>Enter a string or an expression that evaluates to a string to define the media type header to write in the response header.</value>
  </data>
  <data name="MediaTypeHeaderInfo_CustomHeader.Text" xml:space="preserve">
    <value>Custom Media Type Header</value>
  </data>
  <data name="MediaTypeHeaderInfo_KnownHeader.Help" xml:space="preserve">
    <value>Select a media type from those supported by the formatters declared globally, or specify a custom media type manually.</value>
  </data>
  <data name="MediaTypeHeaderInfo_KnownHeader.Text" xml:space="preserve">
    <value>Media Type Header</value>
  </data>
  <data name="MethodNotAllowed.Text" xml:space="preserve">
    <value>405 - Method Not Allowed</value>
  </data>
  <data name="MovedPermanently.Text" xml:space="preserve">
    <value>301 - Moved Permanently</value>
  </data>
  <data name="MultipleChoices.Text" xml:space="preserve">
    <value>300 - Multiple Choices</value>
  </data>
  <data name="NoContent.Text" xml:space="preserve">
    <value>204 - No Content</value>
  </data>
  <data name="NonAuthoritativeInformation.Text" xml:space="preserve">
    <value>203 - Non Authorative Information</value>
  </data>
  <data name="NotAcceptable.Text" xml:space="preserve">
    <value>406 - Not Acceptable</value>
  </data>
  <data name="NotFound.Text" xml:space="preserve">
    <value>404 - Not Found</value>
  </data>
  <data name="NotImplemented.Text" xml:space="preserve">
    <value>501 - Not Implemented</value>
  </data>
  <data name="NotModified.Text" xml:space="preserve">
    <value>304 - Not Modified</value>
  </data>
  <data name="OK.Text" xml:space="preserve">
    <value>200 - OK</value>
  </data>
  <data name="PartialContent.Text" xml:space="preserve">
    <value>206 - Partial Content</value>
  </data>
  <data name="PaymentRequired.Text" xml:space="preserve">
    <value>402 - Payment Required</value>
  </data>
  <data name="PreconditionFailed.Text" xml:space="preserve">
    <value>412 - Precondition Failed</value>
  </data>
  <data name="ProxyAuthenticationRequired.Text" xml:space="preserve">
    <value>407 - Proxy Authentication Required</value>
  </data>
  <data name="Redirect.Text" xml:space="preserve">
    <value>302 - Redirect</value>
  </data>
  <data name="RequestedRangeNotSatisfiable.Text" xml:space="preserve">
    <value>416 - Requested Range Not Satisfiable</value>
  </data>
  <data name="RequestEntityTooLarge.Text" xml:space="preserve">
    <value>413 - Request Entity Too Large</value>
  </data>
  <data name="RequestTimeout.Text" xml:space="preserve">
    <value>408 - Request Timeout</value>
  </data>
  <data name="RequestUriTooLong.Text" xml:space="preserve">
    <value>414 - Request Uri Too Long</value>
  </data>
  <data name="ResetContent.Text" xml:space="preserve">
    <value>205 - Reset Content</value>
  </data>
  <data name="RestServicesSettings_DNNServicesAvailable.Help" xml:space="preserve">
    <value>Indicates if the Web API based dedicated DNN layer is available, which is required to host dynamic Rest services.</value>
  </data>
  <data name="RestServicesSettings_DNNServicesAvailable.Text" xml:space="preserve">
    <value>DNN Service Framework available</value>
  </data>
  <data name="RestServicesSettings_RestServices.Help" xml:space="preserve">
    <value>This is a list of dynamically declared Rest Services bound to typed or dynamic controllers.</value>
  </data>
  <data name="RestService_DynamicControllers.Help" xml:space="preserve">
    <value>In addition to the regular Web API or DNN specific controllers, which you can still use thanks to dependency injection, you can build dynamic controllers with agent based actions.</value>
  </data>
  <data name="RestService_DynamicControllers.Text" xml:space="preserve">
    <value>Dynamic Controllers</value>
  </data>
  <data name="RestService_GlobalParameters.Help" xml:space="preserve">
    <value>Global parameters can be shared amongst all dynamic methods' rule engine, within each of your dynamic controllers.</value>
  </data>
  <data name="RestService_GlobalParameters.Text" xml:space="preserve">
    <value>Global Parameters</value>
  </data>
  <data name="RestService_Routes.Help" xml:space="preserve">
    <value>Enter here the Url patterns that your service should answer to. Use curling braces for dynamic parameters, while making sure they correspond to the dynamic actions' parameters</value>
  </data>
  <data name="RestService_Routes.Text" xml:space="preserve">
    <value>Url Routes</value>
  </data>
  <data name="SeeOther.Text" xml:space="preserve">
    <value>303 - See Other</value>
  </data>
  <data name="ServiceUnavailable.Text" xml:space="preserve">
    <value>503 - Service Unavailable</value>
  </data>
  <data name="StatusOnly.Text" xml:space="preserve">
    <value>Status Only</value>
  </data>
  <data name="SwitchingProtocols.Text" xml:space="preserve">
    <value>101 - Switching Protocols</value>
  </data>
  <data name="TemporaryRedirect.Text" xml:space="preserve">
    <value>307 - Temporary Redirect</value>
  </data>
  <data name="TypedReturn.Text" xml:space="preserve">
    <value>Typed Return</value>
  </data>
  <data name="Unauthorized.Text" xml:space="preserve">
    <value>401 - Unauthorized</value>
  </data>
  <data name="UnsupportedMediaType.Text" xml:space="preserve">
    <value>415 - Unsupported Media Type</value>
  </data>
  <data name="Unused.Text" xml:space="preserve">
    <value>306 - Unused</value>
  </data>
  <data name="UpgradeRequired.Text" xml:space="preserve">
    <value>426 - Upgrade Required</value>
  </data>
  <data name="UseProxy.Text" xml:space="preserve">
    <value>305 -  Use Proxy</value>
  </data>
  <data name="Admin.Text" xml:space="preserve">
    <value>Admin</value>
  </data>
  <data name="Anonymous.Text" xml:space="preserve">
    <value>Anonymous</value>
  </data>
  <data name="ApiExplorerSettingsAttribute_IgnoreApi.Help" xml:space="preserve">
    <value>Check to exclude the method or the controller that attribute applies to, from the API explorer scope.</value>
  </data>
  <data name="ApiExplorerSettingsAttribute_IgnoreApi.Text" xml:space="preserve">
    <value>Ignore API</value>
  </data>
  <data name="AuthorizeAttribute_Roles.Help" xml:space="preserve">
    <value>Enter a comma separated list of ASP.Net user principal Roles allowed to access your controller / action. Note that DNN roles are available through a distinct attribute.</value>
  </data>
  <data name="AuthorizeAttribute_Roles.Text" xml:space="preserve">
    <value>Authorized Roles</value>
  </data>
  <data name="AuthorizeAttribute_Users.Help" xml:space="preserve">
    <value>Enter a comma separated list of ASP.Net user principal names allowed to access your controller / action. Note that DNN users are available through a distinct attribute.</value>
  </data>
  <data name="AuthorizeAttribute_Users.Text" xml:space="preserve">
    <value>Authorized Users</value>
  </data>
  <data name="ControlPanel.Text" xml:space="preserve">
    <value>Control Panel</value>
  </data>
  <data name="CreateHttpResponseAction_CreateResponseInfo.Help" xml:space="preserve">
    <value>Define here the status and the content of the Web API response to return.</value>
  </data>
  <data name="CreateHttpResponseAction_CreateResponseInfo.Text" xml:space="preserve">
    <value>Http Response Content</value>
  </data>
  <data name="DnnAuthorizeAttribute_DenyRoles.Help" xml:space="preserve">
    <value>Enter a comma separated list of DNN Role names explicitally denied access your controller / action.</value>
  </data>
  <data name="DnnAuthorizeAttribute_DenyRoles.Text" xml:space="preserve">
    <value>Denied Roles</value>
  </data>
  <data name="DnnAuthorizeAttribute_StaticRoles.Help" xml:space="preserve">
    <value>Enter a comma separated list of DNN Role names allowed to access your controller / action. </value>
  </data>
  <data name="DnnAuthorizeAttribute_StaticRoles.Text" xml:space="preserve">
    <value>Authorized Roles</value>
  </data>
  <data name="DnnExceptionFilterAttribute_LocalResourceFile.Help" xml:space="preserve">
    <value>Enter the relative path to your exception message resource file. If empty, the path "~/App_GlobalResources/Exceptions.resx" will be used</value>
  </data>
  <data name="DnnExceptionFilterAttribute_LocalResourceFile.Text" xml:space="preserve">
    <value>Local Resource File</value>
  </data>
  <data name="DnnExceptionFilterAttribute_MessageKey.Help" xml:space="preserve">
    <value>Enter an optional resource key for your exception message. If empty, a key will be constructed with the format "controllerName_actionName"</value>
  </data>
  <data name="DnnExceptionFilterAttribute_MessageKey.Text" xml:space="preserve">
    <value>Message Resx Key</value>
  </data>
  <data name="DnnModuleAuthorizeAttribute_AccessLevel.Help" xml:space="preserve">
    <value>Select the access level for your controller / action (select EDIT for a custom permission)</value>
  </data>
  <data name="DnnModuleAuthorizeAttribute_AccessLevel.Text" xml:space="preserve">
    <value>Access Level</value>
  </data>
  <data name="DnnModuleAuthorizeAttribute_PermissionKey.Help" xml:space="preserve">
    <value>Enter the required permission Key to access the service</value>
  </data>
  <data name="DnnModuleAuthorizeAttribute_PermissionKey.Text" xml:space="preserve">
    <value>Permission Key</value>
  </data>
  <data name="DnnPagePermissionAttribute_PermissionKey.Help" xml:space="preserve">
    <value>Enter the page permission key to access the service (provided the page information is included within the call)</value>
  </data>
  <data name="DnnPagePermissionAttribute_PermissionKey.Text" xml:space="preserve">
    <value>Page Permission Key</value>
  </data>
  <data name="DotNetType_MakeArray.Help" xml:space="preserve">
    <value>Check to select an array type for the currently selected type</value>
  </data>
  <data name="DotNetType_MakeArray.Text" xml:space="preserve">
    <value>Array Type</value>
  </data>
  <data name="DynamicAction_DynamicAttributes.Help" xml:space="preserve">
    <value>You can add dynamic attributes at the action level, as you would do on a ApiController class method. Simply choose the attribute type to add, and fill in the corresponding properties accordingly.</value>
  </data>
  <data name="DynamicAction_DynamicAttributes.Text" xml:space="preserve">
    <value>Dynamic Attributes</value>
  </data>
  <data name="DynamicControllerInfo_DynamicAttributes.Help" xml:space="preserve">
    <value>You can add dynamic attributes at the controller level, as you would do on a ApiController class. Simply choose the attribute type to add, and fill in the corresponding properties accordingly.</value>
  </data>
  <data name="DynamicControllerInfo_DynamicAttributes.Text" xml:space="preserve">
    <value>Dynamic Attributes</value>
  </data>
  <data name="DynamicParameter_DynamicAttributes.Help" xml:space="preserve">
    <value>You can add dynamic attributes at the parameter level, as you would do on a ApiController class method argument. Simply choose the attribute type to add, and fill in the corresponding properties accordingly.</value>
  </data>
  <data name="DynamicParameter_DynamicAttributes.Text" xml:space="preserve">
    <value>Dynamic Attributes</value>
  </data>
  <data name="Edit.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="FilterAttribute_AllowMultiple.Help" xml:space="preserve">
    <value>Readonly property that states whether the attribute can be added multiple times to the same target.</value>
  </data>
  <data name="FilterAttribute_AllowMultiple.Text" xml:space="preserve">
    <value>Allow Multiple</value>
  </data>
  <data name="GeneralVariableInfo_ResetInstance.Text" xml:space="preserve">
    <value>Reset Instance</value>
  </data>
  <data name="Host.Text" xml:space="preserve">
    <value>Host</value>
  </data>
  <data name="SimpleProviderContainer`1_Items.Help" xml:space="preserve">
    <value>This is the list of items of your dynamic list. Select the corresponding provider to add new items.</value>
  </data>
  <data name="SimpleProviderContainer`1_Items.Text" xml:space="preserve">
    <value>Items</value>
  </data>
  <data name="SupportedModulesSurrogateAttribute_SupportedModules.Help" xml:space="preserve">
    <value>Select the list of modules that can access the service, through the usual DNN module identification mechanism.</value>
  </data>
  <data name="SupportedModulesSurrogateAttribute_SupportedModules.Text" xml:space="preserve">
    <value>Supported Modules</value>
  </data>
  <data name="View.Text" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="ViewPermissions.Text" xml:space="preserve">
    <value>View permissions</value>
  </data>
  <data name="DynamicControllerInfo_GlobalParameters.Help" xml:space="preserve">
    <value>Define parameters here available to all dynamic actions of your controller.</value>
  </data>
  <data name="DynamicControllerInfo_GlobalParameters.Text" xml:space="preserve">
    <value>Global Parameters</value>
  </data>
  <data name="DynamicRoute_Constraints.Help" xml:space="preserve">
    <value>Optionally create constraints for some of your dynamic placeholder, by specifying their name and a corresponding value as a string regex, or a custom IHttpRouteConstraint value.</value>
  </data>
  <data name="DynamicRoute_Constraints.Text" xml:space="preserve">
    <value>Placeholder Constraints</value>
  </data>
  <data name="DynamicRoute_Defaults.Help" xml:space="preserve">
    <value>Optionally create default values for some of your dynamic placeholder, by specifying their name and a corresponding value (RouteParameter.Optional is available)</value>
  </data>
  <data name="DynamicRoute_Defaults.Text" xml:space="preserve">
    <value>Placeholder Defaults</value>
  </data>
  <data name="KeeperAction`1_ThrowAllExceptions.Help" xml:space="preserve">
    <value>By default, you can choose to throw exceptions individually for each actions. Check to throw exceptions systematically.</value>
  </data>
  <data name="KeeperAction`1_ThrowAllExceptions.Text" xml:space="preserve">
    <value>Throw all exceptions</value>
  </data>
  <data name="RestService_SpecificRoutes.Help" xml:space="preserve">
    <value>You can optionally register routes with placeholders specific to your service, shared amongst controllers.</value>
  </data>
  <data name="RestService_SpecificRoutes.Text" xml:space="preserve">
    <value>Service Routes</value>
  </data>
  <data name="OutputCachingStrategy_EtagExpression.Help" xml:space="preserve">
    <value>Define a custom Flee Expression to evaluated with an expression owner of type DnnContext.</value>
  </data>
  <data name="OutputCachingStrategy_EtagExpression.Text" xml:space="preserve">
    <value>Etag Expression</value>
  </data>
  <data name="OutputCachingStrategy_SetEtag.Help" xml:space="preserve">
    <value>Check to include a custom etag header to the Response.</value>
  </data>
  <data name="OutputCachingStrategy_SetEtag.Text" xml:space="preserve">
    <value>Set Etag</value>
  </data>
  <data name="OutputCachingStrategy_SetExpire.Help" xml:space="preserve">
    <value>Check to include an expiration header to the Response.</value>
  </data>
  <data name="OutputCachingStrategy_SetExpire.Text" xml:space="preserve">
    <value>Set Expiration</value>
  </data>
  <data name="OutputCachingStrategy_SetLastModified.Help" xml:space="preserve">
    <value>Check to include a last-modified header to the Response, set to the time of caching.</value>
  </data>
  <data name="OutputCachingStrategy_SetLastModified.Text" xml:space="preserve">
    <value>Set Last-Modified</value>
  </data>
  <data name="OutputCachingStrategy_SetValidUntilExpires.Help" xml:space="preserve">
    <value>Indicates that the server should ignore the cache-control client headers to invalidate the cache. </value>
  </data>
  <data name="OutputCachingStrategy_SetValidUntilExpires.Text" xml:space="preserve">
    <value>Set Valid Until Expire</value>
  </data>
  <data name="ActionProvider`1_RunDurationVarName.Required" xml:space="preserve">
    <value>Run Duration Variable Name Required</value>
  </data>
  <data name="CustomErrorInfo_Status.Help" xml:space="preserve">
    <value>This is the Http status code for that custom error.</value>
  </data>
  <data name="FirewallConfig_EnableRecoveryParams.Help" xml:space="preserve">
    <value>In order to prevent locking conditions while configuring the firewall, you can have secret strings, to be inserted in a portal url (typically in the querystring), to temporarily disable the firewall or restart the DNN instance</value>
  </data>
  <data name="FirewallConfig_EnableRecoveryParams.Text" xml:space="preserve">
    <value>Enable Recovery Params</value>
  </data>
  <data name="FirewallConfig_TechnicalSettings.Header" xml:space="preserve">
    <value>Technical Settings</value>
  </data>
  <data name="VirtualCustomErrorsInfo_DynamicHandlerType.Help" xml:space="preserve">
    <value>This is the type that will be registered to handle all errors.</value>
  </data>
  <data name="VirtualCustomErrorsInfo_DynamicHandlerType.Text" xml:space="preserve">
    <value>Dynamic Handler Type</value>
  </data>
  <data name="DotNetType_ArrayType.Help" xml:space="preserve">
    <value>Select the .Net Type to make an array from.</value>
  </data>
  <data name="DotNetType_ArrayType.Text" xml:space="preserve">
    <value>Array Type</value>
  </data>
  <data name="DotNetType_Rank.Help" xml:space="preserve">
    <value>Defines the number of dimensions of your array</value>
  </data>
  <data name="DotNetType_Rank.Text" xml:space="preserve">
    <value>Rank</value>
  </data>
  <data name="AdaptersRegistered.Message" xml:space="preserve">
    <value>Control Adapters were activated in the hosting environment. They will be automatically registered on subsequent application restarts.</value>
  </data>
  <data name="ControlAdaptersConfig_RegisterAdapters.Text" xml:space="preserve">
    <value>Renew Control Adapters Registration</value>
  </data>
  <data name="RestServicesRegistered.Message" xml:space="preserve">
    <value>Rest Services were activated in the hosting environment. They will be automatically registered on subsequent application restarts.</value>
  </data>
  <data name="RestServicesSettings_RegisterRestServices.Text" xml:space="preserve">
    <value>Renew Rest Services Registration</value>
  </data>
  <data name="DynamicControllerInfo_RegisteredRoutes.Help" xml:space="preserve">
    <value>This is a list of Routes found to match your controller in the registered Web API configuration.</value>
  </data>
  <data name="DynamicControllerInfo_RegisteredRoutes.Text" xml:space="preserve">
    <value>Registered Routes</value>
  </data>
  <data name="HttpHandlerSettings_StaticHandlerName.Help" xml:space="preserve">
    <value>Enter a friendly name and a description for your handler, additionally to the web.config name provided above.</value>
  </data>
  <data name="HttpHandlerSettings_StaticHandlerName.Text" xml:space="preserve">
    <value>Friendly Name</value>
  </data>
  <data name="XPathInfo_DefaultNamespacePrefix.Help" xml:space="preserve">
    <value>If the Xml document declares a custom default namespace, you will need to declare a custom prefix here instead and use it in your xpath expression, (see https://msdn.microsoft.com/en-us/library/e5t11tzt.aspx for more details)</value>
  </data>
  <data name="XPathInfo_DefaultNamespacePrefix.Text" xml:space="preserve">
    <value>Default Namespace Prefix</value>
  </data>
  <data name="XPathInfo_UseNamespaceManager.Help" xml:space="preserve">
    <value>If checked, an XPathNavigator will be explicitally created from the document root node rather than the document itself and an Xml Manager will be fed with the root namespaces to compile the XPath expression. </value>
  </data>
  <data name="XPathInfo_UseNamespaceManager.Text" xml:space="preserve">
    <value>Use Namespace Manager</value>
  </data>
  <data name="CdnStrategy_XPathQuery.Help" xml:space="preserve">
    <value>This query is evaluated against the outbound Html Document to select html tag attributes with Urls to be updated with the dedicated CDN Alias. The default query select images, stylesheets, scripts, and anchors with urls to resources below the /Portals/ folder.</value>
  </data>
  <data name="CdnStrategy_XPathQuery.Text" xml:space="preserve">
    <value>XPath Query</value>
  </data>
  <data name="SimpleOrSimpleExpression`1_Expression.Help" xml:space="preserve">
    <value>Enter below a Flee expression to be evaluated at runtime given a context owner, local and global variables, and static imports. Lookup the &lt;a href="http://flee.codeplex.com/wikipage?title=LanguageReference&amp;referringTitle=Home"&gt; language reference &lt;/a&gt; for more information.</value>
  </data>
  <data name="SimpleOrSimpleExpression`1_Expression.Text" xml:space="preserve">
    <value>Dynamic Expression</value>
  </data>
  <data name="BitRateModule.Text" xml:space="preserve">
    <value>IIS Bit Rate Throttling Module</value>
  </data>
  <data name="ManagedStream.Text" xml:space="preserve">
    <value>Managed Response Filter Stream</value>
  </data>
  <data name="OutputCachingStrategy_ToggleBandwidthThrottling.Help" xml:space="preserve">
    <value>You can choose to switch Bandwidth Throttling individually for that request regardless of the global web server settings. Throttling settings will be applied on the original cached response and subsequent responses generated from cache.</value>
  </data>
  <data name="OutputCachingStrategy_ToggleBandwidthThrottling.Text" xml:space="preserve">
    <value>Toggle Bandwidth Throttling</value>
  </data>
  <data name="OutputCachingStrategy_ToggleDynamicCompression.Help" xml:space="preserve">
    <value>You can choose to switch dynamic compression individually on or off for that request regardless of the global web server settings</value>
  </data>
  <data name="OutputCachingStrategy_ToggleDynamicCompression.Text" xml:space="preserve">
    <value>Toggle Dynamic Compression</value>
  </data>
  <data name="RequestsCapInfo_MeasureResponseSize.Help" xml:space="preserve">
    <value>You can optionally include Response size in the volume usage monitoring.</value>
  </data>
  <data name="RequestsCapInfo_MeasureResponseSize.Text" xml:space="preserve">
    <value>Measure Response Size</value>
  </data>
  <data name="ResponseThrottlerInfo_BlockSize.Help" xml:space="preserve">
    <value>Packets larger than BlockSize are splitted to make the throttling smoother</value>
  </data>
  <data name="ResponseThrottlerInfo_BlockSize.Text" xml:space="preserve">
    <value>Block Size</value>
  </data>
  <data name="ResponseThrottlerInfo_Disable.Help" xml:space="preserve">
    <value>This overrides the web server setting to disable bandwidth throttling for that particular request</value>
  </data>
  <data name="ResponseThrottlerInfo_Disable.Text" xml:space="preserve">
    <value>Disable Throttling</value>
  </data>
  <data name="ResponseThrottlerInfo_InitialSendSizeKB.Help" xml:space="preserve">
    <value>The initial send size, specified in kilobytes (KB), that is initially sent to the client at an unthrottled rate to provide the Fast Start experience</value>
  </data>
  <data name="ResponseThrottlerInfo_InitialSendSizeKB.Text" xml:space="preserve">
    <value>Initial Send Size (KB)</value>
  </data>
  <data name="ResponseThrottlerInfo_Mode.Help" xml:space="preserve">
    <value>There are 2 modes available. You can attached a managed throttling Filter Stream to the Http Response or manipulate Server variables to leverage the Bit Rate Throttling Module, which can be installed as an IIS extension (http://www.iis.net/downloads/microsoft/bit-rate-throttling). </value>
  </data>
  <data name="ResponseThrottlerInfo_Mode.Text" xml:space="preserve">
    <value>Throttling Mode</value>
  </data>
  <data name="ResponseThrottlerInfo_RateKBs.Help" xml:space="preserve">
    <value>The throttle rate, specified in kilobytes per second (KBps), at which the response will be throttled after any specified Fast Start burst is delivered.</value>
  </data>
  <data name="ResponseThrottlerInfo_RateKBs.Text" xml:space="preserve">
    <value>Rate (KB/s)</value>
  </data>
  <data name="EmptySelectedFolder.Message" xml:space="preserve">
    <value>Selected folder is empty</value>
  </data>
  <data name="ModelBinderAttribute_BinderType.Help" xml:space="preserve">
    <value>Select a Type that resolves to a IModelBinder </value>
  </data>
  <data name="ModelBinderAttribute_BinderType.Text" xml:space="preserve">
    <value>Binder Type</value>
  </data>
  <data name="CircularReferenceHidden.Message" xml:space="preserve">
    <value>Entity from a Circular Reference was hidden</value>
  </data>
  <data name="MethodName.NullSelect" xml:space="preserve">
    <value>&lt;-- Select a Method --&gt;</value>
  </data>
  <data name="NullEntityHidden.Message" xml:space="preserve">
    <value>Null Entity was hidden</value>
  </data>
  <data name="KeeperObjectAction`1_SetHandlerEvent.Help" xml:space="preserve">
    <value>The action context might be at a later unknown step when the event is fired. Check to define a custom temporary step set before the action sequence is executed.</value>
  </data>
  <data name="KeeperObjectAction`1_SetHandlerEvent.Text" xml:space="preserve">
    <value>Set Handler event Step</value>
  </data>
  <data name="KeeperRule`1_LateRunEvent.Help" xml:space="preserve">
    <value>You can postpone the rule actions evaluation as a whole, or you can also do that individually for each action.</value>
  </data>
  <data name="KeeperRule`1_LateRunEvent.Text" xml:space="preserve">
    <value>Run Step later than Evaluation step</value>
  </data>
  <data name="KeeperRule`1_RunLifeCycleEvent.Help" xml:space="preserve">
    <value>This is when the rule's actions will be effectively run, according to the previous parameters.</value>
  </data>
  <data name="KeeperRule`1_RunLifeCycleEvent.Text" xml:space="preserve">
    <value>Effective Run Step</value>
  </data>
  <data name="ReleaseRequestState.Text" xml:space="preserve">
    <value>Release Request State</value>
  </data>
  <data name="StringTransformInfo_CallBack.Help" xml:space="preserve">
    <value>Enter an expression that evaluate to a MatchEvaluator function. Use an EventBasedMatchEvaluator isntance for an easy event based implementation.</value>
  </data>
  <data name="StringTransformInfo_CallBack.Text" xml:space="preserve">
    <value>MatchEvaluator Expression</value>
  </data>
  <data name="StringTransformInfo_EmptyReplace.Help" xml:space="preserve">
    <value>Check to supply an empty string as replace value</value>
  </data>
  <data name="StringTransformInfo_EmptyReplace.Text" xml:space="preserve">
    <value>Empty Replace</value>
  </data>
  <data name="StringTransformInfo_UseCallBack.Help" xml:space="preserve">
    <value>Instead of using a static regex replace pattern, you can provide a callback function with signature of delegate MatchEvaluator, to process each match dynamically</value>
  </data>
  <data name="StringTransformInfo_UseCallBack.Text" xml:space="preserve">
    <value>Use Dynamic callback</value>
  </data>
  <data name="TokenSourceInfo_TokenVariables.Help" xml:space="preserve">
    <value>You can define a list of dynamic variables, to be registered with their name as prefix, and their submembers available as suffixes.</value>
  </data>
  <data name="TokenSourceInfo_TokenVariables.Text" xml:space="preserve">
    <value>Token Variables</value>
  </data>
  <data name="Atom.Text" xml:space="preserve">
    <value>Atom</value>
  </data>
  <data name="CustomTypeReset.Alert" xml:space="preserve">
    <value>Resetting will attempt to recompile a new custom Type with actualised variable-deriverd properties</value>
  </data>
  <data name="DotNetType_CustomObject.Help" xml:space="preserve">
    <value>Enter a list of variables to define the properties of your custom type with default values.</value>
  </data>
  <data name="DotNetType_CustomObject.Text" xml:space="preserve">
    <value>Custom Object</value>
  </data>
  <data name="DotNetType_CustomTypeIdentifier.Help" xml:space="preserve">
    <value>You can let the compiler pick an arbitrary name for your type, or define a Name explicitely</value>
  </data>
  <data name="DotNetType_CustomTypeIdentifier.Text" xml:space="preserve">
    <value>Name Custom Type</value>
  </data>
  <data name="DotNetType_PickerMode.Help" xml:space="preserve">
    <value>There are 2 ways to pick a .Net, you can either select an existing type using the supplied selectors, or you can build a custom object type from a sample object defined by its Properties with default values.</value>
  </data>
  <data name="DotNetType_PickerMode.Text" xml:space="preserve">
    <value>Type Picker Mode</value>
  </data>
  <data name="DotNetType_ResetCustomType.Text" xml:space="preserve">
    <value>Reset Custom Type</value>
  </data>
  <data name="FeedQueryInfo_Author.Help" xml:space="preserve">
    <value>the requested author name or email</value>
  </data>
  <data name="FeedQueryInfo_Author.Text" xml:space="preserve">
    <value>Author</value>
  </data>
  <data name="FeedQueryInfo_EndDate.Help" xml:space="preserve">
    <value>sets the maximum (inclusive) date/time value for the requested element</value>
  </data>
  <data name="FeedQueryInfo_EndDate.Text" xml:space="preserve">
    <value>End Date</value>
  </data>
  <data name="FeedQueryInfo_Etag.Help" xml:space="preserve">
    <value>the Etag value that should be used in the query. Setting this will create an if-match or if-not match header</value>
  </data>
  <data name="FeedQueryInfo_Etag.Text" xml:space="preserve">
    <value>Etag</value>
  </data>
  <data name="FeedQueryInfo_ExtraParameters.Help" xml:space="preserve">
    <value>ExtraParameters holds a string that just gets added to the query string per se. The parameter should honor URL encoding, the library will not touch its value, but just append it to the existing query. The URL parameter characters will be inserted by the FeedQuery object.</value>
  </data>
  <data name="FeedQueryInfo_ExtraParameters.Text" xml:space="preserve">
    <value>Extra Parameters</value>
  </data>
  <data name="FeedQueryInfo_FeedFormat.Help" xml:space="preserve">
    <value>One of the supported GData feed formats</value>
  </data>
  <data name="FeedQueryInfo_FeedFormat.Text" xml:space="preserve">
    <value>Feed Format</value>
  </data>
  <data name="FeedQueryInfo_MaxPublication.Help" xml:space="preserve">
    <value>sets the maximum (inclusive) publication date/time value for the requested element</value>
  </data>
  <data name="FeedQueryInfo_MaxPublication.Text" xml:space="preserve">
    <value>Max Publication</value>
  </data>
  <data name="FeedQueryInfo_MinPublication.Help" xml:space="preserve">
    <value>sets the mininum (inclusive) publication date/time value for the requested element</value>
  </data>
  <data name="FeedQueryInfo_MinPublication.Text" xml:space="preserve">
    <value>Min Publication</value>
  </data>
  <data name="FeedQueryInfo_ModifiedSince.Help" xml:space="preserve">
    <value>sets the ModifiedSince date. If this is set to something different than DateTime.MinValue, and the FeedQuery object is used for a Service.Query call, this will cause an ifmodified Since header to be created.</value>
  </data>
  <data name="FeedQueryInfo_ModifiedSince.Text" xml:space="preserve">
    <value>Modified Since</value>
  </data>
  <data name="FeedQueryInfo_NumberToRetrieve.Help" xml:space="preserve">
    <value>the number of entries to retrieve</value>
  </data>
  <data name="FeedQueryInfo_NumberToRetrieve.Text" xml:space="preserve">
    <value>Number to Retrieve</value>
  </data>
  <data name="FeedQueryInfo_Query.Help" xml:space="preserve">
    <value>Gets or Sets the q query string parameter of the feed query</value>
  </data>
  <data name="FeedQueryInfo_Query.Text" xml:space="preserve">
    <value>Query</value>
  </data>
  <data name="FeedQueryInfo_StartDate.Help" xml:space="preserve">
    <value>sets the mininum (inclusive) date/time value for the requested element</value>
  </data>
  <data name="FeedQueryInfo_StartDate.Text" xml:space="preserve">
    <value>Start Date</value>
  </data>
  <data name="FeedQueryInfo_StartIndex.Help" xml:space="preserve">
    <value>the start-index query parameter, a 1-based index indicating the first result to be retrieved.</value>
  </data>
  <data name="FeedQueryInfo_StartIndex.Text" xml:space="preserve">
    <value>Start Index</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_Query.Help" xml:space="preserve">
    <value>You can optionally add a series of filtering parameters to your query</value>
  </data>
  <data name="GoogleSpreadSheetActionProvider`1_Query.Text" xml:space="preserve">
    <value>Custom Query</value>
  </data>
  <data name="InstanceReset.Message" xml:space="preserve">
    <value>Instance was reset to be created again</value>
  </data>
  <data name="ListQueryInfo_OrderByColumn.Help" xml:space="preserve">
    <value>The header of the column to sort results by. Sets OrderByPosition to false. Important: The column name used in the orderby parameter is case sensitive and must match the name of the column as it appears in the API. The column names are the header values of the worksheet lowercased and with all non-alpha-numeric characters removed. For example, if the cell A1 contains the value "Time 2 Eat!" the column name would be "time2eat".</value>
  </data>
  <data name="ListQueryInfo_OrderByColumn.Text" xml:space="preserve">
    <value>Order by Column</value>
  </data>
  <data name="ListQueryInfo_OrderByPosition.Help" xml:space="preserve">
    <value>If true, then results will be ordered by the position in the spreadsheet. Sets OrderByColumn to null.</value>
  </data>
  <data name="ListQueryInfo_OrderByPosition.Text" xml:space="preserve">
    <value>Order by Position</value>
  </data>
  <data name="ListQueryInfo_Reverse.Help" xml:space="preserve">
    <value>If true, then however the results are ordered will be reversed.</value>
  </data>
  <data name="ListQueryInfo_Reverse.Text" xml:space="preserve">
    <value>Reverse</value>
  </data>
  <data name="ListQueryInfo_Specifics.Header" xml:space="preserve">
    <value>Specifics</value>
  </data>
  <data name="ListQueryInfo_SpreadsheetQuery.Help" xml:space="preserve">
    <value>A spreadsheet query string, if set to a non-null value, then the FullTextQuery will be set to null</value>
  </data>
  <data name="ListQueryInfo_SpreadsheetQuery.Text" xml:space="preserve">
    <value>Spreadsheet Query</value>
  </data>
  <data name="OpenSearchRss.Text" xml:space="preserve">
    <value>Open Search Rss</value>
  </data>
  <data name="ParametersCreated.Message" xml:space="preserve">
    <value>A set of named and typed Parameters was sucessfully initialized according to the selected method signature.</value>
  </data>
  <data name="QueryInfo_General.Header" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="Rss.Text" xml:space="preserve">
    <value>Rss</value>
  </data>
  <data name="SelectType.Text" xml:space="preserve">
    <value>Select .Net Type</value>
  </data>
  <data name="SignalLengths.Text" xml:space="preserve">
    <value>Signal Response Lengths</value>
  </data>
  <data name="TypeDictionaryConverter_CustomDictionaryToObject.Help" xml:space="preserve">
    <value>You can choose to define the building of the custom object explicitly in the form of a list of object variables making for the property names and corresponding typed values to be updated over a new instantiated object.</value>
  </data>
  <data name="TypeDictionaryConverter_CustomDictionaryToObject.Text" xml:space="preserve">
    <value>Custom To Object Conversion</value>
  </data>
  <data name="TypeDictionaryConverter_CustomDictionaryVariableName.Help" xml:space="preserve">
    <value>In order to build the property dictionary of typed values, the string dictionary is inserted in the available contextual variables with the following name.</value>
  </data>
  <data name="TypeDictionaryConverter_CustomDictionaryVariableName.Text" xml:space="preserve">
    <value>Custom Dictionary Variable Name</value>
  </data>
  <data name="TypeDictionaryConverter_CustomObjectToDictionary.Help" xml:space="preserve">
    <value>You can choose to define the building of the dictionary explicitly in the form of a list of string variables making for the keys and values to be inserted.</value>
  </data>
  <data name="TypeDictionaryConverter_CustomObjectToDictionary.Text" xml:space="preserve">
    <value>Custom To Dictionary Conversion</value>
  </data>
  <data name="TypeDictionaryConverter_CustomObjectVariableName.Help" xml:space="preserve">
    <value>In order to build the dictionary, the object is inserted in the available contextual variables with the following name.</value>
  </data>
  <data name="TypeDictionaryConverter_CustomObjectVariableName.Text" xml:space="preserve">
    <value>Custom Object Variable Name</value>
  </data>
  <data name="TypeDictionaryConverter_SelectedType.Help" xml:space="preserve">
    <value>This is the type to be converted to and from a dictionary of string, string by serializing its properties. </value>
  </data>
  <data name="TypeDictionaryConverter_SelectedType.Text" xml:space="preserve">
    <value>Target Type</value>
  </data>
  <data name="TypeReset.Message" xml:space="preserve">
    <value>Custom Type was reset to be Built again</value>
  </data>
  <data name="FeedQueryInfo_General.Header" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="AmbiguousAction.Message" xml:space="preserve">
    <value>Ambigous action selection for API call with URL {0} , controller "{1}" and action name "{2}"</value>
  </data>
  <data name="CreateHttpResponseInfo_CustomHttpHeaders.Help" xml:space="preserve">
    <value>You can optionally define custom http headers to return together with your http response. Define corresponding variables with key the http hreader name and value type either string or some enumerable of string depending whether the target http header accepts a value or a collection of values.</value>
  </data>
  <data name="CreateHttpResponseInfo_CustomHttpHeaders.Text" xml:space="preserve">
    <value>Custom Http Headers</value>
  </data>
  <data name="CulturePicker_CultureMode.Help" xml:space="preserve">
    <value>You can choose to pick an invariant, the current culture or to select a culture manually</value>
  </data>
  <data name="CulturePicker_CultureMode.Text" xml:space="preserve">
    <value>Culture Mode</value>
  </data>
  <data name="CulturePicker_CustomCulture.Help" xml:space="preserve">
    <value>Choose among the supported cultures</value>
  </data>
  <data name="CulturePicker_CustomCulture.Text" xml:space="preserve">
    <value>Custom Culture</value>
  </data>
  <data name="DynamicControllerInfo_SpecificRoutes.Help" xml:space="preserve">
    <value>Those routes are registered at the controller level.</value>
  </data>
  <data name="DynamicControllerInfo_SpecificRoutes.Text" xml:space="preserve">
    <value>Controller Routes</value>
  </data>
  <data name="RestServicesSettings_GlobalRoutes.Help" xml:space="preserve">
    <value>Those are routes available to all services. Note that because of the way web API and DNN deal with routes, it is important that general purpose rules be registered after more specific rules to resolve ambiguities. Accordingly, those routes are registered at the end, and you should account for that when ordering your services, controllers and routes.</value>
  </data>
  <data name="RestServicesSettings_GlobalRoutes.Text" xml:space="preserve">
    <value>Global Routes</value>
  </data>
  <data name="TypeDictionaryConverter_CreateEmptyObjects.Help" xml:space="preserve">
    <value>Check if you want structured objects to be initialized from empty strings rather than set to null at deserialization time.</value>
  </data>
  <data name="TypeDictionaryConverter_CreateEmptyObjects.Text" xml:space="preserve">
    <value>Create Empty Objects</value>
  </data>
  <data name="TypeDictionaryConverter_InitializeLists.Help" xml:space="preserve">
    <value>For test purpose, you can also automatically add a single item to empty lists from empty strings.</value>
  </data>
  <data name="TypeDictionaryConverter_InitializeLists.Text" xml:space="preserve">
    <value>Initialize Lists</value>
  </data>
  <data name="TypeDictionaryConverter_ParsingCulture.Help" xml:space="preserve">
    <value>When converting typed properties to and from target strings, define what culture to use</value>
  </data>
  <data name="TypeDictionaryConverter_ParsingCulture.Text" xml:space="preserve">
    <value>Parsing Culture</value>
  </data>
  <data name="AddNew.Command.ToolTip" xml:space="preserve">
    <value>Adds a new item at the end of the collection. For dictionaries, a new key must be provided.</value>
  </data>
  <data name="BotFarmInfo`1_RunForcedBots.Text.ToolTip" xml:space="preserve">
    <value>Runs all bots with forced run enabled. Note that a bot can be disabled for scheduled execution and still included in forced runs. This is the most convenient way to develop and test your bots. Also note that user bots can still take over master bot execution if enabled. </value>
  </data>
  <data name="ClearItems.Command.ToolTip" xml:space="preserve">
    <value>Clears all items from the collection</value>
  </data>
  <data name="ControlAdaptersConfig_RegisterAdapters.Text.ToolTip" xml:space="preserve">
    <value>Clears the current state of registered adapters, to account for the last changes in the saved configuration.</value>
  </data>
  <data name="ControlAdapterSettings_DowngradeDynamicHandlers.Text.ToolTip" xml:space="preserve">
    <value>Transforms currently typed dynamic handlers to untyped counterparts, with less configuration assistance, but required in case of user control adapters for portability. If you have user control adapters, you should upgrade before editing, and downgrade before saving.</value>
  </data>
  <data name="ControlAdapterSettings_UpgradeDynamicHandlers.Text.ToolTip" xml:space="preserve">
    <value>Transforms currently untyped dynamic handlers to handlers tied to the adapted control type, with easier configuration capabilities. User controls, though, have types dynamically compiled at runtime and subject to changes. Accordingly, dynamic handlers for user control adapters should be downgraded for exports and to support future updates.</value>
  </data>
  <data name="Copy.Command.ToolTip" xml:space="preserve">
    <value>Copies the selected item(s). You can then paste them to a compatible collection elsewhere in the form. Note that if you don't have a paste button, then the collections are deemed incompatible.</value>
  </data>
  <data name="Delete.Command.ToolTip" xml:space="preserve">
    <value>Deletes the selected item from the collection.</value>
  </data>
  <data name="Disable.Command.ToolTip" xml:space="preserve">
    <value>Disables the selected item.</value>
  </data>
  <data name="Down.Command.ToolTip" xml:space="preserve">
    <value>Moves the selected item one down in the ordered collection.</value>
  </data>
  <data name="DynamicHandlersDowngraded.Message" xml:space="preserve">
    <value>Dynamic Handlers were downgraded to untyped Handlers. They are now safe for export to a new instance.</value>
  </data>
  <data name="DynamicHandlersUpgraded.Message" xml:space="preserve">
    <value>Dynamic Handlers were upgraded to typed Handlers. Don't forget to downgrade your path-defined Adapter handlers when finished editing.</value>
  </data>
  <data name="Enable.Command.ToolTip" xml:space="preserve">
    <value>Enables the selected item.</value>
  </data>
  <data name="Export.Command.ToolTip" xml:space="preserve">
    <value>Exports the selected item(s) to a file to be downloaded for offline usage.</value>
  </data>
  <data name="HttpHandlerSettings_AddTestFiddle.Text.ToolTip" xml:space="preserve">
    <value>Adds a set of predefined sub handlers, for html, js and css content to test your dynamic handler.</value>
  </data>
  <data name="Import.Command.ToolTip" xml:space="preserve">
    <value>Imports items from a previously exported file. Note that except for dictionaries, imported items will not overwrite existing items, it is up to you to do the clean up manually. Also, for dictionary items, if and only if a single item is imported, the currently selected key replaces the one found in the import file.</value>
  </data>
  <data name="ItemAdded.Message" xml:space="preserve">
    <value>An item was added at the end of the collection. Click the new row to edit its property, and don't forget to save your changes when you're done.</value>
  </data>
  <data name="ItemCopied.Message" xml:space="preserve">
    <value>The selected item was copied. You can paste and add it to a compatible collection somewhere else in the hierarchy.</value>
  </data>
  <data name="ItemDeleted.Message" xml:space="preserve">
    <value>The selected item was deleted from the collection. Don't forget to save your changes to apply your modifications.</value>
  </data>
  <data name="ItemOneDown.Message" xml:space="preserve">
    <value>Selected item was moved one down within the ordered collection. Don't forget to save your changes to apply your modifications.</value>
  </data>
  <data name="ItemOneUp.Message" xml:space="preserve">
    <value>Selected item was moved one up within the ordered collection. Don't forget to save your changes to apply your modifications.</value>
  </data>
  <data name="ItemsCleared.Message" xml:space="preserve">
    <value>The entire collection was cleared. Don't forget to save your changes to apply your modifications.</value>
  </data>
  <data name="ItemsCopied.Message" xml:space="preserve">
    <value>The collection was copied. You can paste and add it to a compatible collection somewhere else in the hierarchy. </value>
  </data>
  <data name="ItemsImported.Message" xml:space="preserve">
    <value>New items were read from the file and added to the collection. Don't forget to save your changes to apply your modifications.</value>
  </data>
  <data name="ItemsPasted.Message" xml:space="preserve">
    <value>The copied items were succesfully added to the collection</value>
  </data>
  <data name="ModuleConfig`2_Cancel.Text.ToolTip" xml:space="preserve">
    <value>Cancels all editing since last save and reloads the original form.</value>
  </data>
  <data name="ModuleConfig`2_ClearSingleton.Text.ToolTip" xml:space="preserve">
    <value>If Singleton is define in the configuration file settings for optimal performances, manual modification of the configuration file won't be detected (that's not the case with regular cache). Click here to reload the configuration from file at any point.</value>
  </data>
  <data name="ModuleConfig`2_Reset.Text.ToolTip" xml:space="preserve">
    <value>Resets to the default configuration. Note that all changes since installation will be lost. The default configuration file is available at the root of the Module installation folder.</value>
  </data>
  <data name="ModuleConfig`2_RestoreBackup.Text.ToolTip" xml:space="preserve">
    <value>Restores the selected backup configuration.</value>
  </data>
  <data name="ModuleConfig`2_Save.Text.ToolTip" xml:space="preserve">
    <value>Saves the entire configuration according to the storage settings in the top configuration file section. Note that no change is persisted until you click here, and you should not leave the page if you have modifications to save.</value>
  </data>
  <data name="ModuleConfig`2_SaveLocationSettings.Text.ToolTip" xml:space="preserve">
    <value>Saves your new configuration storage settings. and save the configuration file accordingly.</value>
  </data>
  <data name="Navigate.Command.ToolTip" xml:space="preserve">
    <value>Navigates to the corresponding entity with a dedicated link (click the accordion directly alternatively to browse locally with Ajax callbacks). The corresponding url can be bookmarked as a shortcut saving from having to navigate the hierarchy.</value>
  </data>
  <data name="RuleEngineSettings`1_ImportAvailableProviders.Text.ToolTip" xml:space="preserve">
    <value>Analyses all available .Net type to import available condition and action providers. </value>
  </data>
  <data name="SaveLocationSettings.Warning" xml:space="preserve">
    <value>This will change the configuration storage settings. Have you noted the new location of your configuration file? </value>
  </data>
  <data name="SubPathContainer_CloseSubEditor.Text.ToolTip" xml:space="preserve">
    <value>Removes the hierarchical browser and reloads the main configuration form.</value>
  </data>
  <data name="SubPathContainer_LevelUp.Text.ToolTip" xml:space="preserve">
    <value>Sets the hierarchical browser to the parent entity, one level up  the currently displayed entity.</value>
  </data>
  <data name="Up.Command.ToolTip" xml:space="preserve">
    <value>Moves the selected item one up in the ordered collection.</value>
  </data>
  <data name="XmlConfigElementInfo_Install.Text.ToolTip" xml:space="preserve">
    <value>Registered the corresponding Xml component in the main web.config application configuration file located at the root of your web application. This will trigger an application restart.</value>
  </data>
  <data name="XmlConfigElementInfo_Update.Text.ToolTip" xml:space="preserve">
    <value>Updates the corresponding registered Xml component in the main web.config configuration file.</value>
  </data>
  <data name="ItemDisabled.Message" xml:space="preserve">
    <value>Selected item was disabled. Don't forget to save your changes when finished editing.</value>
  </data>
  <data name="ItemEnabled.Message" xml:space="preserve">
    <value>Selected item was enabled. Don't forget to save your changes when finished editing.</value>
  </data>
  <data name="ManualRun.Message" xml:space="preserve">
    <value>Forced Bots successfully run. {0} bot(s) were run</value>
  </data>
  <data name="AutoLoginAction_CurrentAutoLoginInfo.Help" xml:space="preserve">
    <value>You can choose to manually enter login credentials, or use a system of encrypted tickets to be provided in the request.</value>
  </data>
  <data name="AutoLoginAction_CurrentAutoLoginInfo.Text" xml:space="preserve">
    <value>Automatic Login parameters</value>
  </data>
  <data name="XmlConfigElementInfo_Uninstall.Text.ToolTip" xml:space="preserve">
    <value>Uninstalls the corresponding xml nodes from the main application configuration file located at the root of your application. This will trigger an application restart.  </value>
  </data>
  <data name="ApplicationEnd.Text" xml:space="preserve">
    <value>Application End</value>
  </data>
  <data name="ApplicationSettings_EnableCriticalChangesHandler.Help" xml:space="preserve">
    <value>The notification of Application level critical file and directory changes, which triggers application restarts, can be pretty hard to diagnose. Check to hook into that system event to make that application event step available in the rules of the engine.</value>
  </data>
  <data name="ApplicationSettings_EnableCriticalChangesHandler.Text" xml:space="preserve">
    <value>Enable Critical Changes Handler</value>
  </data>
  <data name="ApplicationStart.Text" xml:space="preserve">
    <value>Application Start</value>
  </data>
  <data name="CriticalChange.Text" xml:space="preserve">
    <value>Critical Change</value>
  </data>
  <data name="LogTypeSelector.ADMIN_ALERT" xml:space="preserve">
    <value>ADMIN_ALERT</value>
  </data>
  <data name="LogTypeSelector.APPLICATION_END" xml:space="preserve">
    <value>APPLICATION_END</value>
  </data>
  <data name="LogTypeSelector.APPLICATION_SHUTTING_DOWN" xml:space="preserve">
    <value>APPLICATION_SHUTTING_DOWN</value>
  </data>
  <data name="LogTypeSelector.APPLICATION_START" xml:space="preserve">
    <value>APPLICATION_START</value>
  </data>
  <data name="LogTypeSelector.AUTHENTICATION_CREATED" xml:space="preserve">
    <value>AUTHENTICATION_CREATED</value>
  </data>
  <data name="LogTypeSelector.AUTHENTICATION_DELETED" xml:space="preserve">
    <value>AUTHENTICATION_DELETED</value>
  </data>
  <data name="LogTypeSelector.AUTHENTICATION_UPDATED" xml:space="preserve">
    <value>AUTHENTICATION_UPDATED</value>
  </data>
  <data name="LogTypeSelector.AUTHENTICATION_USER_CREATED" xml:space="preserve">
    <value>AUTHENTICATION_USER_CREATED</value>
  </data>
  <data name="LogTypeSelector.AUTHENTICATION_USER_DELETED" xml:space="preserve">
    <value>AUTHENTICATION_USER_DELETED</value>
  </data>
  <data name="LogTypeSelector.AUTHENTICATION_USER_UPDATED" xml:space="preserve">
    <value>AUTHENTICATION_USER_UPDATED</value>
  </data>
  <data name="LogTypeSelector.CACHE_DEPENDENCYCHANGED" xml:space="preserve">
    <value>CACHE_DEPENDENCYCHANGED</value>
  </data>
  <data name="LogTypeSelector.CACHE_ERROR" xml:space="preserve">
    <value>CACHE_ERROR</value>
  </data>
  <data name="LogTypeSelector.CACHE_EXPIRED" xml:space="preserve">
    <value>CACHE_EXPIRED</value>
  </data>
  <data name="LogTypeSelector.CACHE_OVERFLOW" xml:space="preserve">
    <value>CACHE_OVERFLOW</value>
  </data>
  <data name="LogTypeSelector.CACHE_REFRESH" xml:space="preserve">
    <value>CACHE_REFRESH</value>
  </data>
  <data name="LogTypeSelector.CACHE_REMOVED" xml:space="preserve">
    <value>CACHE_REMOVED</value>
  </data>
  <data name="LogTypeSelector.CACHE_UNDERUSED" xml:space="preserve">
    <value>CACHE_UNDERUSED</value>
  </data>
  <data name="LogTypeSelector.DEBUG" xml:space="preserve">
    <value>DEBUG</value>
  </data>
  <data name="LogTypeSelector.DESKTOPMODULEPERMISSION_CREATED" xml:space="preserve">
    <value>DESKTOPMODULEPERMISSION_CREATED</value>
  </data>
  <data name="LogTypeSelector.DESKTOPMODULEPERMISSION_DELETED" xml:space="preserve">
    <value>DESKTOPMODULEPERMISSION_DELETED</value>
  </data>
  <data name="LogTypeSelector.DESKTOPMODULEPERMISSION_UPDATED" xml:space="preserve">
    <value>DESKTOPMODULEPERMISSION_UPDATED</value>
  </data>
  <data name="LogTypeSelector.DESKTOPMODULE_CREATED" xml:space="preserve">
    <value>DESKTOPMODULE_CREATED</value>
  </data>
  <data name="LogTypeSelector.DESKTOPMODULE_DELETED" xml:space="preserve">
    <value>DESKTOPMODULE_DELETED</value>
  </data>
  <data name="LogTypeSelector.DESKTOPMODULE_UPDATED" xml:space="preserve">
    <value>DESKTOPMODULE_UPDATED</value>
  </data>
  <data name="LogTypeSelector.FOLDER_CREATED" xml:space="preserve">
    <value>FOLDER_CREATED</value>
  </data>
  <data name="LogTypeSelector.FOLDER_DELETED" xml:space="preserve">
    <value>FOLDER_DELETED</value>
  </data>
  <data name="LogTypeSelector.FOLDER_MOVED" xml:space="preserve">
    <value>FOLDER_MOVED</value>
  </data>
  <data name="LogTypeSelector.FOLDER_UPDATED" xml:space="preserve">
    <value>FOLDER_UPDATED</value>
  </data>
  <data name="LogTypeSelector.GENERAL_EXCEPTION" xml:space="preserve">
    <value>GENERAL_EXCEPTION</value>
  </data>
  <data name="LogTypeSelector.HOST_ALERT" xml:space="preserve">
    <value>HOST_ALERT</value>
  </data>
  <data name="LogTypeSelector.HOST_SETTING_CREATED" xml:space="preserve">
    <value>HOST_SETTING_CREATED</value>
  </data>
  <data name="LogTypeSelector.HOST_SETTING_DELETED" xml:space="preserve">
    <value>HOST_SETTING_DELETED</value>
  </data>
  <data name="LogTypeSelector.HOST_SETTING_UPDATED" xml:space="preserve">
    <value>HOST_SETTING_UPDATED</value>
  </data>
  <data name="LogTypeSelector.HOST_SQL_EXECUTED" xml:space="preserve">
    <value>HOST_SQL_EXECUTED</value>
  </data>
  <data name="LogTypeSelector.IP_LOGIN_BANNED" xml:space="preserve">
    <value>IP_LOGIN_BANNED</value>
  </data>
  <data name="LogTypeSelector.LANGUAGEPACK_CREATED" xml:space="preserve">
    <value>LANGUAGEPACK_CREATED</value>
  </data>
  <data name="LogTypeSelector.LANGUAGEPACK_DELETED" xml:space="preserve">
    <value>LANGUAGEPACK_DELETED</value>
  </data>
  <data name="LogTypeSelector.LANGUAGEPACK_UPDATED" xml:space="preserve">
    <value>LANGUAGEPACK_UPDATED</value>
  </data>
  <data name="LogTypeSelector.LANGUAGETOPORTAL_CREATED" xml:space="preserve">
    <value>LANGUAGETOPORTAL_CREATED</value>
  </data>
  <data name="LogTypeSelector.LANGUAGETOPORTAL_DELETED" xml:space="preserve">
    <value>LANGUAGETOPORTAL_DELETED</value>
  </data>
  <data name="LogTypeSelector.LANGUAGETOPORTAL_UPDATED" xml:space="preserve">
    <value>LANGUAGETOPORTAL_UPDATED</value>
  </data>
  <data name="LogTypeSelector.LANGUAGE_CREATED" xml:space="preserve">
    <value>LANGUAGE_CREATED</value>
  </data>
  <data name="LogTypeSelector.LANGUAGE_DELETED" xml:space="preserve">
    <value>LANGUAGE_DELETED</value>
  </data>
  <data name="LogTypeSelector.LANGUAGE_UPDATED" xml:space="preserve">
    <value>LANGUAGE_UPDATED</value>
  </data>
  <data name="LogTypeSelector.LIBRARY_UPDATED" xml:space="preserve">
    <value>LIBRARY_UPDATED</value>
  </data>
  <data name="LogTypeSelector.LISTENTRY_CREATED" xml:space="preserve">
    <value>LISTENTRY_CREATED</value>
  </data>
  <data name="LogTypeSelector.LISTENTRY_DELETED" xml:space="preserve">
    <value>LISTENTRY_DELETED</value>
  </data>
  <data name="LogTypeSelector.LISTENTRY_UPDATED" xml:space="preserve">
    <value>LISTENTRY_UPDATED</value>
  </data>
  <data name="LogTypeSelector.LOGIN_FAILURE" xml:space="preserve">
    <value>LOGIN_FAILURE</value>
  </data>
  <data name="LogTypeSelector.LOGIN_SUCCESS" xml:space="preserve">
    <value>LOGIN_SUCCESS</value>
  </data>
  <data name="LogTypeSelector.LOGIN_SUPERUSER" xml:space="preserve">
    <value>LOGIN_SUPERUSER</value>
  </data>
  <data name="LogTypeSelector.LOGIN_USERLOCKEDOUT" xml:space="preserve">
    <value>LOGIN_USERLOCKEDOUT</value>
  </data>
  <data name="LogTypeSelector.LOGIN_USERNOTAPPROVED" xml:space="preserve">
    <value>LOGIN_USERNOTAPPROVED</value>
  </data>
  <data name="LogTypeSelector.LOG_NOTIFICATION_FAILURE" xml:space="preserve">
    <value>LOG_NOTIFICATION_FAILURE</value>
  </data>
  <data name="LogTypeSelector.MODULE_CREATED" xml:space="preserve">
    <value>MODULE_CREATED</value>
  </data>
  <data name="LogTypeSelector.MODULE_DELETED" xml:space="preserve">
    <value>MODULE_DELETED</value>
  </data>
  <data name="LogTypeSelector.MODULE_LOAD_EXCEPTION" xml:space="preserve">
    <value>MODULE_LOAD_EXCEPTION</value>
  </data>
  <data name="LogTypeSelector.MODULE_RESTORED" xml:space="preserve">
    <value>MODULE_RESTORED</value>
  </data>
  <data name="LogTypeSelector.MODULE_SENT_TO_RECYCLE_BIN" xml:space="preserve">
    <value>MODULE_SENT_TO_RECYCLE_BIN</value>
  </data>
  <data name="LogTypeSelector.MODULE_SETTING_CREATED" xml:space="preserve">
    <value>MODULE_SETTING_CREATED</value>
  </data>
  <data name="LogTypeSelector.MODULE_SETTING_DELETED" xml:space="preserve">
    <value>MODULE_SETTING_DELETED</value>
  </data>
  <data name="LogTypeSelector.MODULE_SETTING_UPDATED" xml:space="preserve">
    <value>MODULE_SETTING_UPDATED</value>
  </data>
  <data name="LogTypeSelector.MODULE_UPDATED" xml:space="preserve">
    <value>MODULE_UPDATED</value>
  </data>
  <data name="LogTypeSelector.PACKAGE_CREATED" xml:space="preserve">
    <value>PACKAGE_CREATED</value>
  </data>
  <data name="LogTypeSelector.PACKAGE_DELETED" xml:space="preserve">
    <value>PACKAGE_DELETED</value>
  </data>
  <data name="LogTypeSelector.PACKAGE_UPDATED" xml:space="preserve">
    <value>PACKAGE_UPDATED</value>
  </data>
  <data name="LogTypeSelector.PAGE_LOAD_EXCEPTION" xml:space="preserve">
    <value>PAGE_LOAD_EXCEPTION</value>
  </data>
  <data name="LogTypeSelector.PAGE_NOT_FOUND_404" xml:space="preserve">
    <value>PAGE_NOT_FOUND_404</value>
  </data>
  <data name="LogTypeSelector.PASSWORD_SENT_FAILURE" xml:space="preserve">
    <value>PASSWORD_SENT_FAILURE</value>
  </data>
  <data name="LogTypeSelector.PASSWORD_SENT_SUCCESS" xml:space="preserve">
    <value>PASSWORD_SENT_SUCCESS</value>
  </data>
  <data name="LogTypeSelector.PERMISSION_CREATED" xml:space="preserve">
    <value>PERMISSION_CREATED</value>
  </data>
  <data name="LogTypeSelector.PERMISSION_DELETED" xml:space="preserve">
    <value>PERMISSION_DELETED</value>
  </data>
  <data name="LogTypeSelector.PERMISSION_UPDATED" xml:space="preserve">
    <value>PERMISSION_UPDATED</value>
  </data>
  <data name="LogTypeSelector.PORTALALIAS_CREATED" xml:space="preserve">
    <value>PORTALALIAS_CREATED</value>
  </data>
  <data name="LogTypeSelector.PORTALALIAS_DELETED" xml:space="preserve">
    <value>PORTALALIAS_DELETED</value>
  </data>
  <data name="LogTypeSelector.PORTALALIAS_UPDATED" xml:space="preserve">
    <value>PORTALALIAS_UPDATED</value>
  </data>
  <data name="LogTypeSelector.PORTALDESKTOPMODULE_CREATED" xml:space="preserve">
    <value>PORTALDESKTOPMODULE_CREATED</value>
  </data>
  <data name="LogTypeSelector.PORTALDESKTOPMODULE_DELETED" xml:space="preserve">
    <value>PORTALDESKTOPMODULE_DELETED</value>
  </data>
  <data name="LogTypeSelector.PORTALDESKTOPMODULE_UPDATED" xml:space="preserve">
    <value>PORTALDESKTOPMODULE_UPDATED</value>
  </data>
  <data name="LogTypeSelector.PORTALINFO_CREATED" xml:space="preserve">
    <value>PORTALINFO_CREATED</value>
  </data>
  <data name="LogTypeSelector.PORTALINFO_DELETED" xml:space="preserve">
    <value>PORTALINFO_DELETED</value>
  </data>
  <data name="LogTypeSelector.PORTALINFO_UPDATED" xml:space="preserve">
    <value>PORTALINFO_UPDATED</value>
  </data>
  <data name="LogTypeSelector.PORTAL_CREATED" xml:space="preserve">
    <value>PORTAL_CREATED</value>
  </data>
  <data name="LogTypeSelector.PORTAL_DELETED" xml:space="preserve">
    <value>PORTAL_DELETED</value>
  </data>
  <data name="LogTypeSelector.PORTAL_SETTING_CREATED" xml:space="preserve">
    <value>PORTAL_SETTING_CREATED</value>
  </data>
  <data name="LogTypeSelector.PORTAL_SETTING_DELETED" xml:space="preserve">
    <value>PORTAL_SETTING_DELETED</value>
  </data>
  <data name="LogTypeSelector.PORTAL_SETTING_UPDATED" xml:space="preserve">
    <value>PORTAL_SETTING_UPDATED</value>
  </data>
  <data name="LogTypeSelector.POTENTIAL_PAYPAL_PAYMENT_FRAUD" xml:space="preserve">
    <value>POTENTIAL_PAYPAL_PAYMENT_FRAUD</value>
  </data>
  <data name="LogTypeSelector.PROFILEPROPERTY_CREATED" xml:space="preserve">
    <value>PROFILEPROPERTY_CREATED</value>
  </data>
  <data name="LogTypeSelector.PROFILEPROPERTY_DELETED" xml:space="preserve">
    <value>PROFILEPROPERTY_DELETED</value>
  </data>
  <data name="LogTypeSelector.PROFILEPROPERTY_UPDATED" xml:space="preserve">
    <value>PROFILEPROPERTY_UPDATED</value>
  </data>
  <data name="LogTypeSelector.ROLE_CREATED" xml:space="preserve">
    <value>ROLE_CREATED</value>
  </data>
  <data name="LogTypeSelector.ROLE_DELETED" xml:space="preserve">
    <value>ROLE_DELETED</value>
  </data>
  <data name="LogTypeSelector.ROLE_UPDATED" xml:space="preserve">
    <value>ROLE_UPDATED</value>
  </data>
  <data name="LogTypeSelector.SCHEDULER_EVENT_COMPLETED" xml:space="preserve">
    <value>SCHEDULER_EVENT_COMPLETED</value>
  </data>
  <data name="LogTypeSelector.SCHEDULER_EVENT_FAILURE" xml:space="preserve">
    <value>SCHEDULER_EVENT_FAILURE</value>
  </data>
  <data name="LogTypeSelector.SCHEDULER_EVENT_PROGRESSING" xml:space="preserve">
    <value>SCHEDULER_EVENT_PROGRESSING</value>
  </data>
  <data name="LogTypeSelector.SCHEDULER_EVENT_STARTED" xml:space="preserve">
    <value>SCHEDULER_EVENT_STARTED</value>
  </data>
  <data name="LogTypeSelector.SCHEDULER_EXCEPTION" xml:space="preserve">
    <value>SCHEDULER_EXCEPTION</value>
  </data>
  <data name="LogTypeSelector.SCHEDULER_SHUTTING_DOWN" xml:space="preserve">
    <value>SCHEDULER_SHUTTING_DOWN</value>
  </data>
  <data name="LogTypeSelector.SCHEDULER_STARTED" xml:space="preserve">
    <value>SCHEDULER_STARTED</value>
  </data>
  <data name="LogTypeSelector.SCHEDULER_STOPPED" xml:space="preserve">
    <value>SCHEDULER_STOPPED</value>
  </data>
  <data name="LogTypeSelector.SCHEDULE_CREATED" xml:space="preserve">
    <value>SCHEDULE_CREATED</value>
  </data>
  <data name="LogTypeSelector.SCHEDULE_DELETED" xml:space="preserve">
    <value>SCHEDULE_DELETED</value>
  </data>
  <data name="LogTypeSelector.SCHEDULE_FIRED_FROM_EVENT" xml:space="preserve">
    <value>SCHEDULE_FIRED_FROM_EVENT</value>
  </data>
  <data name="LogTypeSelector.SCHEDULE_UPDATED" xml:space="preserve">
    <value>SCHEDULE_UPDATED</value>
  </data>
  <data name="LogTypeSelector.SCRIPT_COLLISION" xml:space="preserve">
    <value>SCRIPT_COLLISION</value>
  </data>
  <data name="LogTypeSelector.SEARCH_INDEXER_EXCEPTION" xml:space="preserve">
    <value>SEARCH_INDEXER_EXCEPTION</value>
  </data>
  <data name="LogTypeSelector.SKINCONTROL_CREATED" xml:space="preserve">
    <value>SKINCONTROL_CREATED</value>
  </data>
  <data name="LogTypeSelector.SKINCONTROL_DELETED" xml:space="preserve">
    <value>SKINCONTROL_DELETED</value>
  </data>
  <data name="LogTypeSelector.SKINCONTROL_UPDATED" xml:space="preserve">
    <value>SKINCONTROL_UPDATED</value>
  </data>
  <data name="LogTypeSelector.SKINPACKAGE_CREATED" xml:space="preserve">
    <value>SKINPACKAGE_CREATED</value>
  </data>
  <data name="LogTypeSelector.SKINPACKAGE_DELETED" xml:space="preserve">
    <value>SKINPACKAGE_DELETED</value>
  </data>
  <data name="LogTypeSelector.SKINPACKAGE_UPDATED" xml:space="preserve">
    <value>SKINPACKAGE_UPDATED</value>
  </data>
  <data name="LogTypeSelector.TABMODULE_CREATED" xml:space="preserve">
    <value>TABMODULE_CREATED</value>
  </data>
  <data name="LogTypeSelector.TABMODULE_DELETED" xml:space="preserve">
    <value>TABMODULE_DELETED</value>
  </data>
  <data name="LogTypeSelector.TABMODULE_SETTING_CREATED" xml:space="preserve">
    <value>TABMODULE_SETTING_CREATED</value>
  </data>
  <data name="LogTypeSelector.TABMODULE_SETTING_DELETED" xml:space="preserve">
    <value>TABMODULE_SETTING_DELETED</value>
  </data>
  <data name="LogTypeSelector.TABMODULE_SETTING_UPDATED" xml:space="preserve">
    <value>TABMODULE_SETTING_UPDATED</value>
  </data>
  <data name="LogTypeSelector.TABMODULE_UPDATED" xml:space="preserve">
    <value>TABMODULE_UPDATED</value>
  </data>
  <data name="LogTypeSelector.TABPERMISSION_CREATED" xml:space="preserve">
    <value>TABPERMISSION_CREATED</value>
  </data>
  <data name="LogTypeSelector.TABPERMISSION_DELETED" xml:space="preserve">
    <value>TABPERMISSION_DELETED</value>
  </data>
  <data name="LogTypeSelector.TABPERMISSION_UPDATED" xml:space="preserve">
    <value>TABPERMISSION_UPDATED</value>
  </data>
  <data name="LogTypeSelector.TABURL_CREATED" xml:space="preserve">
    <value>TABURL_CREATED</value>
  </data>
  <data name="LogTypeSelector.TABURL_DELETED" xml:space="preserve">
    <value>TABURL_DELETED</value>
  </data>
  <data name="LogTypeSelector.TABURL_UPDATED" xml:space="preserve">
    <value>TABURL_UPDATED</value>
  </data>
  <data name="LogTypeSelector.TAB_CREATED" xml:space="preserve">
    <value>TAB_CREATED</value>
  </data>
  <data name="LogTypeSelector.TAB_DELETED" xml:space="preserve">
    <value>TAB_DELETED</value>
  </data>
  <data name="LogTypeSelector.TAB_ORDER_UPDATED" xml:space="preserve">
    <value>TAB_ORDER_UPDATED</value>
  </data>
  <data name="LogTypeSelector.TAB_RESTORED" xml:space="preserve">
    <value>TAB_RESTORED</value>
  </data>
  <data name="LogTypeSelector.TAB_SENT_TO_RECYCLE_BIN" xml:space="preserve">
    <value>TAB_SENT_TO_RECYCLE_BIN</value>
  </data>
  <data name="LogTypeSelector.TAB_UPDATED" xml:space="preserve">
    <value>TAB_UPDATED</value>
  </data>
  <data name="LogTypeSelector.USER_CREATED" xml:space="preserve">
    <value>USER_CREATED</value>
  </data>
  <data name="LogTypeSelector.USER_DELETED" xml:space="preserve">
    <value>USER_DELETED</value>
  </data>
  <data name="LogTypeSelector.USER_IMPERSONATED" xml:space="preserve">
    <value>USER_IMPERSONATED</value>
  </data>
  <data name="LogTypeSelector.USER_REMOVED" xml:space="preserve">
    <value>USER_REMOVED</value>
  </data>
  <data name="LogTypeSelector.USER_RESTORED" xml:space="preserve">
    <value>USER_RESTORED</value>
  </data>
  <data name="LogTypeSelector.USER_ROLE_CREATED" xml:space="preserve">
    <value>USER_ROLE_CREATED</value>
  </data>
  <data name="LogTypeSelector.USER_ROLE_DELETED" xml:space="preserve">
    <value>USER_ROLE_DELETED</value>
  </data>
  <data name="LogTypeSelector.USER_ROLE_UPDATED" xml:space="preserve">
    <value>USER_ROLE_UPDATED</value>
  </data>
  <data name="LogTypeSelector.USER_UPDATED" xml:space="preserve">
    <value>USER_UPDATED</value>
  </data>
  <data name="LogTypeSelector.WEBSERVER_CREATED" xml:space="preserve">
    <value>WEBSERVER_CREATED</value>
  </data>
  <data name="LogTypeSelector.WEBSERVER_DISABLED" xml:space="preserve">
    <value>WEBSERVER_DISABLED</value>
  </data>
  <data name="LogTypeSelector.WEBSERVER_ENABLED" xml:space="preserve">
    <value>WEBSERVER_ENABLED</value>
  </data>
  <data name="LogTypeSelector.WEBSERVER_PINGFAILED" xml:space="preserve">
    <value>WEBSERVER_PINGFAILED</value>
  </data>
  <data name="LogTypeSelector.WEBSERVER_UPDATED" xml:space="preserve">
    <value>WEBSERVER_UPDATED</value>
  </data>
  <data name="PortalKeeperConfig_Application.Header" xml:space="preserve">
    <value>Application</value>
  </data>
  <data name="PortalKeeperConfig_ApplicationSettings.Help" xml:space="preserve">
    <value>Here you have application level settings and a rule engine that taps into the application start, application end, and optionally critical file change notification events.</value>
  </data>
  <data name="PortalKeeperConfig_ApplicationSettings.Text" xml:space="preserve">
    <value>Application Settings</value>
  </data>
  <data name="Cut.Command" xml:space="preserve">
    <value>Cut</value>
  </data>
  <data name="Cut.Command.ToolTip" xml:space="preserve">
    <value>Click to copy and remove that item to move it to a different collection</value>
  </data>
  <data name="ItemCut.Message" xml:space="preserve">
    <value>The selected item was cut. You can paste it in a new collection. Don't forget to save after you finished editing</value>
  </data>
  <data name="ItemsCut.Message" xml:space="preserve">
    <value>The selected items were cut. You can paste them in a new collection. Don't forget to save after you finished editing</value>
  </data>
  <data name="ApplicationSettings_Rules.Header" xml:space="preserve">
    <value>Runtime</value>
  </data>
  <data name="Paste.Command.Tooltip" xml:space="preserve">
    <value>Click to add your copied items to the current collection.</value>
  </data>
  <data name="CreateHttpResponseInfo_CustomTypeName.Help" xml:space="preserve">
    <value>Enter a name to be used while compiling your custom type</value>
  </data>
  <data name="CreateHttpResponseInfo_CustomTypeName.Text" xml:space="preserve">
    <value>Custom Type name</value>
  </data>
  <data name="AStar.Text" xml:space="preserve">
    <value>A Star</value>
  </data>
  <data name="BreadthFirst.Text" xml:space="preserve">
    <value>Breadth First</value>
  </data>
  <data name="CustomAlgorithm.Text" xml:space="preserve">
    <value>Custom Search Algorithm</value>
  </data>
  <data name="DepthFirst.Text" xml:space="preserve">
    <value>Depth First</value>
  </data>
  <data name="DepthLimited.Text" xml:space="preserve">
    <value>Depth Limited</value>
  </data>
  <data name="EightPuzzle.Text" xml:space="preserve">
    <value>Eight Puzzle</value>
  </data>
  <data name="EntityKeyInfo_Application.Help" xml:space="preserve">
    <value>If your smart files belong to a common application scope, you can set your application name here</value>
  </data>
  <data name="EntityKeyInfo_Application.Text" xml:space="preserve">
    <value>Set Application Name</value>
  </data>
  <data name="EntityKeyInfo_Entity.Help" xml:space="preserve">
    <value>Sets the name of the entity that the smart file represent</value>
  </data>
  <data name="EntityKeyInfo_Entity.Text" xml:space="preserve">
    <value>Set Entity Name</value>
  </data>
  <data name="EntityKeyInfo_Field.Help" xml:space="preserve">
    <value>Sets the name of the entity field that the smart file represent</value>
  </data>
  <data name="EntityKeyInfo_Field.Text" xml:space="preserve">
    <value>Set Entity Field Name</value>
  </data>
  <data name="EntityKeyInfo_PortalId.Help" xml:space="preserve">
    <value>This defines the target portal root folder</value>
  </data>
  <data name="EntityKeyInfo_PortalId.Text" xml:space="preserve">
    <value>Set Portal Id</value>
  </data>
  <data name="EntityKeyInfo_UserName.Help" xml:space="preserve">
    <value>Sets the username of the user that smart file belongs to</value>
  </data>
  <data name="EntityKeyInfo_UserName.Text" xml:space="preserve">
    <value>Set User Name</value>
  </data>
  <data name="GeneralVariableInfo_SetForSave.Help" xml:space="preserve">
    <value>If checked, the corresponding smart file will be saved at the end of the action sequence where it is used.</value>
  </data>
  <data name="GeneralVariableInfo_SetForSave.Text" xml:space="preserve">
    <value>Set to Save</value>
  </data>
  <data name="GeneralVariableInfo_SmartFileKey.Help" xml:space="preserve">
    <value>Smart Files are stored with a path derived from a compound key that you can define here, either with static or dynamic values.</value>
  </data>
  <data name="GeneralVariableInfo_SmartFileKey.Text" xml:space="preserve">
    <value>File Key</value>
  </data>
  <data name="GeneralVariableInfo_StaticMemberType.Text" xml:space="preserve">
    <value>Static Member type</value>
  </data>
  <data name="GeneralVariableInfo_UseCustomFileSettings.Text" xml:space="preserve">
    <value>Smart File settings defining how to derive file path from entity key and whether to compress/encrypt are generally supplied globally, but you can override those settings here.</value>
  </data>
  <data name="GeneralVariableInfo`1_SubType.Help" xml:space="preserve">
    <value>You can choose to build your variable from a subtype to the target type.</value>
  </data>
  <data name="GeneralVariableInfo`1_SubType.Text" xml:space="preserve">
    <value>Sub Type</value>
  </data>
  <data name="GraphSearch.Text" xml:space="preserve">
    <value>Graph Search</value>
  </data>
  <data name="GreedyBestFirst.Text" xml:space="preserve">
    <value>Greedy Best First</value>
  </data>
  <data name="HillClimbing.Text" xml:space="preserve">
    <value>Hill Climbing</value>
  </data>
  <data name="IterativeDeepening.Text" xml:space="preserve">
    <value>Iterative Deepening</value>
  </data>
  <data name="KnownInformed.Text" xml:space="preserve">
    <value>Known Informed Search</value>
  </data>
  <data name="KnownUninformed.Text" xml:space="preserve">
    <value>Known Uninformed Search</value>
  </data>
  <data name="Manhattan.Text" xml:space="preserve">
    <value>Manhattan</value>
  </data>
  <data name="MisplacedTile.Text" xml:space="preserve">
    <value>Misplaced tiles</value>
  </data>
  <data name="NQueen.Text" xml:space="preserve">
    <value>N Queen</value>
  </data>
  <data name="ProblemInfo_GoalTest.Help" xml:space="preserve">
    <value>The goal test of a problem, which implements the corresponding interface, returns a a boolean to acknowledge if the state is a solution to the problem.</value>
  </data>
  <data name="ProblemInfo_GoalTest.Text" xml:space="preserve">
    <value>Goal Test</value>
  </data>
  <data name="ProblemInfo_HeuristicFunction.Help" xml:space="preserve">
    <value>Optionally a problem can define a Heuristic Function, which quantifies the search value of states.</value>
  </data>
  <data name="ProblemInfo_HeuristicFunction.Text" xml:space="preserve">
    <value>Heuristic Function</value>
  </data>
  <data name="ProblemInfo_StepCostFunction.Help" xml:space="preserve">
    <value>Optionally a problem can define a Step Cost Function, which gives the cost of a transition given a source state, an action and a resulting state.</value>
  </data>
  <data name="ProblemInfo_StepCostFunction.Text" xml:space="preserve">
    <value>Step Cost Function</value>
  </data>
  <data name="ProblemInfo_ActionsFunction.Help" xml:space="preserve">
    <value>The action function of a problem, which implements the corresponding interface, returns a list of possible actions  from a given state</value>
  </data>
  <data name="ProblemInfo_ActionsFunction.Text" xml:space="preserve">
    <value>Actions Function</value>
  </data>
  <data name="QueensToBePlaced.Text" xml:space="preserve">
    <value>Queens to be Placed</value>
  </data>
  <data name="RuleEngineSettings`1_SmartFileSettings.Help" xml:space="preserve">
    <value>Smart Files are serialized entities saved automatically within the DNN file system, and can be used withing the agent's actions. Define here the default settings for those Smart Files</value>
  </data>
  <data name="RuleEngineSettings`1_SmartFileSettings.Text" xml:space="preserve">
    <value>Smart File Settings</value>
  </data>
  <data name="SearchAgentInfo_InitialState.Help" xml:space="preserve">
    <value>This is the initial state to run the problem solver, in the form of custom object with memberwise equality and hashcode permitting comparison. </value>
  </data>
  <data name="SearchAgentInfo_InitialState.Text" xml:space="preserve">
    <value>Initial State</value>
  </data>
  <data name="SearchAgentInfo_Problem.Help" xml:space="preserve">
    <value>Given an environment with states to be searched, a problem defines legal actions with a successor function, success conditions with a goal test function, and optionally a step cost and a heuristic function to weight and guide space exploration.</value>
  </data>
  <data name="SearchAgentInfo_Problem.Text" xml:space="preserve">
    <value>Problem</value>
  </data>
  <data name="SearchAgentInfo_Search.Help" xml:space="preserve">
    <value>A Search agent will apply a search strategy over a problem, given an initial state. There are several known informed and uninformed strategies available, or a custom algorithm can be applied.</value>
  </data>
  <data name="SearchAgentInfo_Search.Text" xml:space="preserve">
    <value>Search Strategy</value>
  </data>
  <data name="SearchDemoInfo_EightPuzzleHeuristics.Text" xml:space="preserve">
    <value>Heuristic</value>
  </data>
  <data name="SearchDemoInfo_EightPuzzleInitialState.Text" xml:space="preserve">
    <value>Puzzle Initial State</value>
  </data>
  <data name="SearchDemoInfo_InitEigthPuzzleInitialState.Text" xml:space="preserve">
    <value>Init Puzzle</value>
  </data>
  <data name="SearchDemoInfo_NQueenBoardSize.Help" xml:space="preserve">
    <value>Choose the size N of the chess board where N Queen must be positionned</value>
  </data>
  <data name="SearchDemoInfo_NQueenBoardSize.Text" xml:space="preserve">
    <value>Board Size</value>
  </data>
  <data name="SearchDemoInfo_NQueensHeuristics.Text" xml:space="preserve">
    <value>Heuristic</value>
  </data>
  <data name="SearchDemoInfo_Selection.Help" xml:space="preserve">
    <value>Choose between available default problems</value>
  </data>
  <data name="SearchDemoInfo_Selection.Text" xml:space="preserve">
    <value>Problem Selection</value>
  </data>
  <data name="SearchDemoInfo_ShuffleEigthPuzzleInitialState.Text" xml:space="preserve">
    <value>Shuffle Puzzle</value>
  </data>
  <data name="SearchDemoInfo_EightPuzzleShuffleMoves.Help" xml:space="preserve">
    <value>Enter the number of moves to perform when shuffling</value>
  </data>
  <data name="SearchDemoInfo_EightPuzzleShuffleMoves.Text" xml:space="preserve">
    <value>Moves number</value>
  </data>
  <data name="SearchInfo_AlgorithmType.Help" xml:space="preserve">
    <value>You can choose to select a known search algorithm, informed or uninformed or to define a custom algorithm implementing the corresponding Search interface</value>
  </data>
  <data name="SearchInfo_AlgorithmType.Text" xml:space="preserve">
    <value>Algorithm Type</value>
  </data>
  <data name="SearchInfo_CustomSearchAlgorithm.Help" xml:space="preserve">
    <value>Use the following controls to build a object that implement the Search interface</value>
  </data>
  <data name="SearchInfo_CustomSearchAlgorithm.Text" xml:space="preserve">
    <value>Custom Search Algorithm</value>
  </data>
  <data name="SearchInfo_DepthLimit.Help" xml:space="preserve">
    <value>This is the maximum steps ahead to lookup for the depth limited algorithm</value>
  </data>
  <data name="SearchInfo_DepthLimit.Text" xml:space="preserve">
    <value>Depth Limit</value>
  </data>
  <data name="SearchInfo_KnownInformedAlgorithm.Help" xml:space="preserve">
    <value>Several implementations of known informed search algorithm are available for direct selection. They require the problem to offer an Heuristic in order to work properly.</value>
  </data>
  <data name="SearchInfo_KnownInformedAlgorithm.Text" xml:space="preserve">
    <value>Known Informed Algorithm</value>
  </data>
  <data name="SearchInfo_KnownUninformedAlgorithm.Help" xml:space="preserve">
    <value>Several implementations of known uninformed search algorithm are available for direct selection. They don't require a heuristic and only need a goal test function.</value>
  </data>
  <data name="SearchInfo_KnownUninformedAlgorithm.Text" xml:space="preserve">
    <value>Known Uninformed Algorithm</value>
  </data>
  <data name="SearchInfo_QueueSearchType.Help" xml:space="preserve">
    <value>You can choose between Graph search (default, no cycles allowed) and Tree search (cycles are not checked for)</value>
  </data>
  <data name="SearchInfo_QueueSearchType.Text" xml:space="preserve">
    <value>Queue Search type</value>
  </data>
  <data name="SimulatedAnnealing.Text" xml:space="preserve">
    <value>Simulated Annealing</value>
  </data>
  <data name="SmartFile.Text" xml:space="preserve">
    <value>Smart File</value>
  </data>
  <data name="StaticMember.Text" xml:space="preserve">
    <value>Static Member</value>
  </data>
  <data name="TreeSearch.Text" xml:space="preserve">
    <value>Tree Search</value>
  </data>
  <data name="AC3.Text" xml:space="preserve">
    <value>AC-3</value>
  </data>
  <data name="AlphaBeta.Text" xml:space="preserve">
    <value>AlphaBeta</value>
  </data>
  <data name="BacktrackingStrategy.Text" xml:space="preserve">
    <value>Backtracking</value>
  </data>
  <data name="Bidirectional.Text" xml:space="preserve">
    <value>Bidirectional</value>
  </data>
  <data name="CompleteState.Text" xml:space="preserve">
    <value>Complete State</value>
  </data>
  <data name="ConnectFour.Text" xml:space="preserve">
    <value>Connect Four</value>
  </data>
  <data name="ConnectFourIDAlphaBeta.Text" xml:space="preserve">
    <value>Connect Four Iterative Deepening Alpha Beta</value>
  </data>
  <data name="CSPInfo_CSP.Help" xml:space="preserve">
    <value>Enter a variable that resolves to a csp as defined by the corresponding .Net base class</value>
  </data>
  <data name="CSPInfo_CSP.Text" xml:space="preserve">
    <value>Constraint Satisfication Problem</value>
  </data>
  <data name="CSPInfo_Listeners.Header" xml:space="preserve">
    <value>State Listeners</value>
  </data>
  <data name="CSPInfo_Problem.Header" xml:space="preserve">
    <value>Problem</value>
  </data>
  <data name="CSPInfo_StateListeners.Help" xml:space="preserve">
    <value>Optionally define a list of state listeners to collect information during the CSP solving</value>
  </data>
  <data name="CSPInfo_StateListeners.Text" xml:space="preserve">
    <value>State Listeners</value>
  </data>
  <data name="CSPInfo_Strategy.Header" xml:space="preserve">
    <value>Strategy</value>
  </data>
  <data name="CSPInfo_Strategy.Help" xml:space="preserve">
    <value>Enter a variable that resolves to a csp Solution Strategy as defined by the corresponding .Net interface</value>
  </data>
  <data name="CSPInfo_Strategy.Text" xml:space="preserve">
    <value>Solution Strategy</value>
  </data>
  <data name="CSPStrategyInfo_EnableLCV.Help" xml:space="preserve">
    <value>optional heuristics to  order the domain values of variables rather that taking them in the natural domain order.</value>
  </data>
  <data name="CSPStrategyInfo_EnableLCV.Text" xml:space="preserve">
    <value>Least Constraining Value Heuristics </value>
  </data>
  <data name="CSPStrategyInfo_Inference.Help" xml:space="preserve">
    <value>Primitive operation, which tries to prune out values from the CSP which are not possible anymore when extending the given assignment to a solution. Several algorithm are available: Forward checking, AC-3 and None (domain compactification).</value>
  </data>
  <data name="CSPStrategyInfo_Inference.Text" xml:space="preserve">
    <value>Inference heuristic</value>
  </data>
  <data name="CSPStrategyInfo_MaxSteps.Help" xml:space="preserve">
    <value>Specifies the maximum steps of local search.</value>
  </data>
  <data name="CSPStrategyInfo_MaxSteps.Text" xml:space="preserve">
    <value>Max Steps</value>
  </data>
  <data name="CSPStrategyInfo_Selection.Help" xml:space="preserve">
    <value>several algorithms are available for selecting unassigned variables: minimum-remaining-values heuristic, degree heuristic, and default order (no heuristic)</value>
  </data>
  <data name="CSPStrategyInfo_Selection.Text" xml:space="preserve">
    <value>Selection heuristic</value>
  </data>
  <data name="CSPStrategyInfo_StrategyType.Text" xml:space="preserve">
    <value>CSP Strategy</value>
  </data>
  <data name="CSPStratetgyInfo_StrategyType.Help" xml:space="preserve">
    <value>The following  strategies for for constraint satisfaction problem are available: A simple backtracking algorithm modeled on the recursive depth-first search, an improved backpropagation strategy with several options for inference and selection and least constraint value, and a  MIN-CONFLICTS algorithm for solving CSPs by local search with a max number of steps.</value>
  </data>
  <data name="DefaultOrder.Text" xml:space="preserve">
    <value>Default Order</value>
  </data>
  <data name="DynamicConstraint_ConstraintExpression.Help" xml:space="preserve">
    <value>Define here an arbitrary Flee expression making use of the available variables. You must specify which variables are concerned by the contraint in the scope below.</value>
  </data>
  <data name="DynamicConstraint_ConstraintExpression.Text" xml:space="preserve">
    <value>Constraint Expression</value>
  </data>
  <data name="DynamicConstraint_Scope.Help" xml:space="preserve">
    <value>Explicitally enter the name of the variables within the constraint (even if the expression makes it obvious)</value>
  </data>
  <data name="DynamicConstraint_Scope.Text" xml:space="preserve">
    <value>Scope Variables</value>
  </data>
  <data name="DynamicCSPInfo_Constraints.Header" xml:space="preserve">
    <value>Constraints</value>
  </data>
  <data name="DynamicCSPInfo_Constraints.Help" xml:space="preserve">
    <value>Constraints are a list of conditions that the variables must meet. Dynamic constraints are made from expressions to be evaluated, together with the list of variables involved.</value>
  </data>
  <data name="DynamicCSPInfo_Constraints.Text" xml:space="preserve">
    <value>Constraints</value>
  </data>
  <data name="DynamicCSPInfo_Domains.Header" xml:space="preserve">
    <value>Domains</value>
  </data>
  <data name="DynamicCSPInfo_Domains.Help" xml:space="preserve">
    <value>Domains are sets of values that the variables can have. They are named and each variable must be assigned a domain. Any IEnumerable object can be assigned to a domain.</value>
  </data>
  <data name="DynamicCSPInfo_Domains.Text" xml:space="preserve">
    <value>Domains</value>
  </data>
  <data name="DynamicCSPInfo_VariableDomains.Help" xml:space="preserve">
    <value>When more than a domain is available, variable must have domains associated through a dictionary between variable names and domain names.</value>
  </data>
  <data name="DynamicCSPInfo_VariableDomains.Text" xml:space="preserve">
    <value>Variable domains</value>
  </data>
  <data name="DynamicCSPInfo_Variables.Header" xml:space="preserve">
    <value>Variables</value>
  </data>
  <data name="DynamicCSPInfo_Variables.Help" xml:space="preserve">
    <value>Variable are a list of items that can be labelled. simple types are directly converted to string</value>
  </data>
  <data name="DynamicCSPInfo_Variables.Text" xml:space="preserve">
    <value>Variables</value>
  </data>
  <data name="DynamicParameter_DefaultValue.Help" xml:space="preserve">
    <value>You can define a custom default value for your optional parameter.</value>
  </data>
  <data name="DynamicParameter_DefaultValue.Text" xml:space="preserve">
    <value>Default Value</value>
  </data>
  <data name="ForwardChecking.Text" xml:space="preserve">
    <value>Forward Checking</value>
  </data>
  <data name="GameAgentInfo_Game.Header" xml:space="preserve">
    <value>Game</value>
  </data>
  <data name="GameAgentInfo_Game.Text" xml:space="preserve">
    <value>Game</value>
  </data>
  <data name="GameAgentInfo_State.Header" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="GameAgentInfo_State.Text" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="GameAgentInfo_Strategy.Header" xml:space="preserve">
    <value>Strategy</value>
  </data>
  <data name="GameAgentInfo_Strategy.Text" xml:space="preserve">
    <value>Strategy</value>
  </data>
  <data name="GamesDemoInfo_Selection.Text" xml:space="preserve">
    <value>Selected Game</value>
  </data>
  <data name="GameStrategyInfo_MaxDurationSeconds.Text" xml:space="preserve">
    <value>Maximum Duration (s)</value>
  </data>
  <data name="GameStrategyInfo_MaxUtility.Text" xml:space="preserve">
    <value>Maximum Utility</value>
  </data>
  <data name="GameStrategyInfo_MinUtility.Text" xml:space="preserve">
    <value>Minimum Utility</value>
  </data>
  <data name="GameStrategyInfo_StrategyType.Text" xml:space="preserve">
    <value>Strategy Type</value>
  </data>
  <data name="ImprovedBacktrackingStrategy.Text" xml:space="preserve">
    <value>Improved Backtracking</value>
  </data>
  <data name="Incremental.Text" xml:space="preserve">
    <value>Incremental</value>
  </data>
  <data name="IterativeDeepeningAlphaBeta.Text" xml:space="preserve">
    <value>Iterative Deepening AlphaBeta</value>
  </data>
  <data name="MinConflictsStrategy.Text" xml:space="preserve">
    <value>Min Conflicts</value>
  </data>
  <data name="MiniMax.Text" xml:space="preserve">
    <value>MiniMax</value>
  </data>
  <data name="MRV.Text" xml:space="preserve">
    <value>Minimum Remaining Value</value>
  </data>
  <data name="MRVDeg.Text" xml:space="preserve">
    <value>MRV Degree</value>
  </data>
  <data name="ProblemInfo_ResultFunction.Help" xml:space="preserve">
    <value>A result function returns the resulting state given a start state and an action</value>
  </data>
  <data name="ProblemInfo_ResultFunction.Text" xml:space="preserve">
    <value>Result Function</value>
  </data>
  <data name="SearchAgentInfo_HeuristicFunction.Help" xml:space="preserve">
    <value>You can optionally provide a state scoring heuristic function to be used by informed search algorithms</value>
  </data>
  <data name="SearchAgentInfo_HeuristicFunction.Text" xml:space="preserve">
    <value>Heuristic Function</value>
  </data>
  <data name="SearchAgentInfo_InitialState.Header" xml:space="preserve">
    <value>Initial State</value>
  </data>
  <data name="SearchAgentInfo_Problem.Header" xml:space="preserve">
    <value>Problem</value>
  </data>
  <data name="SearchAgentInfo_Search.Header" xml:space="preserve">
    <value>Search Strategy</value>
  </data>
  <data name="SearchDemoInfo_NQueensActions.Help" xml:space="preserve">
    <value>There are 2 action functions, the complete state assumes exactly one queen in each column and provides all possible queen movements in vertical direction as actions, where as the iterative assumes that queens are placed column by column, starting with an empty board, and provides queen placing actions for all non-attacked positions of the first free column</value>
  </data>
  <data name="SearchDemoInfo_NQueensActions.Text" xml:space="preserve">
    <value>NQueen Action Function</value>
  </data>
  <data name="TicTacToe.Text" xml:space="preserve">
    <value>Tic Tac Toe</value>
  </data>
  <data name="UniformCost.Text" xml:space="preserve">
    <value>Uniform Cost</value>
  </data>
  <data name="StepCounter_AssignmentCount.Help" xml:space="preserve">
    <value>This is the number of variable assignment generated by the CSP solver</value>
  </data>
  <data name="StepCounter_AssignmentCount.Text" xml:space="preserve">
    <value>Assignment Count</value>
  </data>
  <data name="StepCounter_DomainCount.Help" xml:space="preserve">
    <value>This is the number of domain reduction operations generated by the CSP Solver</value>
  </data>
  <data name="StepCounter_DomainCount.Text" xml:space="preserve">
    <value>Domain Count</value>
  </data>
  <data name="CategorizationInfo_AllowPartialMatches.Help" xml:space="preserve">
    <value>Check if partial matched strings are allowed</value>
  </data>
  <data name="CategorizationInfo_AllowPartialMatches.Text" xml:space="preserve">
    <value>Allow Partial Matches</value>
  </data>
  <data name="CategorizationInfo_Categories.Header" xml:space="preserve">
    <value>Categories</value>
  </data>
  <data name="CategorizationInfo_DynamicCategories.Help" xml:space="preserve">
    <value>Categories can be defined as enumerated lists attached to key labels, or alternatively the lists can be obtained dynamically as expressions of string arrays</value>
  </data>
  <data name="CategorizationInfo_DynamicCategories.Text" xml:space="preserve">
    <value>Dynamic Categories</value>
  </data>
  <data name="CategorizationInfo_DynamicSubTree.Help" xml:space="preserve">
    <value>Dynamic categories are defined with key labels and variables resolving to string arrays</value>
  </data>
  <data name="CategorizationInfo_DynamicSubTree.Text" xml:space="preserve">
    <value>Dynamic Categories</value>
  </data>
  <data name="CategorizationInfo_NoCache.Help" xml:space="preserve">
    <value>Check this option If dynamic categories are to be computed each time (may be slow depending on the comparizon mode)</value>
  </data>
  <data name="CategorizationInfo_NoCache.Text" xml:space="preserve">
    <value>No Cache</value>
  </data>
  <data name="CategorizationInfo_RegexFormat.Help" xml:space="preserve">
    <value>Change the default untouched format to customize the individual components of the compound regex</value>
  </data>
  <data name="CategorizationInfo_RegexFormat.Text" xml:space="preserve">
    <value>Regex Format</value>
  </data>
  <data name="CategorizationInfo_RegexOptions.Help" xml:space="preserve">
    <value>Thos are the options used to build the compound regexes</value>
  </data>
  <data name="CategorizationInfo_RegexOptions.Text" xml:space="preserve">
    <value>Regex Options</value>
  </data>
  <data name="CategorizationInfo_Reverse.Help" xml:space="preserve">
    <value>Check if you want to reverse the strings composing the radix tree and the input strings to search</value>
  </data>
  <data name="CategorizationInfo_Reverse.Text" xml:space="preserve">
    <value>Reverse</value>
  </data>
  <data name="CompoundRegex.Text" xml:space="preserve">
    <value>Compound Regex</value>
  </data>
  <data name="FileEntries.Text" xml:space="preserve">
    <value>File Entries</value>
  </data>
  <data name="FileManagerActionProvider`1_GetFilesMode.Help" xml:space="preserve">
    <value>When searching for files, you can either return an array of file name strings, or a list of FileInfo entries</value>
  </data>
  <data name="FileManagerActionProvider`1_GetFilesMode.Text" xml:space="preserve">
    <value>Get Files Mode</value>
  </data>
  <data name="FileNames.Text" xml:space="preserve">
    <value>File Names</value>
  </data>
  <data name="KeeperRule`1_Run.Text" xml:space="preserve">
    <value>Run Now</value>
  </data>
  <data name="RadixTree.Text" xml:space="preserve">
    <value>Radix Tree</value>
  </data>
  <data name="RemoveEmptyEntries.Text" xml:space="preserve">
    <value>Remove empty entries</value>
  </data>
  <data name="RuleRunSuccess.Message" xml:space="preserve">
    <value>The selected rule was run without throwing exceptions.</value>
  </data>
  <data name="RunningRules.Alert" xml:space="preserve">
    <value>Warning: Running a rule on the fly with an empty execution context may fail depending on the rule's content.</value>
  </data>
  <data name="StringFilterProvider`1_Splitter.Help" xml:space="preserve">
    <value>Specify here how you want the input string split</value>
  </data>
  <data name="StringFilterProvider`1_Splitter.Text" xml:space="preserve">
    <value>String Splitter</value>
  </data>
  <data name="StringSplit.Text" xml:space="preserve">
    <value>Split string</value>
  </data>
  <data name="StringSplitInfo_EmptyEntries.Help" xml:space="preserve">
    <value>Check to remove empty entries</value>
  </data>
  <data name="StringSplitInfo_EmptyEntries.Text" xml:space="preserve">
    <value>Empty Options</value>
  </data>
  <data name="StringSplitInfo_FilterStrings.Help" xml:space="preserve">
    <value>Optionally apply a string filter on each string resulting from the split</value>
  </data>
  <data name="StringSplitInfo_FilterStrings.Text" xml:space="preserve">
    <value>Filter Strings</value>
  </data>
  <data name="StringSplitInfo_LineSplit.Help" xml:space="preserve">
    <value>If checked, the input string is split along line feeds</value>
  </data>
  <data name="StringSplitInfo_LineSplit.Text" xml:space="preserve">
    <value>Split Lines</value>
  </data>
  <data name="StringSplitInfo_ReturnList.Help" xml:space="preserve">
    <value>Check to return a list of string instead of the string array resulting from the original split</value>
  </data>
  <data name="StringSplitInfo_ReturnList.Text" xml:space="preserve">
    <value>Return List</value>
  </data>
  <data name="StringSplitInfo_Separators.Help" xml:space="preserve">
    <value>Enter one or several strings, along which to split the input string</value>
  </data>
  <data name="StringSplitInfo_Separators.Text" xml:space="preserve">
    <value>Separators</value>
  </data>
  <data name="CategorizationInfo_RegexNoEscape.Help" xml:space="preserve">
    <value>Check if the matching strings are already provided as an escaped regex pattern. By default, input strings will be escaped.</value>
  </data>
  <data name="CategorizationInfo_RegexNoEscape.Text" xml:space="preserve">
    <value>No Escaping</value>
  </data>
  <data name="ExpressionFilterInfo_Reverse.Help" xml:space="preserve">
    <value>Returns an inverted string</value>
  </data>
  <data name="ExpressionFilterInfo_Reverse.Text" xml:space="preserve">
    <value>Reverse</value>
  </data>
  <data name="RegexEscape.Text" xml:space="preserve">
    <value>Regex Escape</value>
  </data>
  <data name="RegexUnescape.Text" xml:space="preserve">
    <value>Regex Unescape</value>
  </data>
  <data name="StringSplitInfo_Distinct.Help" xml:space="preserve">
    <value>If checked, duplicates are removed from the resulting list of strings</value>
  </data>
  <data name="StringSplitInfo_Distinct.Text" xml:space="preserve">
    <value>Distinct</value>
  </data>
  <data name="HttpHandlerSettings_RegisteredPaths.Help" xml:space="preserve">
    <value>Those are template urls associated to this handler</value>
  </data>
  <data name="HttpHandlerSettings_RegisteredPaths.Text" xml:space="preserve">
    <value>Registered Paths</value>
  </data>
  <data name="HttpHandlerSettings_RegisteredSubPaths.Help" xml:space="preserve">
    <value>Those are template urls associated to this handler's subhandlers</value>
  </data>
  <data name="HttpHandlerSettings_RegisteredSubPaths.Text" xml:space="preserve">
    <value>Registered Subpaths</value>
  </data>
  <data name="SimpleOrExpression`1_Expression.Help" xml:space="preserve">
    <value>Enter an expression to be evaluated at runtime, that resolves to an object of the same type as the simple instance.</value>
  </data>
  <data name="SimpleOrExpression`1_Expression.Text" xml:space="preserve">
    <value>Expression</value>
  </data>
  <data name="WebRequestInfo`1_CaptureResponseHeaders.Help" xml:space="preserve">
    <value>Check to enter the name of a variable to save the response headers.</value>
  </data>
  <data name="WebRequestInfo`1_CaptureResponseHeaders.Text" xml:space="preserve">
    <value>Capture Headers to Variable</value>
  </data>
  <data name="CallServiceAction`1_Parameters.Help" xml:space="preserve">
    <value>Optionally define a list of parameters to be passed to the action. You can use the available command button to preparer paramters according to the registered action signature.</value>
  </data>
  <data name="CallServiceAction`1_Parameters.Text" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="CallServiceAction`1_SelectedActionName.Help" xml:space="preserve">
    <value>Select an action from the list of actions available within the selected controller</value>
  </data>
  <data name="CallServiceAction`1_SelectedActionName.Text" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="CallServiceAction`1_SelectedControllerName.Help" xml:space="preserve">
    <value>Select a controller from the list of controllers available within the selected service</value>
  </data>
  <data name="CallServiceAction`1_SelectedControllerName.Text" xml:space="preserve">
    <value>Controller</value>
  </data>
  <data name="CallServiceAction`1_SelectedServiceName.Help" xml:space="preserve">
    <value>Select a web service from the list of services hosted on the platform</value>
  </data>
  <data name="CallServiceAction`1_SelectedServiceName.Text" xml:space="preserve">
    <value>Web Service</value>
  </data>
  <data name="CallServiceAction`1_SetParameters.Text" xml:space="preserve">
    <value>Prepare paramters according to selected Action</value>
  </data>
  <data name="CallServiceAction`1_Verb.Help" xml:space="preserve">
    <value>Select an http verb to emulate (note that no real http call is performed, the dynamic action being invoked directly for optimal performances)</value>
  </data>
  <data name="CallServiceAction`1_Verb.Text" xml:space="preserve">
    <value>Http Verb</value>
  </data>
  <data name="SelectedActionName.NullSelect" xml:space="preserve">
    <value>&lt;-- Select an Action --&gt;</value>
  </data>
  <data name="SelectedControllerName.NullSelect" xml:space="preserve">
    <value>&lt;-- Select a Controller --&gt;</value>
  </data>
  <data name="SelectedServiceName.NullSelect" xml:space="preserve">
    <value>&lt;-- Select a Service --&gt;</value>
  </data>
  <data name="RecursiveAStar.Text" xml:space="preserve">
    <value>Recursive A Star</value>
  </data>
  <data name="RecursiveGreedyBestFirst.Text" xml:space="preserve">
    <value>Recursive Greedy Best First</value>
  </data>
  <data name="ClearItems.Warning" xml:space="preserve">
    <value>This will remove all items from the collection. Are you sure?</value>
  </data>
  <data name="DPLLEntails.Text" xml:space="preserve">
    <value>DPLL Entails</value>
  </data>
  <data name="DPLLSatisfiable.Text" xml:space="preserve">
    <value>DPLL Satisfiable</value>
  </data>
  <data name="GeneralVariableInfo_ResetInstance.Text.ToolTip" xml:space="preserve">
    <value>Click to reset the current object to a new instance</value>
  </data>
  <data name="PLFCEntails.Text" xml:space="preserve">
    <value>PL Forward Chaining Entails</value>
  </data>
  <data name="PLKbInferInfo_KnowledgeBase.Help" xml:space="preserve">
    <value>Define a variable that resolves into a PL Knowledge Base</value>
  </data>
  <data name="PLKbInferInfo_KnowledgeBase.Text" xml:space="preserve">
    <value>Knowledge Base</value>
  </data>
  <data name="PLKbInferInfo_Predicate.Help" xml:space="preserve">
    <value>Enter a predicate as a string or an expression of a string to be parsed and used for inference against the  knowldege base</value>
  </data>
  <data name="PLKbInferInfo_Predicate.Text" xml:space="preserve">
    <value>Predicate</value>
  </data>
  <data name="PLKbInferInfo_Procedure.Help" xml:space="preserve">
    <value>Define here the type of inference to apply to the predicate relative to the knowledge base</value>
  </data>
  <data name="PLKbInferInfo_Procedure.Text" xml:space="preserve">
    <value>Inference Procedure</value>
  </data>
  <data name="PLKbInferProcedureInfo_Procedure.Help" xml:space="preserve">
    <value>Select on of the inference modes available.</value>
  </data>
  <data name="PLKbInferProcedureInfo_Procedure.Text" xml:space="preserve">
    <value>Procedure</value>
  </data>
  <data name="PLKbInferProcedureInfo_WalkSatMaxFlips.Help" xml:space="preserve">
    <value>Max number of individual steps for walksat during local search</value>
  </data>
  <data name="PLKbInferProcedureInfo_WalkSatMaxFlips.Text" xml:space="preserve">
    <value>WalkSat Max Flips</value>
  </data>
  <data name="PLKbInferProcedureInfo_WalkSatProbability.Help" xml:space="preserve">
    <value>Probability for the Walksat algorithm to move side ways to evade local extrema during local search.</value>
  </data>
  <data name="PLKbInferProcedureInfo_WalkSatProbability.Text" xml:space="preserve">
    <value>WalkSat Probability</value>
  </data>
  <data name="PLKbInfo_Sentences.Help" xml:space="preserve">
    <value>Those are the sentences that make up the Knowledge Base content. You can use native "tell" method of the KnowledgeBase property to add sentences to the KB</value>
  </data>
  <data name="PLKbInfo_Sentences.Text" xml:space="preserve">
    <value>Sentences</value>
  </data>
  <data name="Resolve.Text" xml:space="preserve">
    <value>Resolve</value>
  </data>
  <data name="SimpleExpression`1_DisplayAvailableVars.Text.ToolTip" xml:space="preserve">
    <value>Click to open a local expression builder with access to local variables</value>
  </data>
  <data name="SimpleOrExpressionBase`2_ResetInstance.Text.ToolTip" xml:space="preserve">
    <value>Click to reset the simple object to a new instance</value>
  </data>
  <data name="TTEntails.Text" xml:space="preserve">
    <value>Truth Table Entails</value>
  </data>
  <data name="WalkSatKb.Text" xml:space="preserve">
    <value>WalkSat Knowledge Base</value>
  </data>
  <data name="WalkSatPredicate.Text" xml:space="preserve">
    <value>WalkSat Predicate</value>
  </data>
  <data name="BCAsk.Text" xml:space="preserve">
    <value>Backward Chaining Ask</value>
  </data>
  <data name="FCAsk.Text" xml:space="preserve">
    <value>Forward Chaining Ask</value>
  </data>
  <data name="FolDomainInfo_Constants.Help" xml:space="preserve">
    <value>Constants represent real world objects</value>
  </data>
  <data name="FolDomainInfo_Constants.Text" xml:space="preserve">
    <value>Constants</value>
  </data>
  <data name="FolDomainInfo_Functions.Help" xml:space="preserve">
    <value>Functions represents object relations with a defined result</value>
  </data>
  <data name="FolDomainInfo_Functions.Text" xml:space="preserve">
    <value>Functions</value>
  </data>
  <data name="FolDomainInfo_Predicates.Help" xml:space="preserve">
    <value>Predicates represent relations between objects or object properties</value>
  </data>
  <data name="FolDomainInfo_Predicates.Text" xml:space="preserve">
    <value>Predicates</value>
  </data>
  <data name="FolKbInferInfo_KnowledgeBase.Help" xml:space="preserve">
    <value>Define a variable that resolves into a First Order Logic Knowledge Base</value>
  </data>
  <data name="FolKbInferInfo_KnowledgeBase.Text" xml:space="preserve">
    <value>Knowledge Base</value>
  </data>
  <data name="FolKbInferInfo_Predicate.Help" xml:space="preserve">
    <value>Enter a predicate as a string or an expression of a string to be parsed and used for inference against the  knowldege base</value>
  </data>
  <data name="FolKbInferInfo_Predicate.Text" xml:space="preserve">
    <value>Predicate</value>
  </data>
  <data name="FolKbInfo_Domain.Help" xml:space="preserve">
    <value>A first order logic domain is composed of constants (objects), predicates (object relations), and functions (relations that return a result)</value>
  </data>
  <data name="FolKbInfo_Domain.Text" xml:space="preserve">
    <value>Domain</value>
  </data>
  <data name="FolKbInfo_Procedure.Help" xml:space="preserve">
    <value>Select an inference procedure to process your knowledge base</value>
  </data>
  <data name="FolKbInfo_Procedure.Text" xml:space="preserve">
    <value>Inference Procedure</value>
  </data>
  <data name="FolKbInfo_Sentences.Help" xml:space="preserve">
    <value>Those are the sentences that make up the Knowledge Base content. You can use native "tell" method of the KnowledgeBase property to add sentences to the KB</value>
  </data>
  <data name="FolKbInfo_Sentences.Text" xml:space="preserve">
    <value>Sentences</value>
  </data>
  <data name="ModelElimination.Text" xml:space="preserve">
    <value>Model Elimination</value>
  </data>
  <data name="OTTERLikeTheoremProver.Text" xml:space="preserve">
    <value>OTTER Like Theorem Prover</value>
  </data>
  <data name="TFMResolution.Text" xml:space="preserve">
    <value>Two Finger Method Resolution</value>
  </data>
  <data name="ApproxAdapter.Text" xml:space="preserve">
    <value>Approximation Inference</value>
  </data>
  <data name="ArbitraryToken.Text" xml:space="preserve">
    <value>Arbitrary Token</value>
  </data>
  <data name="Assignment.Text" xml:space="preserve">
    <value>Assignment</value>
  </data>
  <data name="BayesianAskInfo_Posteriors.Help" xml:space="preserve">
    <value>Enter here the conditional assignments involved in the posterior computation</value>
  </data>
  <data name="BayesianAskInfo_Posteriors.Text" xml:space="preserve">
    <value>Posterior Propsitions</value>
  </data>
  <data name="BayesianAskInfo_Prior.Help" xml:space="preserve">
    <value>Enter here proposition(s), to calculate priors or posteriors. </value>
  </data>
  <data name="BayesianAskInfo_Prior.Text" xml:space="preserve">
    <value>Prior Propositions</value>
  </data>
  <data name="BayesianAskInfo_QueryType.Help" xml:space="preserve">
    <value>Choose amongst prior or joint distribution for propositions, or posterior distribution given a prior proposition and posterior propositions</value>
  </data>
  <data name="BayesianAskInfo_QueryType.Text" xml:space="preserve">
    <value>Query Type</value>
  </data>
  <data name="BayesianNetworkInfo_Nodes.Help" xml:space="preserve">
    <value>each node define a random variable probability distribution together with dependencies to other nodes such that a Markov blanket can be defined.</value>
  </data>
  <data name="BayesianNetworkInfo_Nodes.Text" xml:space="preserve">
    <value>Nodes</value>
  </data>
  <data name="BayesianNetworkInfo_RandomVariables.Help" xml:space="preserve">
    <value>Random variables are defined by their names and domains. They can be later instantiated as part of the inference ask.</value>
  </data>
  <data name="BayesianNetworkInfo_RandomVariables.Text" xml:space="preserve">
    <value>Random Variables</value>
  </data>
  <data name="BayesianNodeInfo_ConditionalProbabilities.Help" xml:space="preserve">
    <value>This should be a table of double with values corresponding to the probability table of the node</value>
  </data>
  <data name="BayesianNodeInfo_ConditionalProbabilities.Text" xml:space="preserve">
    <value>Conditional Probabilities</value>
  </data>
  <data name="BayesianNodeInfo_Parents.Help" xml:space="preserve">
    <value>Enter the names of the random variables that this node depends on</value>
  </data>
  <data name="BayesianNodeInfo_Parents.Text" xml:space="preserve">
    <value>Parents</value>
  </data>
  <data name="BayesianNodeInfo_RandomVariable.Help" xml:space="preserve">
    <value>Enter the name  for the random variable with probabilities defined by this node</value>
  </data>
  <data name="BayesianNodeInfo_RandomVariable.Text" xml:space="preserve">
    <value>Random Variable</value>
  </data>
  <data name="BayesianQueryInfo_Ask.Help" xml:space="preserve">
    <value>Define a query with priors and posterior proposition to query the network.</value>
  </data>
  <data name="BayesianQueryInfo_Ask.Text" xml:space="preserve">
    <value>Ask Query</value>
  </data>
  <data name="BayesianQueryInfo_BayesianNetwork.Help" xml:space="preserve">
    <value>A bayesian network holds random variables and conditional probability distributions for those variables, with partial dependencies</value>
  </data>
  <data name="BayesianQueryInfo_BayesianNetwork.Text" xml:space="preserve">
    <value>Bayesian Network</value>
  </data>
  <data name="BayesianQueryInfo_InferenceType.Help" xml:space="preserve">
    <value>Define here the type of inference to apply to your bayesian model.</value>
  </data>
  <data name="BayesianQueryInfo_InferenceType.Text" xml:space="preserve">
    <value>Inference Type</value>
  </data>
  <data name="BayesInferenceInfo_ApproxAdapterMode.Help" xml:space="preserve">
    <value>Choose a method to perform approximate bayesian inference</value>
  </data>
  <data name="BayesInferenceInfo_ApproxAdapterMode.Text" xml:space="preserve">
    <value>Approximation Method</value>
  </data>
  <data name="BayesInferenceInfo_Procedure.Help" xml:space="preserve">
    <value>Bayesian inference can be exact with enumeration or elimination ask, or approximate with max number of steps.</value>
  </data>
  <data name="BayesInferenceInfo_Procedure.Text" xml:space="preserve">
    <value>Inference Procedure</value>
  </data>
  <data name="BayesInferenceInfo_SampleNb.Help" xml:space="preserve">
    <value>This is the number of samples used to perform the approximation</value>
  </data>
  <data name="BayesInferenceInfo_SampleNb.Text" xml:space="preserve">
    <value>Sample Number</value>
  </data>
  <data name="Boolean.Text" xml:space="preserve">
    <value>Boolean</value>
  </data>
  <data name="Conjunctive.Text" xml:space="preserve">
    <value>Conjunctive</value>
  </data>
  <data name="Dysjunctive.Text" xml:space="preserve">
    <value>Dysjunctive</value>
  </data>
  <data name="EliminationAsk.Text" xml:space="preserve">
    <value>Elimination Ask</value>
  </data>
  <data name="EnumerationAsk.Text" xml:space="preserve">
    <value>Enumeration Ask</value>
  </data>
  <data name="FiniteInteger.Text" xml:space="preserve">
    <value>Finite Integer</value>
  </data>
  <data name="GibbsAsk.Text" xml:space="preserve">
    <value>Gibbs Ask</value>
  </data>
  <data name="Joint.Text" xml:space="preserve">
    <value>Joint Distribution</value>
  </data>
  <data name="LikelihoodWeighting.Text" xml:space="preserve">
    <value>Likelihood Weighting</value>
  </data>
  <data name="Posterior.Text" xml:space="preserve">
    <value>Posterior Distribution</value>
  </data>
  <data name="Prior.Text" xml:space="preserve">
    <value>Prior Distribution</value>
  </data>
  <data name="PropositionInfo_Children.Help" xml:space="preserve">
    <value>Enter the sub propositions that make up the conjunction or dysjunction.</value>
  </data>
  <data name="PropositionInfo_Children.Text" xml:space="preserve">
    <value>Children</value>
  </data>
  <data name="PropositionInfo_PropositionType.Help" xml:space="preserve">
    <value>Proposition can be a variable assignment, a conjunction or a dysjunction of propositions.</value>
  </data>
  <data name="PropositionInfo_PropositionType.Text" xml:space="preserve">
    <value>Proposition Type</value>
  </data>
  <data name="PropositionInfo_RandomVariable.Help" xml:space="preserve">
    <value>Enter the name of the random variable to assign</value>
  </data>
  <data name="PropositionInfo_RandomVariable.Text" xml:space="preserve">
    <value>Random Variable</value>
  </data>
  <data name="PropositionInfo_Value.Help" xml:space="preserve">
    <value>Define an aribtrary object (use a sub type if needed)</value>
  </data>
  <data name="PropositionInfo_Value.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="RandomVariable.Text" xml:space="preserve">
    <value>Random Variable</value>
  </data>
  <data name="RandomVariableInfo_ArbitraryValues.Help" xml:space="preserve">
    <value>Define a variable that resolves into a IEnumarable object.</value>
  </data>
  <data name="RandomVariableInfo_ArbitraryValues.Text" xml:space="preserve">
    <value>Custom values</value>
  </data>
  <data name="RandomVariableInfo_DomainType.Help" xml:space="preserve">
    <value>Only finite domains are defined for now. They can be boolean, a list of integers, or a list of custom objects.</value>
  </data>
  <data name="RandomVariableInfo_DomainType.Text" xml:space="preserve">
    <value>Domain Type</value>
  </data>
  <data name="RandomVariableInfo_IntValues.Help" xml:space="preserve">
    <value>Enter the list of integer that make up the domain for this random variable</value>
  </data>
  <data name="RandomVariableInfo_IntValues.Text" xml:space="preserve">
    <value>Integer Values</value>
  </data>
  <data name="RejectionSampling.Text" xml:space="preserve">
    <value>Rejection Sampling</value>
  </data>
  <data name="TemporalAskInfo_Evidences.Help" xml:space="preserve">
    <value>This is the list of observations (list of assignment propositions) for each step observed to be smoothed. (a list of a list)</value>
  </data>
  <data name="TemporalAskInfo_Evidences.Text" xml:space="preserve">
    <value>Evidences</value>
  </data>
  <data name="ForwardBackwardInfo_Prior.Help" xml:space="preserve">
    <value>This is the prior distribution for the initial state when the first observation is made.</value>
  </data>
  <data name="ForwardBackwardInfo_Prior.Text" xml:space="preserve">
    <value>Prior Distribution</value>
  </data>
  <data name="ForwardBackwardInfo_TemporalModel.Help" xml:space="preserve">
    <value>This is a generic definition of a temporal probabilistic model from Transition and Sensor Bayesian networks and a mapping of temporal Random Variables</value>
  </data>
  <data name="ForwardBackwardInfo_TemporalModel.Text" xml:space="preserve">
    <value>Temporal Model</value>
  </data>
  <data name="TemporalModelInfo_ReverseTemporalVariableMap.Help" xml:space="preserve">
    <value>This is a simple indication to map variable names from the current state to variables from the previous state.</value>
  </data>
  <data name="TemporalModelInfo_ReverseTemporalVariableMap.Text" xml:space="preserve">
    <value>Reverse Temporal Variable Map</value>
  </data>
  <data name="TemporalModelInfo_SensorModel.Help" xml:space="preserve">
    <value>The sensor model specifies the probability distribution over the latest observed variables,
given the state variable, that is, P(Et |X0:t−1,E0:t−1), that is P(Et |Xt) given the Markov hypothesis</value>
  </data>
  <data name="TemporalModelInfo_SensorModel.Text" xml:space="preserve">
    <value>Sensor Model</value>
  </data>
  <data name="TemporalModelInfo_TransitionModel.Help" xml:space="preserve">
    <value>The transition model specifies the probability distribution over the latest state variables,
given the previous values, that is, P(Xt |X0:t−1), that is P(Xt |Xt−1) given the Markov hypothesis</value>
  </data>
  <data name="TemporalModelInfo_TransitionModel.Text" xml:space="preserve">
    <value>Transition Model</value>
  </data>
  <data name="BayesianQueryInfo_Model.Header" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="BayesianQueryInfo_Query.Header" xml:space="preserve">
    <value>Query</value>
  </data>
  <data name="DynamicBayesianNetworkInfo_PriorNodes.Help" xml:space="preserve">
    <value>Enter the name of the Random Variable Nodes from the complete model, that make up roots for the prior model.</value>
  </data>
  <data name="DynamicBayesianNetworkInfo_PriorNodes.Text" xml:space="preserve">
    <value>Prior Nodes</value>
  </data>
  <data name="DynamicBayesianNetworkInfo_SensoryNodes.Help" xml:space="preserve">
    <value>Enter the name of the Random Variable Nodes from the complete model, that make up roots for the sensor model.</value>
  </data>
  <data name="DynamicBayesianNetworkInfo_SensoryNodes.Text" xml:space="preserve">
    <value>Sensory nodes</value>
  </data>
  <data name="DynamicBayesianNetworkInfo_Temporal.Header" xml:space="preserve">
    <value>Temporal</value>
  </data>
  <data name="DynamicBayesianNetworkInfo_TemporalVariableMap.Help" xml:space="preserve">
    <value>This is a simple indication to map variable names from the previous state to the current state.</value>
  </data>
  <data name="DynamicBayesianNetworkInfo_TemporalVariableMap.Text" xml:space="preserve">
    <value>Temporal Variable map</value>
  </data>
  <data name="DynamicControllerInfo_Global.Header" xml:space="preserve">
    <value>Global Parameters</value>
  </data>
  <data name="DynamicControllerInfo_Routes.Header" xml:space="preserve">
    <value>Routes</value>
  </data>
  <data name="FixedLagSmoothingInfo_HiddenMarkovModel.Help" xml:space="preserve">
    <value>A hidden markov model is a simple temporal probabilistic model in the form of a single state dynamic bayesian network, with matrices defining the transition and sensor models.</value>
  </data>
  <data name="FixedLagSmoothingInfo_HiddenMarkovModel.Text" xml:space="preserve">
    <value>Hidden Markov Model</value>
  </data>
  <data name="FixedLagSmoothingInfo_LagLength.Help" xml:space="preserve">
    <value>length of the lag accounted for in the smoothing algorithm</value>
  </data>
  <data name="FixedLagSmoothingInfo_LagLength.Text" xml:space="preserve">
    <value>Lag Length</value>
  </data>
  <data name="FixedLagSmoothingInfo_Model.Header" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="ForwardBackwardInfo_Model.Header" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="HiddenMarkovModelInfo_ObservationVariable.Help" xml:space="preserve">
    <value>the single discrete random variable used to describe the  Observation evidence.</value>
  </data>
  <data name="HiddenMarkovModelInfo_ObservationVariable.Text" xml:space="preserve">
    <value>Observation Variable</value>
  </data>
  <data name="HiddenMarkovModelInfo_Prior.Help" xml:space="preserve">
    <value>the prior distribution represented as a column vector in Matrix form</value>
  </data>
  <data name="HiddenMarkovModelInfo_Prior.Text" xml:space="preserve">
    <value>Prior Distribution</value>
  </data>
  <data name="HiddenMarkovModelInfo_SensorModel.Help" xml:space="preserve">
    <value>the sensor model in matrix form: P(e&lt;sub&gt;t&lt;/sub&gt; | X&lt;sub&gt;t&lt;/sub&gt; = i) for each state i. For  mathematical convenience we place each of these values into an S * S diagonal matrix.</value>
  </data>
  <data name="HiddenMarkovModelInfo_SensorModel.Text" xml:space="preserve">
    <value>Sensor model</value>
  </data>
  <data name="HiddenMarkovModelInfo_StateVariable.Help" xml:space="preserve">
    <value>the single discrete random variable used to describe the  process states 1,...,S.</value>
  </data>
  <data name="HiddenMarkovModelInfo_StateVariable.Text" xml:space="preserve">
    <value>State Variable</value>
  </data>
  <data name="HiddenMarkovModelInfo_TransitionModel.Help" xml:space="preserve">
    <value>the transition model &lt;b&gt;P&lt;/b&gt;(X&lt;sub&gt;t&lt;/sub&gt; | X&lt;sub&gt;t-1&lt;/sub&gt;) is represented by an S * S matrix &lt;b&gt;T&lt;/b&gt; where &lt;b&gt;T&lt;/b&gt;&lt;sub&gt;ij&lt;/sub&gt; = P(X&lt;sub&gt;t&lt;/sub&gt; = j | X&lt;sub&gt;t-1&lt;/sub&gt; = i).</value>
  </data>
  <data name="HiddenMarkovModelInfo_TransitionModel.Text" xml:space="preserve">
    <value>Transition Model</value>
  </data>
  <data name="MatrixInfo_Rows.Help" xml:space="preserve">
    <value>A matrix is defined by Rows as same-size arrays of doubles</value>
  </data>
  <data name="MatrixInfo_Rows.Text" xml:space="preserve">
    <value>Row</value>
  </data>
  <data name="Mock.Text" xml:space="preserve">
    <value>Mock</value>
  </data>
  <data name="ParticleFilteringInfo_DynamicBayesianNetwork.Help" xml:space="preserve">
    <value>a DBN with prior &lt;b&gt;P&lt;/b&gt;(&lt;b&gt;X&lt;/b&gt;&lt;sub&gt;0&lt;/sub&gt;), transition model &lt;b&gt;P&lt;/b&gt;(&lt;b&gt;X&lt;/b&gt;&lt;sub&gt;1&lt;/sub&gt; | &lt;b&gt;X&lt;/b&gt;&lt;sub&gt;0&lt;/sub&gt;), sensor model &lt;b&gt;P&lt;/b&gt;(&lt;b&gt;E&lt;/b&gt;&lt;sub&gt;1&lt;/sub&gt; |&lt;b&gt;X&lt;/b&gt;&lt;sub&gt;1&lt;/sub&gt;)</value>
  </data>
  <data name="ParticleFilteringInfo_DynamicBayesianNetwork.Text" xml:space="preserve">
    <value>Dynamic Bayesian Network</value>
  </data>
  <data name="ParticleFilteringInfo_Model.Header" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="ParticleFilteringInfo_RandomizerType.Help" xml:space="preserve">
    <value>a Randomizer to be used for sampling purposes. You can use a Mock Randomizer for experimental purposes</value>
  </data>
  <data name="ParticleFilteringInfo_RandomizerType.Text" xml:space="preserve">
    <value>Randomizer</value>
  </data>
  <data name="ParticleFilteringInfo_RandomizerValues.Help" xml:space="preserve">
    <value>Enter probabilities double values mocking the randomizer behaviour</value>
  </data>
  <data name="ParticleFilteringInfo_RandomizerValues.Text" xml:space="preserve">
    <value>Mock Randomizer Values</value>
  </data>
  <data name="ParticleFilteringInfo_SampleNb.Help" xml:space="preserve">
    <value>The number of samples to be maintained for particle filtering</value>
  </data>
  <data name="ParticleFilteringInfo_SampleNb.Text" xml:space="preserve">
    <value>Sample Nb</value>
  </data>
  <data name="SensorMapRowInfo_SensorModel.Help" xml:space="preserve">
    <value>the sensor model in matrix form: P(e&lt;sub&gt;t&lt;/sub&gt; | X&lt;sub&gt;t&lt;/sub&gt; = i) for each state i. For mathematical convenience we place each of these values into an S * S diagonal matrix.</value>
  </data>
  <data name="SensorMapRowInfo_SensorModel.Text" xml:space="preserve">
    <value>Sensor model</value>
  </data>
  <data name="SensorMapRowInfo_Value.Help" xml:space="preserve">
    <value>This is the observed value to be associated with the following sensor model in matrix</value>
  </data>
  <data name="SensorMapRowInfo_Value.Text" xml:space="preserve">
    <value>Sensor Value</value>
  </data>
  <data name="TemporalAskInfo_Query.Header" xml:space="preserve">
    <value>Query</value>
  </data>
</root>